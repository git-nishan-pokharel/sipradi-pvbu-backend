/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `FAQs` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model FAQs
 *
 */
export type FAQsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$FAQsPayload>;

export type AggregateFAQs = {
  _count: FAQsCountAggregateOutputType | null;
  _min: FAQsMinAggregateOutputType | null;
  _max: FAQsMaxAggregateOutputType | null;
};

export type FAQsMinAggregateOutputType = {
  id: string | null;
  questionText: string | null;
  answerText: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type FAQsMaxAggregateOutputType = {
  id: string | null;
  questionText: string | null;
  answerText: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type FAQsCountAggregateOutputType = {
  id: number;
  questionText: number;
  answerText: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type FAQsMinAggregateInputType = {
  id?: true;
  questionText?: true;
  answerText?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type FAQsMaxAggregateInputType = {
  id?: true;
  questionText?: true;
  answerText?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type FAQsCountAggregateInputType = {
  id?: true;
  questionText?: true;
  answerText?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type FAQsAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FAQs to aggregate.
   */
  where?: Prisma.FAQsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FAQs to fetch.
   */
  orderBy?:
    | Prisma.FAQsOrderByWithRelationInput
    | Prisma.FAQsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FAQsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FAQs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FAQs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned FAQs
   **/
  _count?: true | FAQsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FAQsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FAQsMaxAggregateInputType;
};

export type GetFAQsAggregateType<T extends FAQsAggregateArgs> = {
  [P in keyof T & keyof AggregateFAQs]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFAQs[P]>
    : Prisma.GetScalarType<T[P], AggregateFAQs[P]>;
};

export type FAQsGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FAQsWhereInput;
  orderBy?:
    | Prisma.FAQsOrderByWithAggregationInput
    | Prisma.FAQsOrderByWithAggregationInput[];
  by: Prisma.FAQsScalarFieldEnum[] | Prisma.FAQsScalarFieldEnum;
  having?: Prisma.FAQsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: FAQsCountAggregateInputType | true;
  _min?: FAQsMinAggregateInputType;
  _max?: FAQsMaxAggregateInputType;
};

export type FAQsGroupByOutputType = {
  id: string;
  questionText: string;
  answerText: string;
  createdAt: Date;
  updatedAt: Date;
  _count: FAQsCountAggregateOutputType | null;
  _min: FAQsMinAggregateOutputType | null;
  _max: FAQsMaxAggregateOutputType | null;
};

type GetFAQsGroupByPayload<T extends FAQsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FAQsGroupByOutputType, T['by']> & {
      [P in keyof T & keyof FAQsGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], FAQsGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], FAQsGroupByOutputType[P]>;
    }
  >
>;

export type FAQsWhereInput = {
  AND?: Prisma.FAQsWhereInput | Prisma.FAQsWhereInput[];
  OR?: Prisma.FAQsWhereInput[];
  NOT?: Prisma.FAQsWhereInput | Prisma.FAQsWhereInput[];
  id?: Prisma.UuidFilter<'FAQs'> | string;
  questionText?: Prisma.StringFilter<'FAQs'> | string;
  answerText?: Prisma.StringFilter<'FAQs'> | string;
  createdAt?: Prisma.DateTimeFilter<'FAQs'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'FAQs'> | Date | string;
  faqTags?: Prisma.FAQTagsListRelationFilter;
};

export type FAQsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  faqTags?: Prisma.FAQTagsOrderByRelationAggregateInput;
};

export type FAQsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.FAQsWhereInput | Prisma.FAQsWhereInput[];
    OR?: Prisma.FAQsWhereInput[];
    NOT?: Prisma.FAQsWhereInput | Prisma.FAQsWhereInput[];
    questionText?: Prisma.StringFilter<'FAQs'> | string;
    answerText?: Prisma.StringFilter<'FAQs'> | string;
    createdAt?: Prisma.DateTimeFilter<'FAQs'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'FAQs'> | Date | string;
    faqTags?: Prisma.FAQTagsListRelationFilter;
  },
  'id'
>;

export type FAQsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.FAQsCountOrderByAggregateInput;
  _max?: Prisma.FAQsMaxOrderByAggregateInput;
  _min?: Prisma.FAQsMinOrderByAggregateInput;
};

export type FAQsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.FAQsScalarWhereWithAggregatesInput
    | Prisma.FAQsScalarWhereWithAggregatesInput[];
  OR?: Prisma.FAQsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.FAQsScalarWhereWithAggregatesInput
    | Prisma.FAQsScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'FAQs'> | string;
  questionText?: Prisma.StringWithAggregatesFilter<'FAQs'> | string;
  answerText?: Prisma.StringWithAggregatesFilter<'FAQs'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'FAQs'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'FAQs'> | Date | string;
};

export type FAQsCreateInput = {
  id?: string;
  questionText: string;
  answerText: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  faqTags?: Prisma.FAQTagsCreateNestedManyWithoutFaqsInput;
};

export type FAQsUncheckedCreateInput = {
  id?: string;
  questionText: string;
  answerText: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  faqTags?: Prisma.FAQTagsUncheckedCreateNestedManyWithoutFaqsInput;
};

export type FAQsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  faqTags?: Prisma.FAQTagsUpdateManyWithoutFaqsNestedInput;
};

export type FAQsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  faqTags?: Prisma.FAQTagsUncheckedUpdateManyWithoutFaqsNestedInput;
};

export type FAQsCreateManyInput = {
  id?: string;
  questionText: string;
  answerText: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type FAQsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type FAQsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type FAQsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type FAQsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type FAQsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type FAQsScalarRelationFilter = {
  is?: Prisma.FAQsWhereInput;
  isNot?: Prisma.FAQsWhereInput;
};

export type FAQsCreateNestedOneWithoutFaqTagsInput = {
  create?: Prisma.XOR<
    Prisma.FAQsCreateWithoutFaqTagsInput,
    Prisma.FAQsUncheckedCreateWithoutFaqTagsInput
  >;
  connectOrCreate?: Prisma.FAQsCreateOrConnectWithoutFaqTagsInput;
  connect?: Prisma.FAQsWhereUniqueInput;
};

export type FAQsUpdateOneRequiredWithoutFaqTagsNestedInput = {
  create?: Prisma.XOR<
    Prisma.FAQsCreateWithoutFaqTagsInput,
    Prisma.FAQsUncheckedCreateWithoutFaqTagsInput
  >;
  connectOrCreate?: Prisma.FAQsCreateOrConnectWithoutFaqTagsInput;
  upsert?: Prisma.FAQsUpsertWithoutFaqTagsInput;
  connect?: Prisma.FAQsWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.FAQsUpdateToOneWithWhereWithoutFaqTagsInput,
      Prisma.FAQsUpdateWithoutFaqTagsInput
    >,
    Prisma.FAQsUncheckedUpdateWithoutFaqTagsInput
  >;
};

export type FAQsCreateWithoutFaqTagsInput = {
  id?: string;
  questionText: string;
  answerText: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type FAQsUncheckedCreateWithoutFaqTagsInput = {
  id?: string;
  questionText: string;
  answerText: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type FAQsCreateOrConnectWithoutFaqTagsInput = {
  where: Prisma.FAQsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FAQsCreateWithoutFaqTagsInput,
    Prisma.FAQsUncheckedCreateWithoutFaqTagsInput
  >;
};

export type FAQsUpsertWithoutFaqTagsInput = {
  update: Prisma.XOR<
    Prisma.FAQsUpdateWithoutFaqTagsInput,
    Prisma.FAQsUncheckedUpdateWithoutFaqTagsInput
  >;
  create: Prisma.XOR<
    Prisma.FAQsCreateWithoutFaqTagsInput,
    Prisma.FAQsUncheckedCreateWithoutFaqTagsInput
  >;
  where?: Prisma.FAQsWhereInput;
};

export type FAQsUpdateToOneWithWhereWithoutFaqTagsInput = {
  where?: Prisma.FAQsWhereInput;
  data: Prisma.XOR<
    Prisma.FAQsUpdateWithoutFaqTagsInput,
    Prisma.FAQsUncheckedUpdateWithoutFaqTagsInput
  >;
};

export type FAQsUpdateWithoutFaqTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type FAQsUncheckedUpdateWithoutFaqTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type FAQsCountOutputType
 */

export type FAQsCountOutputType = {
  faqTags: number;
};

export type FAQsCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  faqTags?: boolean | FAQsCountOutputTypeCountFaqTagsArgs;
};

/**
 * FAQsCountOutputType without action
 */
export type FAQsCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQsCountOutputType
   */
  select?: Prisma.FAQsCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * FAQsCountOutputType without action
 */
export type FAQsCountOutputTypeCountFaqTagsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FAQTagsWhereInput;
};

export type FAQsSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    questionText?: boolean;
    answerText?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    faqTags?: boolean | Prisma.FAQs$faqTagsArgs<ExtArgs>;
    _count?: boolean | Prisma.FAQsCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['fAQs']
>;

export type FAQsSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    questionText?: boolean;
    answerText?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['fAQs']
>;

export type FAQsSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    questionText?: boolean;
    answerText?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['fAQs']
>;

export type FAQsSelectScalar = {
  id?: boolean;
  questionText?: boolean;
  answerText?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type FAQsOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'questionText' | 'answerText' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['fAQs']
>;
export type FAQsInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  faqTags?: boolean | Prisma.FAQs$faqTagsArgs<ExtArgs>;
  _count?: boolean | Prisma.FAQsCountOutputTypeDefaultArgs<ExtArgs>;
};
export type FAQsIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type FAQsIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $FAQsPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'FAQs';
  objects: {
    faqTags: Prisma.$FAQTagsPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      questionText: string;
      answerText: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['fAQs']
  >;
  composites: {};
};

export type FAQsGetPayload<
  S extends boolean | null | undefined | FAQsDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$FAQsPayload, S>;

export type FAQsCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<FAQsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: FAQsCountAggregateInputType | true;
};

export interface FAQsDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['FAQs'];
    meta: { name: 'FAQs' };
  };
  /**
   * Find zero or one FAQs that matches the filter.
   * @param {FAQsFindUniqueArgs} args - Arguments to find a FAQs
   * @example
   * // Get one FAQs
   * const fAQs = await prisma.fAQs.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FAQsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FAQsFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one FAQs that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FAQsFindUniqueOrThrowArgs} args - Arguments to find a FAQs
   * @example
   * // Get one FAQs
   * const fAQs = await prisma.fAQs.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FAQsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FAQsFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first FAQs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQsFindFirstArgs} args - Arguments to find a FAQs
   * @example
   * // Get one FAQs
   * const fAQs = await prisma.fAQs.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FAQsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FAQsFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first FAQs that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQsFindFirstOrThrowArgs} args - Arguments to find a FAQs
   * @example
   * // Get one FAQs
   * const fAQs = await prisma.fAQs.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FAQsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FAQsFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more FAQs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FAQs
   * const fAQs = await prisma.fAQs.findMany()
   *
   * // Get first 10 FAQs
   * const fAQs = await prisma.fAQs.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const fAQsWithIdOnly = await prisma.fAQs.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FAQsFindManyArgs>(
    args?: Prisma.SelectSubset<T, FAQsFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a FAQs.
   * @param {FAQsCreateArgs} args - Arguments to create a FAQs.
   * @example
   * // Create one FAQs
   * const FAQs = await prisma.fAQs.create({
   *   data: {
   *     // ... data to create a FAQs
   *   }
   * })
   *
   */
  create<T extends FAQsCreateArgs>(
    args: Prisma.SelectSubset<T, FAQsCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many FAQs.
   * @param {FAQsCreateManyArgs} args - Arguments to create many FAQs.
   * @example
   * // Create many FAQs
   * const fAQs = await prisma.fAQs.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FAQsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FAQsCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many FAQs and returns the data saved in the database.
   * @param {FAQsCreateManyAndReturnArgs} args - Arguments to create many FAQs.
   * @example
   * // Create many FAQs
   * const fAQs = await prisma.fAQs.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many FAQs and only return the `id`
   * const fAQsWithIdOnly = await prisma.fAQs.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FAQsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, FAQsCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a FAQs.
   * @param {FAQsDeleteArgs} args - Arguments to delete one FAQs.
   * @example
   * // Delete one FAQs
   * const FAQs = await prisma.fAQs.delete({
   *   where: {
   *     // ... filter to delete one FAQs
   *   }
   * })
   *
   */
  delete<T extends FAQsDeleteArgs>(
    args: Prisma.SelectSubset<T, FAQsDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one FAQs.
   * @param {FAQsUpdateArgs} args - Arguments to update one FAQs.
   * @example
   * // Update one FAQs
   * const fAQs = await prisma.fAQs.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FAQsUpdateArgs>(
    args: Prisma.SelectSubset<T, FAQsUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more FAQs.
   * @param {FAQsDeleteManyArgs} args - Arguments to filter FAQs to delete.
   * @example
   * // Delete a few FAQs
   * const { count } = await prisma.fAQs.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FAQsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FAQsDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more FAQs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FAQs
   * const fAQs = await prisma.fAQs.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FAQsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FAQsUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more FAQs and returns the data updated in the database.
   * @param {FAQsUpdateManyAndReturnArgs} args - Arguments to update many FAQs.
   * @example
   * // Update many FAQs
   * const fAQs = await prisma.fAQs.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more FAQs and only return the `id`
   * const fAQsWithIdOnly = await prisma.fAQs.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FAQsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, FAQsUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one FAQs.
   * @param {FAQsUpsertArgs} args - Arguments to update or create a FAQs.
   * @example
   * // Update or create a FAQs
   * const fAQs = await prisma.fAQs.upsert({
   *   create: {
   *     // ... data to create a FAQs
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FAQs we want to update
   *   }
   * })
   */
  upsert<T extends FAQsUpsertArgs>(
    args: Prisma.SelectSubset<T, FAQsUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQsPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of FAQs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQsCountArgs} args - Arguments to filter FAQs to count.
   * @example
   * // Count the number of FAQs
   * const count = await prisma.fAQs.count({
   *   where: {
   *     // ... the filter for the FAQs we want to count
   *   }
   * })
   **/
  count<T extends FAQsCountArgs>(
    args?: Prisma.Subset<T, FAQsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FAQsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a FAQs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FAQsAggregateArgs>(
    args: Prisma.Subset<T, FAQsAggregateArgs>,
  ): Prisma.PrismaPromise<GetFAQsAggregateType<T>>;

  /**
   * Group by FAQs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FAQsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FAQsGroupByArgs['orderBy'] }
      : { orderBy?: FAQsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, FAQsGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetFAQsGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the FAQs model
   */
  readonly fields: FAQsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FAQs.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FAQsClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  faqTags<T extends Prisma.FAQs$faqTagsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FAQs$faqTagsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$FAQTagsPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the FAQs model
 */
export interface FAQsFieldRefs {
  readonly id: Prisma.FieldRef<'FAQs', 'String'>;
  readonly questionText: Prisma.FieldRef<'FAQs', 'String'>;
  readonly answerText: Prisma.FieldRef<'FAQs', 'String'>;
  readonly createdAt: Prisma.FieldRef<'FAQs', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'FAQs', 'DateTime'>;
}

// Custom InputTypes
/**
 * FAQs findUnique
 */
export type FAQsFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQs to fetch.
   */
  where: Prisma.FAQsWhereUniqueInput;
};

/**
 * FAQs findUniqueOrThrow
 */
export type FAQsFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQs to fetch.
   */
  where: Prisma.FAQsWhereUniqueInput;
};

/**
 * FAQs findFirst
 */
export type FAQsFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQs to fetch.
   */
  where?: Prisma.FAQsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FAQs to fetch.
   */
  orderBy?:
    | Prisma.FAQsOrderByWithRelationInput
    | Prisma.FAQsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FAQs.
   */
  cursor?: Prisma.FAQsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FAQs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FAQs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FAQs.
   */
  distinct?: Prisma.FAQsScalarFieldEnum | Prisma.FAQsScalarFieldEnum[];
};

/**
 * FAQs findFirstOrThrow
 */
export type FAQsFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQs to fetch.
   */
  where?: Prisma.FAQsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FAQs to fetch.
   */
  orderBy?:
    | Prisma.FAQsOrderByWithRelationInput
    | Prisma.FAQsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FAQs.
   */
  cursor?: Prisma.FAQsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FAQs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FAQs.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FAQs.
   */
  distinct?: Prisma.FAQsScalarFieldEnum | Prisma.FAQsScalarFieldEnum[];
};

/**
 * FAQs findMany
 */
export type FAQsFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQs to fetch.
   */
  where?: Prisma.FAQsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FAQs to fetch.
   */
  orderBy?:
    | Prisma.FAQsOrderByWithRelationInput
    | Prisma.FAQsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing FAQs.
   */
  cursor?: Prisma.FAQsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FAQs from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FAQs.
   */
  skip?: number;
  distinct?: Prisma.FAQsScalarFieldEnum | Prisma.FAQsScalarFieldEnum[];
};

/**
 * FAQs create
 */
export type FAQsCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
  /**
   * The data needed to create a FAQs.
   */
  data: Prisma.XOR<Prisma.FAQsCreateInput, Prisma.FAQsUncheckedCreateInput>;
};

/**
 * FAQs createMany
 */
export type FAQsCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many FAQs.
   */
  data: Prisma.FAQsCreateManyInput | Prisma.FAQsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * FAQs createManyAndReturn
 */
export type FAQsCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * The data used to create many FAQs.
   */
  data: Prisma.FAQsCreateManyInput | Prisma.FAQsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * FAQs update
 */
export type FAQsUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
  /**
   * The data needed to update a FAQs.
   */
  data: Prisma.XOR<Prisma.FAQsUpdateInput, Prisma.FAQsUncheckedUpdateInput>;
  /**
   * Choose, which FAQs to update.
   */
  where: Prisma.FAQsWhereUniqueInput;
};

/**
 * FAQs updateMany
 */
export type FAQsUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update FAQs.
   */
  data: Prisma.XOR<
    Prisma.FAQsUpdateManyMutationInput,
    Prisma.FAQsUncheckedUpdateManyInput
  >;
  /**
   * Filter which FAQs to update
   */
  where?: Prisma.FAQsWhereInput;
  /**
   * Limit how many FAQs to update.
   */
  limit?: number;
};

/**
 * FAQs updateManyAndReturn
 */
export type FAQsUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * The data used to update FAQs.
   */
  data: Prisma.XOR<
    Prisma.FAQsUpdateManyMutationInput,
    Prisma.FAQsUncheckedUpdateManyInput
  >;
  /**
   * Filter which FAQs to update
   */
  where?: Prisma.FAQsWhereInput;
  /**
   * Limit how many FAQs to update.
   */
  limit?: number;
};

/**
 * FAQs upsert
 */
export type FAQsUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
  /**
   * The filter to search for the FAQs to update in case it exists.
   */
  where: Prisma.FAQsWhereUniqueInput;
  /**
   * In case the FAQs found by the `where` argument doesn't exist, create a new FAQs with this data.
   */
  create: Prisma.XOR<Prisma.FAQsCreateInput, Prisma.FAQsUncheckedCreateInput>;
  /**
   * In case the FAQs was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FAQsUpdateInput, Prisma.FAQsUncheckedUpdateInput>;
};

/**
 * FAQs delete
 */
export type FAQsDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
  /**
   * Filter which FAQs to delete.
   */
  where: Prisma.FAQsWhereUniqueInput;
};

/**
 * FAQs deleteMany
 */
export type FAQsDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FAQs to delete
   */
  where?: Prisma.FAQsWhereInput;
  /**
   * Limit how many FAQs to delete.
   */
  limit?: number;
};

/**
 * FAQs.faqTags
 */
export type FAQs$faqTagsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  where?: Prisma.FAQTagsWhereInput;
  orderBy?:
    | Prisma.FAQTagsOrderByWithRelationInput
    | Prisma.FAQTagsOrderByWithRelationInput[];
  cursor?: Prisma.FAQTagsWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.FAQTagsScalarFieldEnum | Prisma.FAQTagsScalarFieldEnum[];
};

/**
 * FAQs without action
 */
export type FAQsDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQs
   */
  select?: Prisma.FAQsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQs
   */
  omit?: Prisma.FAQsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQsInclude<ExtArgs> | null;
};
