/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Resource` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Resource
 *
 */
export type ResourceModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ResourcePayload>;

export type AggregateResource = {
  _count: ResourceCountAggregateOutputType | null;
  _avg: ResourceAvgAggregateOutputType | null;
  _sum: ResourceSumAggregateOutputType | null;
  _min: ResourceMinAggregateOutputType | null;
  _max: ResourceMaxAggregateOutputType | null;
};

export type ResourceAvgAggregateOutputType = {
  id: number | null;
};

export type ResourceSumAggregateOutputType = {
  id: number | null;
};

export type ResourceMinAggregateOutputType = {
  id: number | null;
  name: string | null;
};

export type ResourceMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
};

export type ResourceCountAggregateOutputType = {
  id: number;
  name: number;
  _all: number;
};

export type ResourceAvgAggregateInputType = {
  id?: true;
};

export type ResourceSumAggregateInputType = {
  id?: true;
};

export type ResourceMinAggregateInputType = {
  id?: true;
  name?: true;
};

export type ResourceMaxAggregateInputType = {
  id?: true;
  name?: true;
};

export type ResourceCountAggregateInputType = {
  id?: true;
  name?: true;
  _all?: true;
};

export type ResourceAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Resource to aggregate.
   */
  where?: Prisma.ResourceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Resources to fetch.
   */
  orderBy?:
    | Prisma.ResourceOrderByWithRelationInput
    | Prisma.ResourceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ResourceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Resources from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Resources.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Resources
   **/
  _count?: true | ResourceCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ResourceAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ResourceSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ResourceMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ResourceMaxAggregateInputType;
};

export type GetResourceAggregateType<T extends ResourceAggregateArgs> = {
  [P in keyof T & keyof AggregateResource]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateResource[P]>
    : Prisma.GetScalarType<T[P], AggregateResource[P]>;
};

export type ResourceGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ResourceWhereInput;
  orderBy?:
    | Prisma.ResourceOrderByWithAggregationInput
    | Prisma.ResourceOrderByWithAggregationInput[];
  by: Prisma.ResourceScalarFieldEnum[] | Prisma.ResourceScalarFieldEnum;
  having?: Prisma.ResourceScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ResourceCountAggregateInputType | true;
  _avg?: ResourceAvgAggregateInputType;
  _sum?: ResourceSumAggregateInputType;
  _min?: ResourceMinAggregateInputType;
  _max?: ResourceMaxAggregateInputType;
};

export type ResourceGroupByOutputType = {
  id: number;
  name: string;
  _count: ResourceCountAggregateOutputType | null;
  _avg: ResourceAvgAggregateOutputType | null;
  _sum: ResourceSumAggregateOutputType | null;
  _min: ResourceMinAggregateOutputType | null;
  _max: ResourceMaxAggregateOutputType | null;
};

type GetResourceGroupByPayload<T extends ResourceGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ResourceGroupByOutputType, T['by']> & {
        [P in keyof T & keyof ResourceGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ResourceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ResourceGroupByOutputType[P]>;
      }
    >
  >;

export type ResourceWhereInput = {
  AND?: Prisma.ResourceWhereInput | Prisma.ResourceWhereInput[];
  OR?: Prisma.ResourceWhereInput[];
  NOT?: Prisma.ResourceWhereInput | Prisma.ResourceWhereInput[];
  id?: Prisma.IntFilter<'Resource'> | number;
  name?: Prisma.StringFilter<'Resource'> | string;
  actions?: Prisma.ResourceActionListRelationFilter;
};

export type ResourceOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  actions?: Prisma.ResourceActionOrderByRelationAggregateInput;
};

export type ResourceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    name?: string;
    AND?: Prisma.ResourceWhereInput | Prisma.ResourceWhereInput[];
    OR?: Prisma.ResourceWhereInput[];
    NOT?: Prisma.ResourceWhereInput | Prisma.ResourceWhereInput[];
    actions?: Prisma.ResourceActionListRelationFilter;
  },
  'id' | 'name'
>;

export type ResourceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  _count?: Prisma.ResourceCountOrderByAggregateInput;
  _avg?: Prisma.ResourceAvgOrderByAggregateInput;
  _max?: Prisma.ResourceMaxOrderByAggregateInput;
  _min?: Prisma.ResourceMinOrderByAggregateInput;
  _sum?: Prisma.ResourceSumOrderByAggregateInput;
};

export type ResourceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ResourceScalarWhereWithAggregatesInput
    | Prisma.ResourceScalarWhereWithAggregatesInput[];
  OR?: Prisma.ResourceScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ResourceScalarWhereWithAggregatesInput
    | Prisma.ResourceScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'Resource'> | number;
  name?: Prisma.StringWithAggregatesFilter<'Resource'> | string;
};

export type ResourceCreateInput = {
  name: string;
  actions?: Prisma.ResourceActionCreateNestedManyWithoutResourceInput;
};

export type ResourceUncheckedCreateInput = {
  id?: number;
  name: string;
  actions?: Prisma.ResourceActionUncheckedCreateNestedManyWithoutResourceInput;
};

export type ResourceUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  actions?: Prisma.ResourceActionUpdateManyWithoutResourceNestedInput;
};

export type ResourceUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  actions?: Prisma.ResourceActionUncheckedUpdateManyWithoutResourceNestedInput;
};

export type ResourceCreateManyInput = {
  id?: number;
  name: string;
};

export type ResourceUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ResourceUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ResourceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
};

export type ResourceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ResourceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
};

export type ResourceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
};

export type ResourceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type ResourceScalarRelationFilter = {
  is?: Prisma.ResourceWhereInput;
  isNot?: Prisma.ResourceWhereInput;
};

export type ResourceCreateNestedOneWithoutActionsInput = {
  create?: Prisma.XOR<
    Prisma.ResourceCreateWithoutActionsInput,
    Prisma.ResourceUncheckedCreateWithoutActionsInput
  >;
  connectOrCreate?: Prisma.ResourceCreateOrConnectWithoutActionsInput;
  connect?: Prisma.ResourceWhereUniqueInput;
};

export type ResourceUpdateOneRequiredWithoutActionsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ResourceCreateWithoutActionsInput,
    Prisma.ResourceUncheckedCreateWithoutActionsInput
  >;
  connectOrCreate?: Prisma.ResourceCreateOrConnectWithoutActionsInput;
  upsert?: Prisma.ResourceUpsertWithoutActionsInput;
  connect?: Prisma.ResourceWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ResourceUpdateToOneWithWhereWithoutActionsInput,
      Prisma.ResourceUpdateWithoutActionsInput
    >,
    Prisma.ResourceUncheckedUpdateWithoutActionsInput
  >;
};

export type ResourceCreateWithoutActionsInput = {
  name: string;
};

export type ResourceUncheckedCreateWithoutActionsInput = {
  id?: number;
  name: string;
};

export type ResourceCreateOrConnectWithoutActionsInput = {
  where: Prisma.ResourceWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ResourceCreateWithoutActionsInput,
    Prisma.ResourceUncheckedCreateWithoutActionsInput
  >;
};

export type ResourceUpsertWithoutActionsInput = {
  update: Prisma.XOR<
    Prisma.ResourceUpdateWithoutActionsInput,
    Prisma.ResourceUncheckedUpdateWithoutActionsInput
  >;
  create: Prisma.XOR<
    Prisma.ResourceCreateWithoutActionsInput,
    Prisma.ResourceUncheckedCreateWithoutActionsInput
  >;
  where?: Prisma.ResourceWhereInput;
};

export type ResourceUpdateToOneWithWhereWithoutActionsInput = {
  where?: Prisma.ResourceWhereInput;
  data: Prisma.XOR<
    Prisma.ResourceUpdateWithoutActionsInput,
    Prisma.ResourceUncheckedUpdateWithoutActionsInput
  >;
};

export type ResourceUpdateWithoutActionsInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ResourceUncheckedUpdateWithoutActionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type ResourceCountOutputType
 */

export type ResourceCountOutputType = {
  actions: number;
};

export type ResourceCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  actions?: boolean | ResourceCountOutputTypeCountActionsArgs;
};

/**
 * ResourceCountOutputType without action
 */
export type ResourceCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceCountOutputType
   */
  select?: Prisma.ResourceCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ResourceCountOutputType without action
 */
export type ResourceCountOutputTypeCountActionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ResourceActionWhereInput;
};

export type ResourceSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    actions?: boolean | Prisma.Resource$actionsArgs<ExtArgs>;
    _count?: boolean | Prisma.ResourceCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['resource']
>;

export type ResourceSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
  },
  ExtArgs['result']['resource']
>;

export type ResourceSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
  },
  ExtArgs['result']['resource']
>;

export type ResourceSelectScalar = {
  id?: boolean;
  name?: boolean;
};

export type ResourceOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name',
  ExtArgs['result']['resource']
>;
export type ResourceInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  actions?: boolean | Prisma.Resource$actionsArgs<ExtArgs>;
  _count?: boolean | Prisma.ResourceCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ResourceIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type ResourceIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $ResourcePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Resource';
  objects: {
    actions: Prisma.$ResourceActionPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string;
    },
    ExtArgs['result']['resource']
  >;
  composites: {};
};

export type ResourceGetPayload<
  S extends boolean | null | undefined | ResourceDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ResourcePayload, S>;

export type ResourceCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ResourceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: ResourceCountAggregateInputType | true;
};

export interface ResourceDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Resource'];
    meta: { name: 'Resource' };
  };
  /**
   * Find zero or one Resource that matches the filter.
   * @param {ResourceFindUniqueArgs} args - Arguments to find a Resource
   * @example
   * // Get one Resource
   * const resource = await prisma.resource.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ResourceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ResourceFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Resource that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ResourceFindUniqueOrThrowArgs} args - Arguments to find a Resource
   * @example
   * // Get one Resource
   * const resource = await prisma.resource.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ResourceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ResourceFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Resource that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceFindFirstArgs} args - Arguments to find a Resource
   * @example
   * // Get one Resource
   * const resource = await prisma.resource.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ResourceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ResourceFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Resource that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceFindFirstOrThrowArgs} args - Arguments to find a Resource
   * @example
   * // Get one Resource
   * const resource = await prisma.resource.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ResourceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ResourceFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Resources that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Resources
   * const resources = await prisma.resource.findMany()
   *
   * // Get first 10 Resources
   * const resources = await prisma.resource.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const resourceWithIdOnly = await prisma.resource.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ResourceFindManyArgs>(
    args?: Prisma.SelectSubset<T, ResourceFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Resource.
   * @param {ResourceCreateArgs} args - Arguments to create a Resource.
   * @example
   * // Create one Resource
   * const Resource = await prisma.resource.create({
   *   data: {
   *     // ... data to create a Resource
   *   }
   * })
   *
   */
  create<T extends ResourceCreateArgs>(
    args: Prisma.SelectSubset<T, ResourceCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Resources.
   * @param {ResourceCreateManyArgs} args - Arguments to create many Resources.
   * @example
   * // Create many Resources
   * const resource = await prisma.resource.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ResourceCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ResourceCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Resources and returns the data saved in the database.
   * @param {ResourceCreateManyAndReturnArgs} args - Arguments to create many Resources.
   * @example
   * // Create many Resources
   * const resource = await prisma.resource.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Resources and only return the `id`
   * const resourceWithIdOnly = await prisma.resource.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ResourceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ResourceCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Resource.
   * @param {ResourceDeleteArgs} args - Arguments to delete one Resource.
   * @example
   * // Delete one Resource
   * const Resource = await prisma.resource.delete({
   *   where: {
   *     // ... filter to delete one Resource
   *   }
   * })
   *
   */
  delete<T extends ResourceDeleteArgs>(
    args: Prisma.SelectSubset<T, ResourceDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Resource.
   * @param {ResourceUpdateArgs} args - Arguments to update one Resource.
   * @example
   * // Update one Resource
   * const resource = await prisma.resource.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ResourceUpdateArgs>(
    args: Prisma.SelectSubset<T, ResourceUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Resources.
   * @param {ResourceDeleteManyArgs} args - Arguments to filter Resources to delete.
   * @example
   * // Delete a few Resources
   * const { count } = await prisma.resource.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ResourceDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ResourceDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Resources.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Resources
   * const resource = await prisma.resource.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ResourceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ResourceUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Resources and returns the data updated in the database.
   * @param {ResourceUpdateManyAndReturnArgs} args - Arguments to update many Resources.
   * @example
   * // Update many Resources
   * const resource = await prisma.resource.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Resources and only return the `id`
   * const resourceWithIdOnly = await prisma.resource.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ResourceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ResourceUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Resource.
   * @param {ResourceUpsertArgs} args - Arguments to update or create a Resource.
   * @example
   * // Update or create a Resource
   * const resource = await prisma.resource.upsert({
   *   create: {
   *     // ... data to create a Resource
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Resource we want to update
   *   }
   * })
   */
  upsert<T extends ResourceUpsertArgs>(
    args: Prisma.SelectSubset<T, ResourceUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourcePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Resources.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceCountArgs} args - Arguments to filter Resources to count.
   * @example
   * // Count the number of Resources
   * const count = await prisma.resource.count({
   *   where: {
   *     // ... the filter for the Resources we want to count
   *   }
   * })
   **/
  count<T extends ResourceCountArgs>(
    args?: Prisma.Subset<T, ResourceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ResourceCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Resource.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ResourceAggregateArgs>(
    args: Prisma.Subset<T, ResourceAggregateArgs>,
  ): Prisma.PrismaPromise<GetResourceAggregateType<T>>;

  /**
   * Group by Resource.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ResourceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ResourceGroupByArgs['orderBy'] }
      : { orderBy?: ResourceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ResourceGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetResourceGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Resource model
   */
  readonly fields: ResourceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Resource.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ResourceClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  actions<T extends Prisma.Resource$actionsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Resource$actionsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ResourceActionPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Resource model
 */
export interface ResourceFieldRefs {
  readonly id: Prisma.FieldRef<'Resource', 'Int'>;
  readonly name: Prisma.FieldRef<'Resource', 'String'>;
}

// Custom InputTypes
/**
 * Resource findUnique
 */
export type ResourceFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
  /**
   * Filter, which Resource to fetch.
   */
  where: Prisma.ResourceWhereUniqueInput;
};

/**
 * Resource findUniqueOrThrow
 */
export type ResourceFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
  /**
   * Filter, which Resource to fetch.
   */
  where: Prisma.ResourceWhereUniqueInput;
};

/**
 * Resource findFirst
 */
export type ResourceFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
  /**
   * Filter, which Resource to fetch.
   */
  where?: Prisma.ResourceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Resources to fetch.
   */
  orderBy?:
    | Prisma.ResourceOrderByWithRelationInput
    | Prisma.ResourceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Resources.
   */
  cursor?: Prisma.ResourceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Resources from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Resources.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Resources.
   */
  distinct?: Prisma.ResourceScalarFieldEnum | Prisma.ResourceScalarFieldEnum[];
};

/**
 * Resource findFirstOrThrow
 */
export type ResourceFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
  /**
   * Filter, which Resource to fetch.
   */
  where?: Prisma.ResourceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Resources to fetch.
   */
  orderBy?:
    | Prisma.ResourceOrderByWithRelationInput
    | Prisma.ResourceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Resources.
   */
  cursor?: Prisma.ResourceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Resources from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Resources.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Resources.
   */
  distinct?: Prisma.ResourceScalarFieldEnum | Prisma.ResourceScalarFieldEnum[];
};

/**
 * Resource findMany
 */
export type ResourceFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
  /**
   * Filter, which Resources to fetch.
   */
  where?: Prisma.ResourceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Resources to fetch.
   */
  orderBy?:
    | Prisma.ResourceOrderByWithRelationInput
    | Prisma.ResourceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Resources.
   */
  cursor?: Prisma.ResourceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Resources from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Resources.
   */
  skip?: number;
  distinct?: Prisma.ResourceScalarFieldEnum | Prisma.ResourceScalarFieldEnum[];
};

/**
 * Resource create
 */
export type ResourceCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
  /**
   * The data needed to create a Resource.
   */
  data: Prisma.XOR<
    Prisma.ResourceCreateInput,
    Prisma.ResourceUncheckedCreateInput
  >;
};

/**
 * Resource createMany
 */
export type ResourceCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Resources.
   */
  data: Prisma.ResourceCreateManyInput | Prisma.ResourceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Resource createManyAndReturn
 */
export type ResourceCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * The data used to create many Resources.
   */
  data: Prisma.ResourceCreateManyInput | Prisma.ResourceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Resource update
 */
export type ResourceUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
  /**
   * The data needed to update a Resource.
   */
  data: Prisma.XOR<
    Prisma.ResourceUpdateInput,
    Prisma.ResourceUncheckedUpdateInput
  >;
  /**
   * Choose, which Resource to update.
   */
  where: Prisma.ResourceWhereUniqueInput;
};

/**
 * Resource updateMany
 */
export type ResourceUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Resources.
   */
  data: Prisma.XOR<
    Prisma.ResourceUpdateManyMutationInput,
    Prisma.ResourceUncheckedUpdateManyInput
  >;
  /**
   * Filter which Resources to update
   */
  where?: Prisma.ResourceWhereInput;
  /**
   * Limit how many Resources to update.
   */
  limit?: number;
};

/**
 * Resource updateManyAndReturn
 */
export type ResourceUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * The data used to update Resources.
   */
  data: Prisma.XOR<
    Prisma.ResourceUpdateManyMutationInput,
    Prisma.ResourceUncheckedUpdateManyInput
  >;
  /**
   * Filter which Resources to update
   */
  where?: Prisma.ResourceWhereInput;
  /**
   * Limit how many Resources to update.
   */
  limit?: number;
};

/**
 * Resource upsert
 */
export type ResourceUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
  /**
   * The filter to search for the Resource to update in case it exists.
   */
  where: Prisma.ResourceWhereUniqueInput;
  /**
   * In case the Resource found by the `where` argument doesn't exist, create a new Resource with this data.
   */
  create: Prisma.XOR<
    Prisma.ResourceCreateInput,
    Prisma.ResourceUncheckedCreateInput
  >;
  /**
   * In case the Resource was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ResourceUpdateInput,
    Prisma.ResourceUncheckedUpdateInput
  >;
};

/**
 * Resource delete
 */
export type ResourceDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
  /**
   * Filter which Resource to delete.
   */
  where: Prisma.ResourceWhereUniqueInput;
};

/**
 * Resource deleteMany
 */
export type ResourceDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Resources to delete
   */
  where?: Prisma.ResourceWhereInput;
  /**
   * Limit how many Resources to delete.
   */
  limit?: number;
};

/**
 * Resource.actions
 */
export type Resource$actionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  where?: Prisma.ResourceActionWhereInput;
  orderBy?:
    | Prisma.ResourceActionOrderByWithRelationInput
    | Prisma.ResourceActionOrderByWithRelationInput[];
  cursor?: Prisma.ResourceActionWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.ResourceActionScalarFieldEnum
    | Prisma.ResourceActionScalarFieldEnum[];
};

/**
 * Resource without action
 */
export type ResourceDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Resource
   */
  select?: Prisma.ResourceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Resource
   */
  omit?: Prisma.ResourceOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceInclude<ExtArgs> | null;
};
