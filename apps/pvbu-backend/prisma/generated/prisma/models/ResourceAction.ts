/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ResourceAction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model ResourceAction
 *
 */
export type ResourceActionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ResourceActionPayload>;

export type AggregateResourceAction = {
  _count: ResourceActionCountAggregateOutputType | null;
  _avg: ResourceActionAvgAggregateOutputType | null;
  _sum: ResourceActionSumAggregateOutputType | null;
  _min: ResourceActionMinAggregateOutputType | null;
  _max: ResourceActionMaxAggregateOutputType | null;
};

export type ResourceActionAvgAggregateOutputType = {
  id: number | null;
  resourceId: number | null;
};

export type ResourceActionSumAggregateOutputType = {
  id: number | null;
  resourceId: number | null;
};

export type ResourceActionMinAggregateOutputType = {
  id: number | null;
  name: string | null;
  resourceId: number | null;
};

export type ResourceActionMaxAggregateOutputType = {
  id: number | null;
  name: string | null;
  resourceId: number | null;
};

export type ResourceActionCountAggregateOutputType = {
  id: number;
  name: number;
  resourceId: number;
  _all: number;
};

export type ResourceActionAvgAggregateInputType = {
  id?: true;
  resourceId?: true;
};

export type ResourceActionSumAggregateInputType = {
  id?: true;
  resourceId?: true;
};

export type ResourceActionMinAggregateInputType = {
  id?: true;
  name?: true;
  resourceId?: true;
};

export type ResourceActionMaxAggregateInputType = {
  id?: true;
  name?: true;
  resourceId?: true;
};

export type ResourceActionCountAggregateInputType = {
  id?: true;
  name?: true;
  resourceId?: true;
  _all?: true;
};

export type ResourceActionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ResourceAction to aggregate.
   */
  where?: Prisma.ResourceActionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ResourceActions to fetch.
   */
  orderBy?:
    | Prisma.ResourceActionOrderByWithRelationInput
    | Prisma.ResourceActionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ResourceActionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ResourceActions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ResourceActions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ResourceActions
   **/
  _count?: true | ResourceActionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ResourceActionAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ResourceActionSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ResourceActionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ResourceActionMaxAggregateInputType;
};

export type GetResourceActionAggregateType<
  T extends ResourceActionAggregateArgs,
> = {
  [P in keyof T & keyof AggregateResourceAction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateResourceAction[P]>
    : Prisma.GetScalarType<T[P], AggregateResourceAction[P]>;
};

export type ResourceActionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ResourceActionWhereInput;
  orderBy?:
    | Prisma.ResourceActionOrderByWithAggregationInput
    | Prisma.ResourceActionOrderByWithAggregationInput[];
  by:
    | Prisma.ResourceActionScalarFieldEnum[]
    | Prisma.ResourceActionScalarFieldEnum;
  having?: Prisma.ResourceActionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ResourceActionCountAggregateInputType | true;
  _avg?: ResourceActionAvgAggregateInputType;
  _sum?: ResourceActionSumAggregateInputType;
  _min?: ResourceActionMinAggregateInputType;
  _max?: ResourceActionMaxAggregateInputType;
};

export type ResourceActionGroupByOutputType = {
  id: number;
  name: string;
  resourceId: number;
  _count: ResourceActionCountAggregateOutputType | null;
  _avg: ResourceActionAvgAggregateOutputType | null;
  _sum: ResourceActionSumAggregateOutputType | null;
  _min: ResourceActionMinAggregateOutputType | null;
  _max: ResourceActionMaxAggregateOutputType | null;
};

type GetResourceActionGroupByPayload<T extends ResourceActionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ResourceActionGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof ResourceActionGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ResourceActionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ResourceActionGroupByOutputType[P]>;
      }
    >
  >;

export type ResourceActionWhereInput = {
  AND?: Prisma.ResourceActionWhereInput | Prisma.ResourceActionWhereInput[];
  OR?: Prisma.ResourceActionWhereInput[];
  NOT?: Prisma.ResourceActionWhereInput | Prisma.ResourceActionWhereInput[];
  id?: Prisma.IntFilter<'ResourceAction'> | number;
  name?: Prisma.StringFilter<'ResourceAction'> | string;
  resourceId?: Prisma.IntFilter<'ResourceAction'> | number;
  resource?: Prisma.XOR<
    Prisma.ResourceScalarRelationFilter,
    Prisma.ResourceWhereInput
  >;
  accessRules?: Prisma.AccessRulesListRelationFilter;
  actionCondition?: Prisma.ActionConditionListRelationFilter;
};

export type ResourceActionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  resourceId?: Prisma.SortOrder;
  resource?: Prisma.ResourceOrderByWithRelationInput;
  accessRules?: Prisma.AccessRulesOrderByRelationAggregateInput;
  actionCondition?: Prisma.ActionConditionOrderByRelationAggregateInput;
};

export type ResourceActionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    name_resourceId?: Prisma.ResourceActionNameResourceIdCompoundUniqueInput;
    AND?: Prisma.ResourceActionWhereInput | Prisma.ResourceActionWhereInput[];
    OR?: Prisma.ResourceActionWhereInput[];
    NOT?: Prisma.ResourceActionWhereInput | Prisma.ResourceActionWhereInput[];
    name?: Prisma.StringFilter<'ResourceAction'> | string;
    resourceId?: Prisma.IntFilter<'ResourceAction'> | number;
    resource?: Prisma.XOR<
      Prisma.ResourceScalarRelationFilter,
      Prisma.ResourceWhereInput
    >;
    accessRules?: Prisma.AccessRulesListRelationFilter;
    actionCondition?: Prisma.ActionConditionListRelationFilter;
  },
  'id' | 'name_resourceId'
>;

export type ResourceActionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  resourceId?: Prisma.SortOrder;
  _count?: Prisma.ResourceActionCountOrderByAggregateInput;
  _avg?: Prisma.ResourceActionAvgOrderByAggregateInput;
  _max?: Prisma.ResourceActionMaxOrderByAggregateInput;
  _min?: Prisma.ResourceActionMinOrderByAggregateInput;
  _sum?: Prisma.ResourceActionSumOrderByAggregateInput;
};

export type ResourceActionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ResourceActionScalarWhereWithAggregatesInput
    | Prisma.ResourceActionScalarWhereWithAggregatesInput[];
  OR?: Prisma.ResourceActionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ResourceActionScalarWhereWithAggregatesInput
    | Prisma.ResourceActionScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'ResourceAction'> | number;
  name?: Prisma.StringWithAggregatesFilter<'ResourceAction'> | string;
  resourceId?: Prisma.IntWithAggregatesFilter<'ResourceAction'> | number;
};

export type ResourceActionCreateInput = {
  name: string;
  resource: Prisma.ResourceCreateNestedOneWithoutActionsInput;
  accessRules?: Prisma.AccessRulesCreateNestedManyWithoutResourceActionInput;
  actionCondition?: Prisma.ActionConditionCreateNestedManyWithoutResourceActionInput;
};

export type ResourceActionUncheckedCreateInput = {
  id?: number;
  name: string;
  resourceId: number;
  accessRules?: Prisma.AccessRulesUncheckedCreateNestedManyWithoutResourceActionInput;
  actionCondition?: Prisma.ActionConditionUncheckedCreateNestedManyWithoutResourceActionInput;
};

export type ResourceActionUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  resource?: Prisma.ResourceUpdateOneRequiredWithoutActionsNestedInput;
  accessRules?: Prisma.AccessRulesUpdateManyWithoutResourceActionNestedInput;
  actionCondition?: Prisma.ActionConditionUpdateManyWithoutResourceActionNestedInput;
};

export type ResourceActionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  resourceId?: Prisma.IntFieldUpdateOperationsInput | number;
  accessRules?: Prisma.AccessRulesUncheckedUpdateManyWithoutResourceActionNestedInput;
  actionCondition?: Prisma.ActionConditionUncheckedUpdateManyWithoutResourceActionNestedInput;
};

export type ResourceActionCreateManyInput = {
  id?: number;
  name: string;
  resourceId: number;
};

export type ResourceActionUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ResourceActionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  resourceId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ResourceActionScalarRelationFilter = {
  is?: Prisma.ResourceActionWhereInput;
  isNot?: Prisma.ResourceActionWhereInput;
};

export type ResourceActionListRelationFilter = {
  every?: Prisma.ResourceActionWhereInput;
  some?: Prisma.ResourceActionWhereInput;
  none?: Prisma.ResourceActionWhereInput;
};

export type ResourceActionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ResourceActionNameResourceIdCompoundUniqueInput = {
  name: string;
  resourceId: number;
};

export type ResourceActionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  resourceId?: Prisma.SortOrder;
};

export type ResourceActionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  resourceId?: Prisma.SortOrder;
};

export type ResourceActionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  resourceId?: Prisma.SortOrder;
};

export type ResourceActionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  resourceId?: Prisma.SortOrder;
};

export type ResourceActionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  resourceId?: Prisma.SortOrder;
};

export type ResourceActionCreateNestedOneWithoutAccessRulesInput = {
  create?: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutAccessRulesInput,
    Prisma.ResourceActionUncheckedCreateWithoutAccessRulesInput
  >;
  connectOrCreate?: Prisma.ResourceActionCreateOrConnectWithoutAccessRulesInput;
  connect?: Prisma.ResourceActionWhereUniqueInput;
};

export type ResourceActionUpdateOneRequiredWithoutAccessRulesNestedInput = {
  create?: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutAccessRulesInput,
    Prisma.ResourceActionUncheckedCreateWithoutAccessRulesInput
  >;
  connectOrCreate?: Prisma.ResourceActionCreateOrConnectWithoutAccessRulesInput;
  upsert?: Prisma.ResourceActionUpsertWithoutAccessRulesInput;
  connect?: Prisma.ResourceActionWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ResourceActionUpdateToOneWithWhereWithoutAccessRulesInput,
      Prisma.ResourceActionUpdateWithoutAccessRulesInput
    >,
    Prisma.ResourceActionUncheckedUpdateWithoutAccessRulesInput
  >;
};

export type ResourceActionCreateNestedManyWithoutResourceInput = {
  create?:
    | Prisma.XOR<
        Prisma.ResourceActionCreateWithoutResourceInput,
        Prisma.ResourceActionUncheckedCreateWithoutResourceInput
      >
    | Prisma.ResourceActionCreateWithoutResourceInput[]
    | Prisma.ResourceActionUncheckedCreateWithoutResourceInput[];
  connectOrCreate?:
    | Prisma.ResourceActionCreateOrConnectWithoutResourceInput
    | Prisma.ResourceActionCreateOrConnectWithoutResourceInput[];
  createMany?: Prisma.ResourceActionCreateManyResourceInputEnvelope;
  connect?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
};

export type ResourceActionUncheckedCreateNestedManyWithoutResourceInput = {
  create?:
    | Prisma.XOR<
        Prisma.ResourceActionCreateWithoutResourceInput,
        Prisma.ResourceActionUncheckedCreateWithoutResourceInput
      >
    | Prisma.ResourceActionCreateWithoutResourceInput[]
    | Prisma.ResourceActionUncheckedCreateWithoutResourceInput[];
  connectOrCreate?:
    | Prisma.ResourceActionCreateOrConnectWithoutResourceInput
    | Prisma.ResourceActionCreateOrConnectWithoutResourceInput[];
  createMany?: Prisma.ResourceActionCreateManyResourceInputEnvelope;
  connect?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
};

export type ResourceActionUpdateManyWithoutResourceNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ResourceActionCreateWithoutResourceInput,
        Prisma.ResourceActionUncheckedCreateWithoutResourceInput
      >
    | Prisma.ResourceActionCreateWithoutResourceInput[]
    | Prisma.ResourceActionUncheckedCreateWithoutResourceInput[];
  connectOrCreate?:
    | Prisma.ResourceActionCreateOrConnectWithoutResourceInput
    | Prisma.ResourceActionCreateOrConnectWithoutResourceInput[];
  upsert?:
    | Prisma.ResourceActionUpsertWithWhereUniqueWithoutResourceInput
    | Prisma.ResourceActionUpsertWithWhereUniqueWithoutResourceInput[];
  createMany?: Prisma.ResourceActionCreateManyResourceInputEnvelope;
  set?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
  disconnect?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
  delete?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
  connect?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
  update?:
    | Prisma.ResourceActionUpdateWithWhereUniqueWithoutResourceInput
    | Prisma.ResourceActionUpdateWithWhereUniqueWithoutResourceInput[];
  updateMany?:
    | Prisma.ResourceActionUpdateManyWithWhereWithoutResourceInput
    | Prisma.ResourceActionUpdateManyWithWhereWithoutResourceInput[];
  deleteMany?:
    | Prisma.ResourceActionScalarWhereInput
    | Prisma.ResourceActionScalarWhereInput[];
};

export type ResourceActionUncheckedUpdateManyWithoutResourceNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ResourceActionCreateWithoutResourceInput,
        Prisma.ResourceActionUncheckedCreateWithoutResourceInput
      >
    | Prisma.ResourceActionCreateWithoutResourceInput[]
    | Prisma.ResourceActionUncheckedCreateWithoutResourceInput[];
  connectOrCreate?:
    | Prisma.ResourceActionCreateOrConnectWithoutResourceInput
    | Prisma.ResourceActionCreateOrConnectWithoutResourceInput[];
  upsert?:
    | Prisma.ResourceActionUpsertWithWhereUniqueWithoutResourceInput
    | Prisma.ResourceActionUpsertWithWhereUniqueWithoutResourceInput[];
  createMany?: Prisma.ResourceActionCreateManyResourceInputEnvelope;
  set?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
  disconnect?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
  delete?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
  connect?:
    | Prisma.ResourceActionWhereUniqueInput
    | Prisma.ResourceActionWhereUniqueInput[];
  update?:
    | Prisma.ResourceActionUpdateWithWhereUniqueWithoutResourceInput
    | Prisma.ResourceActionUpdateWithWhereUniqueWithoutResourceInput[];
  updateMany?:
    | Prisma.ResourceActionUpdateManyWithWhereWithoutResourceInput
    | Prisma.ResourceActionUpdateManyWithWhereWithoutResourceInput[];
  deleteMany?:
    | Prisma.ResourceActionScalarWhereInput
    | Prisma.ResourceActionScalarWhereInput[];
};

export type ResourceActionCreateNestedOneWithoutActionConditionInput = {
  create?: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutActionConditionInput,
    Prisma.ResourceActionUncheckedCreateWithoutActionConditionInput
  >;
  connectOrCreate?: Prisma.ResourceActionCreateOrConnectWithoutActionConditionInput;
  connect?: Prisma.ResourceActionWhereUniqueInput;
};

export type ResourceActionUpdateOneRequiredWithoutActionConditionNestedInput = {
  create?: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutActionConditionInput,
    Prisma.ResourceActionUncheckedCreateWithoutActionConditionInput
  >;
  connectOrCreate?: Prisma.ResourceActionCreateOrConnectWithoutActionConditionInput;
  upsert?: Prisma.ResourceActionUpsertWithoutActionConditionInput;
  connect?: Prisma.ResourceActionWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ResourceActionUpdateToOneWithWhereWithoutActionConditionInput,
      Prisma.ResourceActionUpdateWithoutActionConditionInput
    >,
    Prisma.ResourceActionUncheckedUpdateWithoutActionConditionInput
  >;
};

export type ResourceActionCreateWithoutAccessRulesInput = {
  name: string;
  resource: Prisma.ResourceCreateNestedOneWithoutActionsInput;
  actionCondition?: Prisma.ActionConditionCreateNestedManyWithoutResourceActionInput;
};

export type ResourceActionUncheckedCreateWithoutAccessRulesInput = {
  id?: number;
  name: string;
  resourceId: number;
  actionCondition?: Prisma.ActionConditionUncheckedCreateNestedManyWithoutResourceActionInput;
};

export type ResourceActionCreateOrConnectWithoutAccessRulesInput = {
  where: Prisma.ResourceActionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutAccessRulesInput,
    Prisma.ResourceActionUncheckedCreateWithoutAccessRulesInput
  >;
};

export type ResourceActionUpsertWithoutAccessRulesInput = {
  update: Prisma.XOR<
    Prisma.ResourceActionUpdateWithoutAccessRulesInput,
    Prisma.ResourceActionUncheckedUpdateWithoutAccessRulesInput
  >;
  create: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutAccessRulesInput,
    Prisma.ResourceActionUncheckedCreateWithoutAccessRulesInput
  >;
  where?: Prisma.ResourceActionWhereInput;
};

export type ResourceActionUpdateToOneWithWhereWithoutAccessRulesInput = {
  where?: Prisma.ResourceActionWhereInput;
  data: Prisma.XOR<
    Prisma.ResourceActionUpdateWithoutAccessRulesInput,
    Prisma.ResourceActionUncheckedUpdateWithoutAccessRulesInput
  >;
};

export type ResourceActionUpdateWithoutAccessRulesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  resource?: Prisma.ResourceUpdateOneRequiredWithoutActionsNestedInput;
  actionCondition?: Prisma.ActionConditionUpdateManyWithoutResourceActionNestedInput;
};

export type ResourceActionUncheckedUpdateWithoutAccessRulesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  resourceId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionCondition?: Prisma.ActionConditionUncheckedUpdateManyWithoutResourceActionNestedInput;
};

export type ResourceActionCreateWithoutResourceInput = {
  name: string;
  accessRules?: Prisma.AccessRulesCreateNestedManyWithoutResourceActionInput;
  actionCondition?: Prisma.ActionConditionCreateNestedManyWithoutResourceActionInput;
};

export type ResourceActionUncheckedCreateWithoutResourceInput = {
  id?: number;
  name: string;
  accessRules?: Prisma.AccessRulesUncheckedCreateNestedManyWithoutResourceActionInput;
  actionCondition?: Prisma.ActionConditionUncheckedCreateNestedManyWithoutResourceActionInput;
};

export type ResourceActionCreateOrConnectWithoutResourceInput = {
  where: Prisma.ResourceActionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutResourceInput,
    Prisma.ResourceActionUncheckedCreateWithoutResourceInput
  >;
};

export type ResourceActionCreateManyResourceInputEnvelope = {
  data:
    | Prisma.ResourceActionCreateManyResourceInput
    | Prisma.ResourceActionCreateManyResourceInput[];
  skipDuplicates?: boolean;
};

export type ResourceActionUpsertWithWhereUniqueWithoutResourceInput = {
  where: Prisma.ResourceActionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ResourceActionUpdateWithoutResourceInput,
    Prisma.ResourceActionUncheckedUpdateWithoutResourceInput
  >;
  create: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutResourceInput,
    Prisma.ResourceActionUncheckedCreateWithoutResourceInput
  >;
};

export type ResourceActionUpdateWithWhereUniqueWithoutResourceInput = {
  where: Prisma.ResourceActionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ResourceActionUpdateWithoutResourceInput,
    Prisma.ResourceActionUncheckedUpdateWithoutResourceInput
  >;
};

export type ResourceActionUpdateManyWithWhereWithoutResourceInput = {
  where: Prisma.ResourceActionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ResourceActionUpdateManyMutationInput,
    Prisma.ResourceActionUncheckedUpdateManyWithoutResourceInput
  >;
};

export type ResourceActionScalarWhereInput = {
  AND?:
    | Prisma.ResourceActionScalarWhereInput
    | Prisma.ResourceActionScalarWhereInput[];
  OR?: Prisma.ResourceActionScalarWhereInput[];
  NOT?:
    | Prisma.ResourceActionScalarWhereInput
    | Prisma.ResourceActionScalarWhereInput[];
  id?: Prisma.IntFilter<'ResourceAction'> | number;
  name?: Prisma.StringFilter<'ResourceAction'> | string;
  resourceId?: Prisma.IntFilter<'ResourceAction'> | number;
};

export type ResourceActionCreateWithoutActionConditionInput = {
  name: string;
  resource: Prisma.ResourceCreateNestedOneWithoutActionsInput;
  accessRules?: Prisma.AccessRulesCreateNestedManyWithoutResourceActionInput;
};

export type ResourceActionUncheckedCreateWithoutActionConditionInput = {
  id?: number;
  name: string;
  resourceId: number;
  accessRules?: Prisma.AccessRulesUncheckedCreateNestedManyWithoutResourceActionInput;
};

export type ResourceActionCreateOrConnectWithoutActionConditionInput = {
  where: Prisma.ResourceActionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutActionConditionInput,
    Prisma.ResourceActionUncheckedCreateWithoutActionConditionInput
  >;
};

export type ResourceActionUpsertWithoutActionConditionInput = {
  update: Prisma.XOR<
    Prisma.ResourceActionUpdateWithoutActionConditionInput,
    Prisma.ResourceActionUncheckedUpdateWithoutActionConditionInput
  >;
  create: Prisma.XOR<
    Prisma.ResourceActionCreateWithoutActionConditionInput,
    Prisma.ResourceActionUncheckedCreateWithoutActionConditionInput
  >;
  where?: Prisma.ResourceActionWhereInput;
};

export type ResourceActionUpdateToOneWithWhereWithoutActionConditionInput = {
  where?: Prisma.ResourceActionWhereInput;
  data: Prisma.XOR<
    Prisma.ResourceActionUpdateWithoutActionConditionInput,
    Prisma.ResourceActionUncheckedUpdateWithoutActionConditionInput
  >;
};

export type ResourceActionUpdateWithoutActionConditionInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  resource?: Prisma.ResourceUpdateOneRequiredWithoutActionsNestedInput;
  accessRules?: Prisma.AccessRulesUpdateManyWithoutResourceActionNestedInput;
};

export type ResourceActionUncheckedUpdateWithoutActionConditionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  resourceId?: Prisma.IntFieldUpdateOperationsInput | number;
  accessRules?: Prisma.AccessRulesUncheckedUpdateManyWithoutResourceActionNestedInput;
};

export type ResourceActionCreateManyResourceInput = {
  id?: number;
  name: string;
};

export type ResourceActionUpdateWithoutResourceInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  accessRules?: Prisma.AccessRulesUpdateManyWithoutResourceActionNestedInput;
  actionCondition?: Prisma.ActionConditionUpdateManyWithoutResourceActionNestedInput;
};

export type ResourceActionUncheckedUpdateWithoutResourceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  accessRules?: Prisma.AccessRulesUncheckedUpdateManyWithoutResourceActionNestedInput;
  actionCondition?: Prisma.ActionConditionUncheckedUpdateManyWithoutResourceActionNestedInput;
};

export type ResourceActionUncheckedUpdateManyWithoutResourceInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type ResourceActionCountOutputType
 */

export type ResourceActionCountOutputType = {
  accessRules: number;
  actionCondition: number;
};

export type ResourceActionCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  accessRules?: boolean | ResourceActionCountOutputTypeCountAccessRulesArgs;
  actionCondition?:
    | boolean
    | ResourceActionCountOutputTypeCountActionConditionArgs;
};

/**
 * ResourceActionCountOutputType without action
 */
export type ResourceActionCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceActionCountOutputType
   */
  select?: Prisma.ResourceActionCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ResourceActionCountOutputType without action
 */
export type ResourceActionCountOutputTypeCountAccessRulesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AccessRulesWhereInput;
};

/**
 * ResourceActionCountOutputType without action
 */
export type ResourceActionCountOutputTypeCountActionConditionArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ActionConditionWhereInput;
};

export type ResourceActionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    resourceId?: boolean;
    resource?: boolean | Prisma.ResourceDefaultArgs<ExtArgs>;
    accessRules?: boolean | Prisma.ResourceAction$accessRulesArgs<ExtArgs>;
    actionCondition?:
      | boolean
      | Prisma.ResourceAction$actionConditionArgs<ExtArgs>;
    _count?: boolean | Prisma.ResourceActionCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['resourceAction']
>;

export type ResourceActionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    resourceId?: boolean;
    resource?: boolean | Prisma.ResourceDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['resourceAction']
>;

export type ResourceActionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    resourceId?: boolean;
    resource?: boolean | Prisma.ResourceDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['resourceAction']
>;

export type ResourceActionSelectScalar = {
  id?: boolean;
  name?: boolean;
  resourceId?: boolean;
};

export type ResourceActionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'resourceId',
  ExtArgs['result']['resourceAction']
>;
export type ResourceActionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  resource?: boolean | Prisma.ResourceDefaultArgs<ExtArgs>;
  accessRules?: boolean | Prisma.ResourceAction$accessRulesArgs<ExtArgs>;
  actionCondition?:
    | boolean
    | Prisma.ResourceAction$actionConditionArgs<ExtArgs>;
  _count?: boolean | Prisma.ResourceActionCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ResourceActionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  resource?: boolean | Prisma.ResourceDefaultArgs<ExtArgs>;
};
export type ResourceActionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  resource?: boolean | Prisma.ResourceDefaultArgs<ExtArgs>;
};

export type $ResourceActionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'ResourceAction';
  objects: {
    resource: Prisma.$ResourcePayload<ExtArgs>;
    accessRules: Prisma.$AccessRulesPayload<ExtArgs>[];
    actionCondition: Prisma.$ActionConditionPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      name: string;
      resourceId: number;
    },
    ExtArgs['result']['resourceAction']
  >;
  composites: {};
};

export type ResourceActionGetPayload<
  S extends boolean | null | undefined | ResourceActionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ResourceActionPayload, S>;

export type ResourceActionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ResourceActionFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: ResourceActionCountAggregateInputType | true;
};

export interface ResourceActionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['ResourceAction'];
    meta: { name: 'ResourceAction' };
  };
  /**
   * Find zero or one ResourceAction that matches the filter.
   * @param {ResourceActionFindUniqueArgs} args - Arguments to find a ResourceAction
   * @example
   * // Get one ResourceAction
   * const resourceAction = await prisma.resourceAction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ResourceActionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ResourceActionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ResourceAction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ResourceActionFindUniqueOrThrowArgs} args - Arguments to find a ResourceAction
   * @example
   * // Get one ResourceAction
   * const resourceAction = await prisma.resourceAction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ResourceActionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ResourceActionFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ResourceAction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceActionFindFirstArgs} args - Arguments to find a ResourceAction
   * @example
   * // Get one ResourceAction
   * const resourceAction = await prisma.resourceAction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ResourceActionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ResourceActionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ResourceAction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceActionFindFirstOrThrowArgs} args - Arguments to find a ResourceAction
   * @example
   * // Get one ResourceAction
   * const resourceAction = await prisma.resourceAction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ResourceActionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ResourceActionFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ResourceActions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceActionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ResourceActions
   * const resourceActions = await prisma.resourceAction.findMany()
   *
   * // Get first 10 ResourceActions
   * const resourceActions = await prisma.resourceAction.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const resourceActionWithIdOnly = await prisma.resourceAction.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ResourceActionFindManyArgs>(
    args?: Prisma.SelectSubset<T, ResourceActionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ResourceAction.
   * @param {ResourceActionCreateArgs} args - Arguments to create a ResourceAction.
   * @example
   * // Create one ResourceAction
   * const ResourceAction = await prisma.resourceAction.create({
   *   data: {
   *     // ... data to create a ResourceAction
   *   }
   * })
   *
   */
  create<T extends ResourceActionCreateArgs>(
    args: Prisma.SelectSubset<T, ResourceActionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ResourceActions.
   * @param {ResourceActionCreateManyArgs} args - Arguments to create many ResourceActions.
   * @example
   * // Create many ResourceActions
   * const resourceAction = await prisma.resourceAction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ResourceActionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ResourceActionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ResourceActions and returns the data saved in the database.
   * @param {ResourceActionCreateManyAndReturnArgs} args - Arguments to create many ResourceActions.
   * @example
   * // Create many ResourceActions
   * const resourceAction = await prisma.resourceAction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ResourceActions and only return the `id`
   * const resourceActionWithIdOnly = await prisma.resourceAction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ResourceActionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      ResourceActionCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ResourceAction.
   * @param {ResourceActionDeleteArgs} args - Arguments to delete one ResourceAction.
   * @example
   * // Delete one ResourceAction
   * const ResourceAction = await prisma.resourceAction.delete({
   *   where: {
   *     // ... filter to delete one ResourceAction
   *   }
   * })
   *
   */
  delete<T extends ResourceActionDeleteArgs>(
    args: Prisma.SelectSubset<T, ResourceActionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ResourceAction.
   * @param {ResourceActionUpdateArgs} args - Arguments to update one ResourceAction.
   * @example
   * // Update one ResourceAction
   * const resourceAction = await prisma.resourceAction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ResourceActionUpdateArgs>(
    args: Prisma.SelectSubset<T, ResourceActionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ResourceActions.
   * @param {ResourceActionDeleteManyArgs} args - Arguments to filter ResourceActions to delete.
   * @example
   * // Delete a few ResourceActions
   * const { count } = await prisma.resourceAction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ResourceActionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ResourceActionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ResourceActions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceActionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ResourceActions
   * const resourceAction = await prisma.resourceAction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ResourceActionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ResourceActionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ResourceActions and returns the data updated in the database.
   * @param {ResourceActionUpdateManyAndReturnArgs} args - Arguments to update many ResourceActions.
   * @example
   * // Update many ResourceActions
   * const resourceAction = await prisma.resourceAction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ResourceActions and only return the `id`
   * const resourceActionWithIdOnly = await prisma.resourceAction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ResourceActionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      ResourceActionUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ResourceAction.
   * @param {ResourceActionUpsertArgs} args - Arguments to update or create a ResourceAction.
   * @example
   * // Update or create a ResourceAction
   * const resourceAction = await prisma.resourceAction.upsert({
   *   create: {
   *     // ... data to create a ResourceAction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ResourceAction we want to update
   *   }
   * })
   */
  upsert<T extends ResourceActionUpsertArgs>(
    args: Prisma.SelectSubset<T, ResourceActionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ResourceActionPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ResourceActions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceActionCountArgs} args - Arguments to filter ResourceActions to count.
   * @example
   * // Count the number of ResourceActions
   * const count = await prisma.resourceAction.count({
   *   where: {
   *     // ... the filter for the ResourceActions we want to count
   *   }
   * })
   **/
  count<T extends ResourceActionCountArgs>(
    args?: Prisma.Subset<T, ResourceActionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            ResourceActionCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ResourceAction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ResourceActionAggregateArgs>(
    args: Prisma.Subset<T, ResourceActionAggregateArgs>,
  ): Prisma.PrismaPromise<GetResourceActionAggregateType<T>>;

  /**
   * Group by ResourceAction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResourceActionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ResourceActionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ResourceActionGroupByArgs['orderBy'] }
      : { orderBy?: ResourceActionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ResourceActionGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetResourceActionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ResourceAction model
   */
  readonly fields: ResourceActionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ResourceAction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ResourceActionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  resource<T extends Prisma.ResourceDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ResourceDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ResourcePayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  accessRules<T extends Prisma.ResourceAction$accessRulesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ResourceAction$accessRulesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AccessRulesPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  actionCondition<
    T extends Prisma.ResourceAction$actionConditionArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.ResourceAction$actionConditionArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ActionConditionPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ResourceAction model
 */
export interface ResourceActionFieldRefs {
  readonly id: Prisma.FieldRef<'ResourceAction', 'Int'>;
  readonly name: Prisma.FieldRef<'ResourceAction', 'String'>;
  readonly resourceId: Prisma.FieldRef<'ResourceAction', 'Int'>;
}

// Custom InputTypes
/**
 * ResourceAction findUnique
 */
export type ResourceActionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  /**
   * Filter, which ResourceAction to fetch.
   */
  where: Prisma.ResourceActionWhereUniqueInput;
};

/**
 * ResourceAction findUniqueOrThrow
 */
export type ResourceActionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  /**
   * Filter, which ResourceAction to fetch.
   */
  where: Prisma.ResourceActionWhereUniqueInput;
};

/**
 * ResourceAction findFirst
 */
export type ResourceActionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  /**
   * Filter, which ResourceAction to fetch.
   */
  where?: Prisma.ResourceActionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ResourceActions to fetch.
   */
  orderBy?:
    | Prisma.ResourceActionOrderByWithRelationInput
    | Prisma.ResourceActionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ResourceActions.
   */
  cursor?: Prisma.ResourceActionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ResourceActions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ResourceActions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ResourceActions.
   */
  distinct?:
    | Prisma.ResourceActionScalarFieldEnum
    | Prisma.ResourceActionScalarFieldEnum[];
};

/**
 * ResourceAction findFirstOrThrow
 */
export type ResourceActionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  /**
   * Filter, which ResourceAction to fetch.
   */
  where?: Prisma.ResourceActionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ResourceActions to fetch.
   */
  orderBy?:
    | Prisma.ResourceActionOrderByWithRelationInput
    | Prisma.ResourceActionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ResourceActions.
   */
  cursor?: Prisma.ResourceActionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ResourceActions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ResourceActions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ResourceActions.
   */
  distinct?:
    | Prisma.ResourceActionScalarFieldEnum
    | Prisma.ResourceActionScalarFieldEnum[];
};

/**
 * ResourceAction findMany
 */
export type ResourceActionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  /**
   * Filter, which ResourceActions to fetch.
   */
  where?: Prisma.ResourceActionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ResourceActions to fetch.
   */
  orderBy?:
    | Prisma.ResourceActionOrderByWithRelationInput
    | Prisma.ResourceActionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ResourceActions.
   */
  cursor?: Prisma.ResourceActionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ResourceActions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ResourceActions.
   */
  skip?: number;
  distinct?:
    | Prisma.ResourceActionScalarFieldEnum
    | Prisma.ResourceActionScalarFieldEnum[];
};

/**
 * ResourceAction create
 */
export type ResourceActionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  /**
   * The data needed to create a ResourceAction.
   */
  data: Prisma.XOR<
    Prisma.ResourceActionCreateInput,
    Prisma.ResourceActionUncheckedCreateInput
  >;
};

/**
 * ResourceAction createMany
 */
export type ResourceActionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ResourceActions.
   */
  data:
    | Prisma.ResourceActionCreateManyInput
    | Prisma.ResourceActionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ResourceAction createManyAndReturn
 */
export type ResourceActionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * The data used to create many ResourceActions.
   */
  data:
    | Prisma.ResourceActionCreateManyInput
    | Prisma.ResourceActionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ResourceAction update
 */
export type ResourceActionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  /**
   * The data needed to update a ResourceAction.
   */
  data: Prisma.XOR<
    Prisma.ResourceActionUpdateInput,
    Prisma.ResourceActionUncheckedUpdateInput
  >;
  /**
   * Choose, which ResourceAction to update.
   */
  where: Prisma.ResourceActionWhereUniqueInput;
};

/**
 * ResourceAction updateMany
 */
export type ResourceActionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ResourceActions.
   */
  data: Prisma.XOR<
    Prisma.ResourceActionUpdateManyMutationInput,
    Prisma.ResourceActionUncheckedUpdateManyInput
  >;
  /**
   * Filter which ResourceActions to update
   */
  where?: Prisma.ResourceActionWhereInput;
  /**
   * Limit how many ResourceActions to update.
   */
  limit?: number;
};

/**
 * ResourceAction updateManyAndReturn
 */
export type ResourceActionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * The data used to update ResourceActions.
   */
  data: Prisma.XOR<
    Prisma.ResourceActionUpdateManyMutationInput,
    Prisma.ResourceActionUncheckedUpdateManyInput
  >;
  /**
   * Filter which ResourceActions to update
   */
  where?: Prisma.ResourceActionWhereInput;
  /**
   * Limit how many ResourceActions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ResourceAction upsert
 */
export type ResourceActionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  /**
   * The filter to search for the ResourceAction to update in case it exists.
   */
  where: Prisma.ResourceActionWhereUniqueInput;
  /**
   * In case the ResourceAction found by the `where` argument doesn't exist, create a new ResourceAction with this data.
   */
  create: Prisma.XOR<
    Prisma.ResourceActionCreateInput,
    Prisma.ResourceActionUncheckedCreateInput
  >;
  /**
   * In case the ResourceAction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ResourceActionUpdateInput,
    Prisma.ResourceActionUncheckedUpdateInput
  >;
};

/**
 * ResourceAction delete
 */
export type ResourceActionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
  /**
   * Filter which ResourceAction to delete.
   */
  where: Prisma.ResourceActionWhereUniqueInput;
};

/**
 * ResourceAction deleteMany
 */
export type ResourceActionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ResourceActions to delete
   */
  where?: Prisma.ResourceActionWhereInput;
  /**
   * Limit how many ResourceActions to delete.
   */
  limit?: number;
};

/**
 * ResourceAction.accessRules
 */
export type ResourceAction$accessRulesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  where?: Prisma.AccessRulesWhereInput;
  orderBy?:
    | Prisma.AccessRulesOrderByWithRelationInput
    | Prisma.AccessRulesOrderByWithRelationInput[];
  cursor?: Prisma.AccessRulesWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.AccessRulesScalarFieldEnum
    | Prisma.AccessRulesScalarFieldEnum[];
};

/**
 * ResourceAction.actionCondition
 */
export type ResourceAction$actionConditionArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  where?: Prisma.ActionConditionWhereInput;
  orderBy?:
    | Prisma.ActionConditionOrderByWithRelationInput
    | Prisma.ActionConditionOrderByWithRelationInput[];
  cursor?: Prisma.ActionConditionWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.ActionConditionScalarFieldEnum
    | Prisma.ActionConditionScalarFieldEnum[];
};

/**
 * ResourceAction without action
 */
export type ResourceActionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ResourceAction
   */
  select?: Prisma.ResourceActionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ResourceAction
   */
  omit?: Prisma.ResourceActionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResourceActionInclude<ExtArgs> | null;
};
