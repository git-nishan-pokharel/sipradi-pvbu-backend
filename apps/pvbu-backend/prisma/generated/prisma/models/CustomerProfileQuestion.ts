/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `CustomerProfileQuestion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model CustomerProfileQuestion
 *
 */
export type CustomerProfileQuestionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CustomerProfileQuestionPayload>;

export type AggregateCustomerProfileQuestion = {
  _count: CustomerProfileQuestionCountAggregateOutputType | null;
  _avg: CustomerProfileQuestionAvgAggregateOutputType | null;
  _sum: CustomerProfileQuestionSumAggregateOutputType | null;
  _min: CustomerProfileQuestionMinAggregateOutputType | null;
  _max: CustomerProfileQuestionMaxAggregateOutputType | null;
};

export type CustomerProfileQuestionAvgAggregateOutputType = {
  questionOrderIndex: number | null;
};

export type CustomerProfileQuestionSumAggregateOutputType = {
  questionOrderIndex: number | null;
};

export type CustomerProfileQuestionMinAggregateOutputType = {
  id: string | null;
  questionText: string | null;
  questionType: $Enums.ProfilingQuestionType | null;
  isRequired: boolean | null;
  questionOrderIndex: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type CustomerProfileQuestionMaxAggregateOutputType = {
  id: string | null;
  questionText: string | null;
  questionType: $Enums.ProfilingQuestionType | null;
  isRequired: boolean | null;
  questionOrderIndex: number | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type CustomerProfileQuestionCountAggregateOutputType = {
  id: number;
  questionText: number;
  questionType: number;
  isRequired: number;
  questionOrderIndex: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type CustomerProfileQuestionAvgAggregateInputType = {
  questionOrderIndex?: true;
};

export type CustomerProfileQuestionSumAggregateInputType = {
  questionOrderIndex?: true;
};

export type CustomerProfileQuestionMinAggregateInputType = {
  id?: true;
  questionText?: true;
  questionType?: true;
  isRequired?: true;
  questionOrderIndex?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type CustomerProfileQuestionMaxAggregateInputType = {
  id?: true;
  questionText?: true;
  questionType?: true;
  isRequired?: true;
  questionOrderIndex?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type CustomerProfileQuestionCountAggregateInputType = {
  id?: true;
  questionText?: true;
  questionType?: true;
  isRequired?: true;
  questionOrderIndex?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type CustomerProfileQuestionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CustomerProfileQuestion to aggregate.
   */
  where?: Prisma.CustomerProfileQuestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerProfileQuestions to fetch.
   */
  orderBy?:
    | Prisma.CustomerProfileQuestionOrderByWithRelationInput
    | Prisma.CustomerProfileQuestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CustomerProfileQuestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerProfileQuestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerProfileQuestions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CustomerProfileQuestions
   **/
  _count?: true | CustomerProfileQuestionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CustomerProfileQuestionAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CustomerProfileQuestionSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CustomerProfileQuestionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CustomerProfileQuestionMaxAggregateInputType;
};

export type GetCustomerProfileQuestionAggregateType<
  T extends CustomerProfileQuestionAggregateArgs,
> = {
  [P in keyof T & keyof AggregateCustomerProfileQuestion]: P extends
    | '_count'
    | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCustomerProfileQuestion[P]>
    : Prisma.GetScalarType<T[P], AggregateCustomerProfileQuestion[P]>;
};

export type CustomerProfileQuestionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CustomerProfileQuestionWhereInput;
  orderBy?:
    | Prisma.CustomerProfileQuestionOrderByWithAggregationInput
    | Prisma.CustomerProfileQuestionOrderByWithAggregationInput[];
  by:
    | Prisma.CustomerProfileQuestionScalarFieldEnum[]
    | Prisma.CustomerProfileQuestionScalarFieldEnum;
  having?: Prisma.CustomerProfileQuestionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CustomerProfileQuestionCountAggregateInputType | true;
  _avg?: CustomerProfileQuestionAvgAggregateInputType;
  _sum?: CustomerProfileQuestionSumAggregateInputType;
  _min?: CustomerProfileQuestionMinAggregateInputType;
  _max?: CustomerProfileQuestionMaxAggregateInputType;
};

export type CustomerProfileQuestionGroupByOutputType = {
  id: string;
  questionText: string;
  questionType: $Enums.ProfilingQuestionType;
  isRequired: boolean;
  questionOrderIndex: number;
  createdAt: Date;
  updatedAt: Date;
  _count: CustomerProfileQuestionCountAggregateOutputType | null;
  _avg: CustomerProfileQuestionAvgAggregateOutputType | null;
  _sum: CustomerProfileQuestionSumAggregateOutputType | null;
  _min: CustomerProfileQuestionMinAggregateOutputType | null;
  _max: CustomerProfileQuestionMaxAggregateOutputType | null;
};

type GetCustomerProfileQuestionGroupByPayload<
  T extends CustomerProfileQuestionGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CustomerProfileQuestionGroupByOutputType, T['by']> & {
      [P in keyof T &
        keyof CustomerProfileQuestionGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              CustomerProfileQuestionGroupByOutputType[P]
            >
        : Prisma.GetScalarType<
            T[P],
            CustomerProfileQuestionGroupByOutputType[P]
          >;
    }
  >
>;

export type CustomerProfileQuestionWhereInput = {
  AND?:
    | Prisma.CustomerProfileQuestionWhereInput
    | Prisma.CustomerProfileQuestionWhereInput[];
  OR?: Prisma.CustomerProfileQuestionWhereInput[];
  NOT?:
    | Prisma.CustomerProfileQuestionWhereInput
    | Prisma.CustomerProfileQuestionWhereInput[];
  id?: Prisma.UuidFilter<'CustomerProfileQuestion'> | string;
  questionText?: Prisma.StringFilter<'CustomerProfileQuestion'> | string;
  questionType?:
    | Prisma.EnumProfilingQuestionTypeFilter<'CustomerProfileQuestion'>
    | $Enums.ProfilingQuestionType;
  isRequired?: Prisma.BoolFilter<'CustomerProfileQuestion'> | boolean;
  questionOrderIndex?: Prisma.IntFilter<'CustomerProfileQuestion'> | number;
  createdAt?: Prisma.DateTimeFilter<'CustomerProfileQuestion'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'CustomerProfileQuestion'> | Date | string;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsListRelationFilter;
  answers?: Prisma.CustomerProfileAnswersListRelationFilter;
};

export type CustomerProfileQuestionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  questionType?: Prisma.SortOrder;
  isRequired?: Prisma.SortOrder;
  questionOrderIndex?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsOrderByRelationAggregateInput;
  answers?: Prisma.CustomerProfileAnswersOrderByRelationAggregateInput;
};

export type CustomerProfileQuestionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.CustomerProfileQuestionWhereInput
      | Prisma.CustomerProfileQuestionWhereInput[];
    OR?: Prisma.CustomerProfileQuestionWhereInput[];
    NOT?:
      | Prisma.CustomerProfileQuestionWhereInput
      | Prisma.CustomerProfileQuestionWhereInput[];
    questionText?: Prisma.StringFilter<'CustomerProfileQuestion'> | string;
    questionType?:
      | Prisma.EnumProfilingQuestionTypeFilter<'CustomerProfileQuestion'>
      | $Enums.ProfilingQuestionType;
    isRequired?: Prisma.BoolFilter<'CustomerProfileQuestion'> | boolean;
    questionOrderIndex?: Prisma.IntFilter<'CustomerProfileQuestion'> | number;
    createdAt?:
      | Prisma.DateTimeFilter<'CustomerProfileQuestion'>
      | Date
      | string;
    updatedAt?:
      | Prisma.DateTimeFilter<'CustomerProfileQuestion'>
      | Date
      | string;
    questionOptions?: Prisma.CustomerProfileQuestionOptionsListRelationFilter;
    answers?: Prisma.CustomerProfileAnswersListRelationFilter;
  },
  'id'
>;

export type CustomerProfileQuestionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  questionType?: Prisma.SortOrder;
  isRequired?: Prisma.SortOrder;
  questionOrderIndex?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.CustomerProfileQuestionCountOrderByAggregateInput;
  _avg?: Prisma.CustomerProfileQuestionAvgOrderByAggregateInput;
  _max?: Prisma.CustomerProfileQuestionMaxOrderByAggregateInput;
  _min?: Prisma.CustomerProfileQuestionMinOrderByAggregateInput;
  _sum?: Prisma.CustomerProfileQuestionSumOrderByAggregateInput;
};

export type CustomerProfileQuestionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CustomerProfileQuestionScalarWhereWithAggregatesInput
    | Prisma.CustomerProfileQuestionScalarWhereWithAggregatesInput[];
  OR?: Prisma.CustomerProfileQuestionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CustomerProfileQuestionScalarWhereWithAggregatesInput
    | Prisma.CustomerProfileQuestionScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'CustomerProfileQuestion'> | string;
  questionText?:
    | Prisma.StringWithAggregatesFilter<'CustomerProfileQuestion'>
    | string;
  questionType?:
    | Prisma.EnumProfilingQuestionTypeWithAggregatesFilter<'CustomerProfileQuestion'>
    | $Enums.ProfilingQuestionType;
  isRequired?:
    | Prisma.BoolWithAggregatesFilter<'CustomerProfileQuestion'>
    | boolean;
  questionOrderIndex?:
    | Prisma.IntWithAggregatesFilter<'CustomerProfileQuestion'>
    | number;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CustomerProfileQuestion'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CustomerProfileQuestion'>
    | Date
    | string;
};

export type CustomerProfileQuestionCreateInput = {
  id?: string;
  questionText: string;
  questionType: $Enums.ProfilingQuestionType;
  isRequired?: boolean;
  questionOrderIndex: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsCreateNestedManyWithoutQuestionInput;
  answers?: Prisma.CustomerProfileAnswersCreateNestedManyWithoutQuestionInput;
};

export type CustomerProfileQuestionUncheckedCreateInput = {
  id?: string;
  questionText: string;
  questionType: $Enums.ProfilingQuestionType;
  isRequired?: boolean;
  questionOrderIndex: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsUncheckedCreateNestedManyWithoutQuestionInput;
  answers?: Prisma.CustomerProfileAnswersUncheckedCreateNestedManyWithoutQuestionInput;
};

export type CustomerProfileQuestionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionType?:
    | Prisma.EnumProfilingQuestionTypeFieldUpdateOperationsInput
    | $Enums.ProfilingQuestionType;
  isRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  questionOrderIndex?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsUpdateManyWithoutQuestionNestedInput;
  answers?: Prisma.CustomerProfileAnswersUpdateManyWithoutQuestionNestedInput;
};

export type CustomerProfileQuestionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionType?:
    | Prisma.EnumProfilingQuestionTypeFieldUpdateOperationsInput
    | $Enums.ProfilingQuestionType;
  isRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  questionOrderIndex?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsUncheckedUpdateManyWithoutQuestionNestedInput;
  answers?: Prisma.CustomerProfileAnswersUncheckedUpdateManyWithoutQuestionNestedInput;
};

export type CustomerProfileQuestionCreateManyInput = {
  id?: string;
  questionText: string;
  questionType: $Enums.ProfilingQuestionType;
  isRequired?: boolean;
  questionOrderIndex: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type CustomerProfileQuestionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionType?:
    | Prisma.EnumProfilingQuestionTypeFieldUpdateOperationsInput
    | $Enums.ProfilingQuestionType;
  isRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  questionOrderIndex?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileQuestionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionType?:
    | Prisma.EnumProfilingQuestionTypeFieldUpdateOperationsInput
    | $Enums.ProfilingQuestionType;
  isRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  questionOrderIndex?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileQuestionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  questionType?: Prisma.SortOrder;
  isRequired?: Prisma.SortOrder;
  questionOrderIndex?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CustomerProfileQuestionAvgOrderByAggregateInput = {
  questionOrderIndex?: Prisma.SortOrder;
};

export type CustomerProfileQuestionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  questionType?: Prisma.SortOrder;
  isRequired?: Prisma.SortOrder;
  questionOrderIndex?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CustomerProfileQuestionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  questionText?: Prisma.SortOrder;
  questionType?: Prisma.SortOrder;
  isRequired?: Prisma.SortOrder;
  questionOrderIndex?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CustomerProfileQuestionSumOrderByAggregateInput = {
  questionOrderIndex?: Prisma.SortOrder;
};

export type CustomerProfileQuestionScalarRelationFilter = {
  is?: Prisma.CustomerProfileQuestionWhereInput;
  isNot?: Prisma.CustomerProfileQuestionWhereInput;
};

export type EnumProfilingQuestionTypeFieldUpdateOperationsInput = {
  set?: $Enums.ProfilingQuestionType;
};

export type BoolFieldUpdateOperationsInput = {
  set?: boolean;
};

export type CustomerProfileQuestionCreateNestedOneWithoutQuestionOptionsInput =
  {
    create?: Prisma.XOR<
      Prisma.CustomerProfileQuestionCreateWithoutQuestionOptionsInput,
      Prisma.CustomerProfileQuestionUncheckedCreateWithoutQuestionOptionsInput
    >;
    connectOrCreate?: Prisma.CustomerProfileQuestionCreateOrConnectWithoutQuestionOptionsInput;
    connect?: Prisma.CustomerProfileQuestionWhereUniqueInput;
  };

export type CustomerProfileQuestionUpdateOneRequiredWithoutQuestionOptionsNestedInput =
  {
    create?: Prisma.XOR<
      Prisma.CustomerProfileQuestionCreateWithoutQuestionOptionsInput,
      Prisma.CustomerProfileQuestionUncheckedCreateWithoutQuestionOptionsInput
    >;
    connectOrCreate?: Prisma.CustomerProfileQuestionCreateOrConnectWithoutQuestionOptionsInput;
    upsert?: Prisma.CustomerProfileQuestionUpsertWithoutQuestionOptionsInput;
    connect?: Prisma.CustomerProfileQuestionWhereUniqueInput;
    update?: Prisma.XOR<
      Prisma.XOR<
        Prisma.CustomerProfileQuestionUpdateToOneWithWhereWithoutQuestionOptionsInput,
        Prisma.CustomerProfileQuestionUpdateWithoutQuestionOptionsInput
      >,
      Prisma.CustomerProfileQuestionUncheckedUpdateWithoutQuestionOptionsInput
    >;
  };

export type CustomerProfileQuestionCreateNestedOneWithoutAnswersInput = {
  create?: Prisma.XOR<
    Prisma.CustomerProfileQuestionCreateWithoutAnswersInput,
    Prisma.CustomerProfileQuestionUncheckedCreateWithoutAnswersInput
  >;
  connectOrCreate?: Prisma.CustomerProfileQuestionCreateOrConnectWithoutAnswersInput;
  connect?: Prisma.CustomerProfileQuestionWhereUniqueInput;
};

export type CustomerProfileQuestionUpdateOneRequiredWithoutAnswersNestedInput =
  {
    create?: Prisma.XOR<
      Prisma.CustomerProfileQuestionCreateWithoutAnswersInput,
      Prisma.CustomerProfileQuestionUncheckedCreateWithoutAnswersInput
    >;
    connectOrCreate?: Prisma.CustomerProfileQuestionCreateOrConnectWithoutAnswersInput;
    upsert?: Prisma.CustomerProfileQuestionUpsertWithoutAnswersInput;
    connect?: Prisma.CustomerProfileQuestionWhereUniqueInput;
    update?: Prisma.XOR<
      Prisma.XOR<
        Prisma.CustomerProfileQuestionUpdateToOneWithWhereWithoutAnswersInput,
        Prisma.CustomerProfileQuestionUpdateWithoutAnswersInput
      >,
      Prisma.CustomerProfileQuestionUncheckedUpdateWithoutAnswersInput
    >;
  };

export type CustomerProfileQuestionCreateWithoutQuestionOptionsInput = {
  id?: string;
  questionText: string;
  questionType: $Enums.ProfilingQuestionType;
  isRequired?: boolean;
  questionOrderIndex: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  answers?: Prisma.CustomerProfileAnswersCreateNestedManyWithoutQuestionInput;
};

export type CustomerProfileQuestionUncheckedCreateWithoutQuestionOptionsInput =
  {
    id?: string;
    questionText: string;
    questionType: $Enums.ProfilingQuestionType;
    isRequired?: boolean;
    questionOrderIndex: number;
    createdAt?: Date | string;
    updatedAt?: Date | string;
    answers?: Prisma.CustomerProfileAnswersUncheckedCreateNestedManyWithoutQuestionInput;
  };

export type CustomerProfileQuestionCreateOrConnectWithoutQuestionOptionsInput =
  {
    where: Prisma.CustomerProfileQuestionWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.CustomerProfileQuestionCreateWithoutQuestionOptionsInput,
      Prisma.CustomerProfileQuestionUncheckedCreateWithoutQuestionOptionsInput
    >;
  };

export type CustomerProfileQuestionUpsertWithoutQuestionOptionsInput = {
  update: Prisma.XOR<
    Prisma.CustomerProfileQuestionUpdateWithoutQuestionOptionsInput,
    Prisma.CustomerProfileQuestionUncheckedUpdateWithoutQuestionOptionsInput
  >;
  create: Prisma.XOR<
    Prisma.CustomerProfileQuestionCreateWithoutQuestionOptionsInput,
    Prisma.CustomerProfileQuestionUncheckedCreateWithoutQuestionOptionsInput
  >;
  where?: Prisma.CustomerProfileQuestionWhereInput;
};

export type CustomerProfileQuestionUpdateToOneWithWhereWithoutQuestionOptionsInput =
  {
    where?: Prisma.CustomerProfileQuestionWhereInput;
    data: Prisma.XOR<
      Prisma.CustomerProfileQuestionUpdateWithoutQuestionOptionsInput,
      Prisma.CustomerProfileQuestionUncheckedUpdateWithoutQuestionOptionsInput
    >;
  };

export type CustomerProfileQuestionUpdateWithoutQuestionOptionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionType?:
    | Prisma.EnumProfilingQuestionTypeFieldUpdateOperationsInput
    | $Enums.ProfilingQuestionType;
  isRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  questionOrderIndex?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  answers?: Prisma.CustomerProfileAnswersUpdateManyWithoutQuestionNestedInput;
};

export type CustomerProfileQuestionUncheckedUpdateWithoutQuestionOptionsInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    questionText?: Prisma.StringFieldUpdateOperationsInput | string;
    questionType?:
      | Prisma.EnumProfilingQuestionTypeFieldUpdateOperationsInput
      | $Enums.ProfilingQuestionType;
    isRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean;
    questionOrderIndex?: Prisma.IntFieldUpdateOperationsInput | number;
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    answers?: Prisma.CustomerProfileAnswersUncheckedUpdateManyWithoutQuestionNestedInput;
  };

export type CustomerProfileQuestionCreateWithoutAnswersInput = {
  id?: string;
  questionText: string;
  questionType: $Enums.ProfilingQuestionType;
  isRequired?: boolean;
  questionOrderIndex: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsCreateNestedManyWithoutQuestionInput;
};

export type CustomerProfileQuestionUncheckedCreateWithoutAnswersInput = {
  id?: string;
  questionText: string;
  questionType: $Enums.ProfilingQuestionType;
  isRequired?: boolean;
  questionOrderIndex: number;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsUncheckedCreateNestedManyWithoutQuestionInput;
};

export type CustomerProfileQuestionCreateOrConnectWithoutAnswersInput = {
  where: Prisma.CustomerProfileQuestionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CustomerProfileQuestionCreateWithoutAnswersInput,
    Prisma.CustomerProfileQuestionUncheckedCreateWithoutAnswersInput
  >;
};

export type CustomerProfileQuestionUpsertWithoutAnswersInput = {
  update: Prisma.XOR<
    Prisma.CustomerProfileQuestionUpdateWithoutAnswersInput,
    Prisma.CustomerProfileQuestionUncheckedUpdateWithoutAnswersInput
  >;
  create: Prisma.XOR<
    Prisma.CustomerProfileQuestionCreateWithoutAnswersInput,
    Prisma.CustomerProfileQuestionUncheckedCreateWithoutAnswersInput
  >;
  where?: Prisma.CustomerProfileQuestionWhereInput;
};

export type CustomerProfileQuestionUpdateToOneWithWhereWithoutAnswersInput = {
  where?: Prisma.CustomerProfileQuestionWhereInput;
  data: Prisma.XOR<
    Prisma.CustomerProfileQuestionUpdateWithoutAnswersInput,
    Prisma.CustomerProfileQuestionUncheckedUpdateWithoutAnswersInput
  >;
};

export type CustomerProfileQuestionUpdateWithoutAnswersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionType?:
    | Prisma.EnumProfilingQuestionTypeFieldUpdateOperationsInput
    | $Enums.ProfilingQuestionType;
  isRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  questionOrderIndex?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsUpdateManyWithoutQuestionNestedInput;
};

export type CustomerProfileQuestionUncheckedUpdateWithoutAnswersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  questionText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionType?:
    | Prisma.EnumProfilingQuestionTypeFieldUpdateOperationsInput
    | $Enums.ProfilingQuestionType;
  isRequired?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  questionOrderIndex?: Prisma.IntFieldUpdateOperationsInput | number;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  questionOptions?: Prisma.CustomerProfileQuestionOptionsUncheckedUpdateManyWithoutQuestionNestedInput;
};

/**
 * Count Type CustomerProfileQuestionCountOutputType
 */

export type CustomerProfileQuestionCountOutputType = {
  questionOptions: number;
  answers: number;
};

export type CustomerProfileQuestionCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  questionOptions?:
    | boolean
    | CustomerProfileQuestionCountOutputTypeCountQuestionOptionsArgs;
  answers?: boolean | CustomerProfileQuestionCountOutputTypeCountAnswersArgs;
};

/**
 * CustomerProfileQuestionCountOutputType without action
 */
export type CustomerProfileQuestionCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestionCountOutputType
   */
  select?: Prisma.CustomerProfileQuestionCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * CustomerProfileQuestionCountOutputType without action
 */
export type CustomerProfileQuestionCountOutputTypeCountQuestionOptionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CustomerProfileQuestionOptionsWhereInput;
};

/**
 * CustomerProfileQuestionCountOutputType without action
 */
export type CustomerProfileQuestionCountOutputTypeCountAnswersArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CustomerProfileAnswersWhereInput;
};

export type CustomerProfileQuestionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    questionText?: boolean;
    questionType?: boolean;
    isRequired?: boolean;
    questionOrderIndex?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    questionOptions?:
      | boolean
      | Prisma.CustomerProfileQuestion$questionOptionsArgs<ExtArgs>;
    answers?: boolean | Prisma.CustomerProfileQuestion$answersArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.CustomerProfileQuestionCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['customerProfileQuestion']
>;

export type CustomerProfileQuestionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    questionText?: boolean;
    questionType?: boolean;
    isRequired?: boolean;
    questionOrderIndex?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['customerProfileQuestion']
>;

export type CustomerProfileQuestionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    questionText?: boolean;
    questionType?: boolean;
    isRequired?: boolean;
    questionOrderIndex?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['customerProfileQuestion']
>;

export type CustomerProfileQuestionSelectScalar = {
  id?: boolean;
  questionText?: boolean;
  questionType?: boolean;
  isRequired?: boolean;
  questionOrderIndex?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type CustomerProfileQuestionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'questionText'
  | 'questionType'
  | 'isRequired'
  | 'questionOrderIndex'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['customerProfileQuestion']
>;
export type CustomerProfileQuestionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  questionOptions?:
    | boolean
    | Prisma.CustomerProfileQuestion$questionOptionsArgs<ExtArgs>;
  answers?: boolean | Prisma.CustomerProfileQuestion$answersArgs<ExtArgs>;
  _count?:
    | boolean
    | Prisma.CustomerProfileQuestionCountOutputTypeDefaultArgs<ExtArgs>;
};
export type CustomerProfileQuestionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type CustomerProfileQuestionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $CustomerProfileQuestionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'CustomerProfileQuestion';
  objects: {
    questionOptions: Prisma.$CustomerProfileQuestionOptionsPayload<ExtArgs>[];
    answers: Prisma.$CustomerProfileAnswersPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      questionText: string;
      questionType: $Enums.ProfilingQuestionType;
      isRequired: boolean;
      questionOrderIndex: number;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['customerProfileQuestion']
  >;
  composites: {};
};

export type CustomerProfileQuestionGetPayload<
  S extends boolean | null | undefined | CustomerProfileQuestionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CustomerProfileQuestionPayload, S>;

export type CustomerProfileQuestionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  CustomerProfileQuestionFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: CustomerProfileQuestionCountAggregateInputType | true;
};

export interface CustomerProfileQuestionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['CustomerProfileQuestion'];
    meta: { name: 'CustomerProfileQuestion' };
  };
  /**
   * Find zero or one CustomerProfileQuestion that matches the filter.
   * @param {CustomerProfileQuestionFindUniqueArgs} args - Arguments to find a CustomerProfileQuestion
   * @example
   * // Get one CustomerProfileQuestion
   * const customerProfileQuestion = await prisma.customerProfileQuestion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CustomerProfileQuestionFindUniqueArgs>(
    args: Prisma.SelectSubset<
      T,
      CustomerProfileQuestionFindUniqueArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerProfileQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CustomerProfileQuestion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CustomerProfileQuestionFindUniqueOrThrowArgs} args - Arguments to find a CustomerProfileQuestion
   * @example
   * // Get one CustomerProfileQuestion
   * const customerProfileQuestion = await prisma.customerProfileQuestion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CustomerProfileQuestionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      CustomerProfileQuestionFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerProfileQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CustomerProfileQuestion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileQuestionFindFirstArgs} args - Arguments to find a CustomerProfileQuestion
   * @example
   * // Get one CustomerProfileQuestion
   * const customerProfileQuestion = await prisma.customerProfileQuestion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CustomerProfileQuestionFindFirstArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerProfileQuestionFindFirstArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerProfileQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CustomerProfileQuestion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileQuestionFindFirstOrThrowArgs} args - Arguments to find a CustomerProfileQuestion
   * @example
   * // Get one CustomerProfileQuestion
   * const customerProfileQuestion = await prisma.customerProfileQuestion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CustomerProfileQuestionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerProfileQuestionFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerProfileQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CustomerProfileQuestions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CustomerProfileQuestions
   * const customerProfileQuestions = await prisma.customerProfileQuestion.findMany()
   *
   * // Get first 10 CustomerProfileQuestions
   * const customerProfileQuestions = await prisma.customerProfileQuestion.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const customerProfileQuestionWithIdOnly = await prisma.customerProfileQuestion.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CustomerProfileQuestionFindManyArgs>(
    args?: Prisma.SelectSubset<T, CustomerProfileQuestionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a CustomerProfileQuestion.
   * @param {CustomerProfileQuestionCreateArgs} args - Arguments to create a CustomerProfileQuestion.
   * @example
   * // Create one CustomerProfileQuestion
   * const CustomerProfileQuestion = await prisma.customerProfileQuestion.create({
   *   data: {
   *     // ... data to create a CustomerProfileQuestion
   *   }
   * })
   *
   */
  create<T extends CustomerProfileQuestionCreateArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileQuestionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CustomerProfileQuestions.
   * @param {CustomerProfileQuestionCreateManyArgs} args - Arguments to create many CustomerProfileQuestions.
   * @example
   * // Create many CustomerProfileQuestions
   * const customerProfileQuestion = await prisma.customerProfileQuestion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CustomerProfileQuestionCreateManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerProfileQuestionCreateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CustomerProfileQuestions and returns the data saved in the database.
   * @param {CustomerProfileQuestionCreateManyAndReturnArgs} args - Arguments to create many CustomerProfileQuestions.
   * @example
   * // Create many CustomerProfileQuestions
   * const customerProfileQuestion = await prisma.customerProfileQuestion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CustomerProfileQuestions and only return the `id`
   * const customerProfileQuestionWithIdOnly = await prisma.customerProfileQuestion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CustomerProfileQuestionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerProfileQuestionCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CustomerProfileQuestion.
   * @param {CustomerProfileQuestionDeleteArgs} args - Arguments to delete one CustomerProfileQuestion.
   * @example
   * // Delete one CustomerProfileQuestion
   * const CustomerProfileQuestion = await prisma.customerProfileQuestion.delete({
   *   where: {
   *     // ... filter to delete one CustomerProfileQuestion
   *   }
   * })
   *
   */
  delete<T extends CustomerProfileQuestionDeleteArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileQuestionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CustomerProfileQuestion.
   * @param {CustomerProfileQuestionUpdateArgs} args - Arguments to update one CustomerProfileQuestion.
   * @example
   * // Update one CustomerProfileQuestion
   * const customerProfileQuestion = await prisma.customerProfileQuestion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CustomerProfileQuestionUpdateArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileQuestionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CustomerProfileQuestions.
   * @param {CustomerProfileQuestionDeleteManyArgs} args - Arguments to filter CustomerProfileQuestions to delete.
   * @example
   * // Delete a few CustomerProfileQuestions
   * const { count } = await prisma.customerProfileQuestion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CustomerProfileQuestionDeleteManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerProfileQuestionDeleteManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CustomerProfileQuestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileQuestionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CustomerProfileQuestions
   * const customerProfileQuestion = await prisma.customerProfileQuestion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CustomerProfileQuestionUpdateManyArgs>(
    args: Prisma.SelectSubset<
      T,
      CustomerProfileQuestionUpdateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CustomerProfileQuestions and returns the data updated in the database.
   * @param {CustomerProfileQuestionUpdateManyAndReturnArgs} args - Arguments to update many CustomerProfileQuestions.
   * @example
   * // Update many CustomerProfileQuestions
   * const customerProfileQuestion = await prisma.customerProfileQuestion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CustomerProfileQuestions and only return the `id`
   * const customerProfileQuestionWithIdOnly = await prisma.customerProfileQuestion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CustomerProfileQuestionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      CustomerProfileQuestionUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CustomerProfileQuestion.
   * @param {CustomerProfileQuestionUpsertArgs} args - Arguments to update or create a CustomerProfileQuestion.
   * @example
   * // Update or create a CustomerProfileQuestion
   * const customerProfileQuestion = await prisma.customerProfileQuestion.upsert({
   *   create: {
   *     // ... data to create a CustomerProfileQuestion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CustomerProfileQuestion we want to update
   *   }
   * })
   */
  upsert<T extends CustomerProfileQuestionUpsertArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileQuestionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CustomerProfileQuestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileQuestionCountArgs} args - Arguments to filter CustomerProfileQuestions to count.
   * @example
   * // Count the number of CustomerProfileQuestions
   * const count = await prisma.customerProfileQuestion.count({
   *   where: {
   *     // ... the filter for the CustomerProfileQuestions we want to count
   *   }
   * })
   **/
  count<T extends CustomerProfileQuestionCountArgs>(
    args?: Prisma.Subset<T, CustomerProfileQuestionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            CustomerProfileQuestionCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CustomerProfileQuestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CustomerProfileQuestionAggregateArgs>(
    args: Prisma.Subset<T, CustomerProfileQuestionAggregateArgs>,
  ): Prisma.PrismaPromise<GetCustomerProfileQuestionAggregateType<T>>;

  /**
   * Group by CustomerProfileQuestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileQuestionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CustomerProfileQuestionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CustomerProfileQuestionGroupByArgs['orderBy'] }
      : { orderBy?: CustomerProfileQuestionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      CustomerProfileQuestionGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetCustomerProfileQuestionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CustomerProfileQuestion model
   */
  readonly fields: CustomerProfileQuestionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CustomerProfileQuestion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CustomerProfileQuestionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  questionOptions<
    T extends Prisma.CustomerProfileQuestion$questionOptionsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<
      T,
      Prisma.CustomerProfileQuestion$questionOptionsArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$CustomerProfileQuestionOptionsPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  answers<T extends Prisma.CustomerProfileQuestion$answersArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<
      T,
      Prisma.CustomerProfileQuestion$answersArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CustomerProfileQuestion model
 */
export interface CustomerProfileQuestionFieldRefs {
  readonly id: Prisma.FieldRef<'CustomerProfileQuestion', 'String'>;
  readonly questionText: Prisma.FieldRef<'CustomerProfileQuestion', 'String'>;
  readonly questionType: Prisma.FieldRef<
    'CustomerProfileQuestion',
    'ProfilingQuestionType'
  >;
  readonly isRequired: Prisma.FieldRef<'CustomerProfileQuestion', 'Boolean'>;
  readonly questionOrderIndex: Prisma.FieldRef<
    'CustomerProfileQuestion',
    'Int'
  >;
  readonly createdAt: Prisma.FieldRef<'CustomerProfileQuestion', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'CustomerProfileQuestion', 'DateTime'>;
}

// Custom InputTypes
/**
 * CustomerProfileQuestion findUnique
 */
export type CustomerProfileQuestionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileQuestion to fetch.
   */
  where: Prisma.CustomerProfileQuestionWhereUniqueInput;
};

/**
 * CustomerProfileQuestion findUniqueOrThrow
 */
export type CustomerProfileQuestionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileQuestion to fetch.
   */
  where: Prisma.CustomerProfileQuestionWhereUniqueInput;
};

/**
 * CustomerProfileQuestion findFirst
 */
export type CustomerProfileQuestionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileQuestion to fetch.
   */
  where?: Prisma.CustomerProfileQuestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerProfileQuestions to fetch.
   */
  orderBy?:
    | Prisma.CustomerProfileQuestionOrderByWithRelationInput
    | Prisma.CustomerProfileQuestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CustomerProfileQuestions.
   */
  cursor?: Prisma.CustomerProfileQuestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerProfileQuestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerProfileQuestions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CustomerProfileQuestions.
   */
  distinct?:
    | Prisma.CustomerProfileQuestionScalarFieldEnum
    | Prisma.CustomerProfileQuestionScalarFieldEnum[];
};

/**
 * CustomerProfileQuestion findFirstOrThrow
 */
export type CustomerProfileQuestionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileQuestion to fetch.
   */
  where?: Prisma.CustomerProfileQuestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerProfileQuestions to fetch.
   */
  orderBy?:
    | Prisma.CustomerProfileQuestionOrderByWithRelationInput
    | Prisma.CustomerProfileQuestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CustomerProfileQuestions.
   */
  cursor?: Prisma.CustomerProfileQuestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerProfileQuestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerProfileQuestions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CustomerProfileQuestions.
   */
  distinct?:
    | Prisma.CustomerProfileQuestionScalarFieldEnum
    | Prisma.CustomerProfileQuestionScalarFieldEnum[];
};

/**
 * CustomerProfileQuestion findMany
 */
export type CustomerProfileQuestionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileQuestions to fetch.
   */
  where?: Prisma.CustomerProfileQuestionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerProfileQuestions to fetch.
   */
  orderBy?:
    | Prisma.CustomerProfileQuestionOrderByWithRelationInput
    | Prisma.CustomerProfileQuestionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CustomerProfileQuestions.
   */
  cursor?: Prisma.CustomerProfileQuestionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerProfileQuestions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerProfileQuestions.
   */
  skip?: number;
  distinct?:
    | Prisma.CustomerProfileQuestionScalarFieldEnum
    | Prisma.CustomerProfileQuestionScalarFieldEnum[];
};

/**
 * CustomerProfileQuestion create
 */
export type CustomerProfileQuestionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
  /**
   * The data needed to create a CustomerProfileQuestion.
   */
  data: Prisma.XOR<
    Prisma.CustomerProfileQuestionCreateInput,
    Prisma.CustomerProfileQuestionUncheckedCreateInput
  >;
};

/**
 * CustomerProfileQuestion createMany
 */
export type CustomerProfileQuestionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many CustomerProfileQuestions.
   */
  data:
    | Prisma.CustomerProfileQuestionCreateManyInput
    | Prisma.CustomerProfileQuestionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CustomerProfileQuestion createManyAndReturn
 */
export type CustomerProfileQuestionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * The data used to create many CustomerProfileQuestions.
   */
  data:
    | Prisma.CustomerProfileQuestionCreateManyInput
    | Prisma.CustomerProfileQuestionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CustomerProfileQuestion update
 */
export type CustomerProfileQuestionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
  /**
   * The data needed to update a CustomerProfileQuestion.
   */
  data: Prisma.XOR<
    Prisma.CustomerProfileQuestionUpdateInput,
    Prisma.CustomerProfileQuestionUncheckedUpdateInput
  >;
  /**
   * Choose, which CustomerProfileQuestion to update.
   */
  where: Prisma.CustomerProfileQuestionWhereUniqueInput;
};

/**
 * CustomerProfileQuestion updateMany
 */
export type CustomerProfileQuestionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update CustomerProfileQuestions.
   */
  data: Prisma.XOR<
    Prisma.CustomerProfileQuestionUpdateManyMutationInput,
    Prisma.CustomerProfileQuestionUncheckedUpdateManyInput
  >;
  /**
   * Filter which CustomerProfileQuestions to update
   */
  where?: Prisma.CustomerProfileQuestionWhereInput;
  /**
   * Limit how many CustomerProfileQuestions to update.
   */
  limit?: number;
};

/**
 * CustomerProfileQuestion updateManyAndReturn
 */
export type CustomerProfileQuestionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * The data used to update CustomerProfileQuestions.
   */
  data: Prisma.XOR<
    Prisma.CustomerProfileQuestionUpdateManyMutationInput,
    Prisma.CustomerProfileQuestionUncheckedUpdateManyInput
  >;
  /**
   * Filter which CustomerProfileQuestions to update
   */
  where?: Prisma.CustomerProfileQuestionWhereInput;
  /**
   * Limit how many CustomerProfileQuestions to update.
   */
  limit?: number;
};

/**
 * CustomerProfileQuestion upsert
 */
export type CustomerProfileQuestionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
  /**
   * The filter to search for the CustomerProfileQuestion to update in case it exists.
   */
  where: Prisma.CustomerProfileQuestionWhereUniqueInput;
  /**
   * In case the CustomerProfileQuestion found by the `where` argument doesn't exist, create a new CustomerProfileQuestion with this data.
   */
  create: Prisma.XOR<
    Prisma.CustomerProfileQuestionCreateInput,
    Prisma.CustomerProfileQuestionUncheckedCreateInput
  >;
  /**
   * In case the CustomerProfileQuestion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CustomerProfileQuestionUpdateInput,
    Prisma.CustomerProfileQuestionUncheckedUpdateInput
  >;
};

/**
 * CustomerProfileQuestion delete
 */
export type CustomerProfileQuestionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
  /**
   * Filter which CustomerProfileQuestion to delete.
   */
  where: Prisma.CustomerProfileQuestionWhereUniqueInput;
};

/**
 * CustomerProfileQuestion deleteMany
 */
export type CustomerProfileQuestionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CustomerProfileQuestions to delete
   */
  where?: Prisma.CustomerProfileQuestionWhereInput;
  /**
   * Limit how many CustomerProfileQuestions to delete.
   */
  limit?: number;
};

/**
 * CustomerProfileQuestion.questionOptions
 */
export type CustomerProfileQuestion$questionOptionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestionOptions
   */
  select?: Prisma.CustomerProfileQuestionOptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestionOptions
   */
  omit?: Prisma.CustomerProfileQuestionOptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionOptionsInclude<ExtArgs> | null;
  where?: Prisma.CustomerProfileQuestionOptionsWhereInput;
  orderBy?:
    | Prisma.CustomerProfileQuestionOptionsOrderByWithRelationInput
    | Prisma.CustomerProfileQuestionOptionsOrderByWithRelationInput[];
  cursor?: Prisma.CustomerProfileQuestionOptionsWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.CustomerProfileQuestionOptionsScalarFieldEnum
    | Prisma.CustomerProfileQuestionOptionsScalarFieldEnum[];
};

/**
 * CustomerProfileQuestion.answers
 */
export type CustomerProfileQuestion$answersArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  where?: Prisma.CustomerProfileAnswersWhereInput;
  orderBy?:
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput[];
  cursor?: Prisma.CustomerProfileAnswersWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.CustomerProfileAnswersScalarFieldEnum
    | Prisma.CustomerProfileAnswersScalarFieldEnum[];
};

/**
 * CustomerProfileQuestion without action
 */
export type CustomerProfileQuestionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestion
   */
  select?: Prisma.CustomerProfileQuestionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestion
   */
  omit?: Prisma.CustomerProfileQuestionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionInclude<ExtArgs> | null;
};
