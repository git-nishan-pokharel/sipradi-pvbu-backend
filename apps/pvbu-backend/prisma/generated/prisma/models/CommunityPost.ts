/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `CommunityPost` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model CommunityPost
 *
 */
export type CommunityPostModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CommunityPostPayload>;

export type AggregateCommunityPost = {
  _count: CommunityPostCountAggregateOutputType | null;
  _min: CommunityPostMinAggregateOutputType | null;
  _max: CommunityPostMaxAggregateOutputType | null;
};

export type CommunityPostMinAggregateOutputType = {
  id: string | null;
  content: string | null;
  createdBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type CommunityPostMaxAggregateOutputType = {
  id: string | null;
  content: string | null;
  createdBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type CommunityPostCountAggregateOutputType = {
  id: number;
  content: number;
  createdBy: number;
  createdAt: number;
  updatedAt: number;
  imageUrl: number;
  sharedBy: number;
  _all: number;
};

export type CommunityPostMinAggregateInputType = {
  id?: true;
  content?: true;
  createdBy?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type CommunityPostMaxAggregateInputType = {
  id?: true;
  content?: true;
  createdBy?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type CommunityPostCountAggregateInputType = {
  id?: true;
  content?: true;
  createdBy?: true;
  createdAt?: true;
  updatedAt?: true;
  imageUrl?: true;
  sharedBy?: true;
  _all?: true;
};

export type CommunityPostAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CommunityPost to aggregate.
   */
  where?: Prisma.CommunityPostWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CommunityPosts to fetch.
   */
  orderBy?:
    | Prisma.CommunityPostOrderByWithRelationInput
    | Prisma.CommunityPostOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CommunityPostWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CommunityPosts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CommunityPosts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CommunityPosts
   **/
  _count?: true | CommunityPostCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CommunityPostMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CommunityPostMaxAggregateInputType;
};

export type GetCommunityPostAggregateType<
  T extends CommunityPostAggregateArgs,
> = {
  [P in keyof T & keyof AggregateCommunityPost]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCommunityPost[P]>
    : Prisma.GetScalarType<T[P], AggregateCommunityPost[P]>;
};

export type CommunityPostGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CommunityPostWhereInput;
  orderBy?:
    | Prisma.CommunityPostOrderByWithAggregationInput
    | Prisma.CommunityPostOrderByWithAggregationInput[];
  by:
    | Prisma.CommunityPostScalarFieldEnum[]
    | Prisma.CommunityPostScalarFieldEnum;
  having?: Prisma.CommunityPostScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CommunityPostCountAggregateInputType | true;
  _min?: CommunityPostMinAggregateInputType;
  _max?: CommunityPostMaxAggregateInputType;
};

export type CommunityPostGroupByOutputType = {
  id: string;
  content: string;
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
  imageUrl: runtime.JsonValue;
  sharedBy: runtime.JsonValue;
  _count: CommunityPostCountAggregateOutputType | null;
  _min: CommunityPostMinAggregateOutputType | null;
  _max: CommunityPostMaxAggregateOutputType | null;
};

type GetCommunityPostGroupByPayload<T extends CommunityPostGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<CommunityPostGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof CommunityPostGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CommunityPostGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CommunityPostGroupByOutputType[P]>;
      }
    >
  >;

export type CommunityPostWhereInput = {
  AND?: Prisma.CommunityPostWhereInput | Prisma.CommunityPostWhereInput[];
  OR?: Prisma.CommunityPostWhereInput[];
  NOT?: Prisma.CommunityPostWhereInput | Prisma.CommunityPostWhereInput[];
  id?: Prisma.UuidFilter<'CommunityPost'> | string;
  content?: Prisma.StringFilter<'CommunityPost'> | string;
  createdBy?: Prisma.UuidFilter<'CommunityPost'> | string;
  createdAt?: Prisma.DateTimeFilter<'CommunityPost'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'CommunityPost'> | Date | string;
  imageUrl?: Prisma.JsonFilter<'CommunityPost'>;
  sharedBy?: Prisma.JsonFilter<'CommunityPost'>;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  likes?: Prisma.LikeListRelationFilter;
};

export type CommunityPostOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  imageUrl?: Prisma.SortOrder;
  sharedBy?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  likes?: Prisma.LikeOrderByRelationAggregateInput;
};

export type CommunityPostWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.CommunityPostWhereInput | Prisma.CommunityPostWhereInput[];
    OR?: Prisma.CommunityPostWhereInput[];
    NOT?: Prisma.CommunityPostWhereInput | Prisma.CommunityPostWhereInput[];
    content?: Prisma.StringFilter<'CommunityPost'> | string;
    createdBy?: Prisma.UuidFilter<'CommunityPost'> | string;
    createdAt?: Prisma.DateTimeFilter<'CommunityPost'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'CommunityPost'> | Date | string;
    imageUrl?: Prisma.JsonFilter<'CommunityPost'>;
    sharedBy?: Prisma.JsonFilter<'CommunityPost'>;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    likes?: Prisma.LikeListRelationFilter;
  },
  'id'
>;

export type CommunityPostOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  imageUrl?: Prisma.SortOrder;
  sharedBy?: Prisma.SortOrder;
  _count?: Prisma.CommunityPostCountOrderByAggregateInput;
  _max?: Prisma.CommunityPostMaxOrderByAggregateInput;
  _min?: Prisma.CommunityPostMinOrderByAggregateInput;
};

export type CommunityPostScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CommunityPostScalarWhereWithAggregatesInput
    | Prisma.CommunityPostScalarWhereWithAggregatesInput[];
  OR?: Prisma.CommunityPostScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CommunityPostScalarWhereWithAggregatesInput
    | Prisma.CommunityPostScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'CommunityPost'> | string;
  content?: Prisma.StringWithAggregatesFilter<'CommunityPost'> | string;
  createdBy?: Prisma.UuidWithAggregatesFilter<'CommunityPost'> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CommunityPost'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CommunityPost'>
    | Date
    | string;
  imageUrl?: Prisma.JsonWithAggregatesFilter<'CommunityPost'>;
  sharedBy?: Prisma.JsonWithAggregatesFilter<'CommunityPost'>;
};

export type CommunityPostCreateInput = {
  id?: string;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  imageUrl: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  user: Prisma.UserCreateNestedOneWithoutCommunityPostInput;
  likes?: Prisma.LikeCreateNestedManyWithoutCommunityPostInput;
};

export type CommunityPostUncheckedCreateInput = {
  id?: string;
  content: string;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  imageUrl: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutCommunityPostInput;
};

export type CommunityPostUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  imageUrl?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  user?: Prisma.UserUpdateOneRequiredWithoutCommunityPostNestedInput;
  likes?: Prisma.LikeUpdateManyWithoutCommunityPostNestedInput;
};

export type CommunityPostUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  imageUrl?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  likes?: Prisma.LikeUncheckedUpdateManyWithoutCommunityPostNestedInput;
};

export type CommunityPostCreateManyInput = {
  id?: string;
  content: string;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  imageUrl: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

export type CommunityPostUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  imageUrl?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

export type CommunityPostUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  imageUrl?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

export type CommunityPostListRelationFilter = {
  every?: Prisma.CommunityPostWhereInput;
  some?: Prisma.CommunityPostWhereInput;
  none?: Prisma.CommunityPostWhereInput;
};

export type CommunityPostOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type CommunityPostCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  imageUrl?: Prisma.SortOrder;
  sharedBy?: Prisma.SortOrder;
};

export type CommunityPostMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CommunityPostMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CommunityPostScalarRelationFilter = {
  is?: Prisma.CommunityPostWhereInput;
  isNot?: Prisma.CommunityPostWhereInput;
};

export type CommunityPostCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.CommunityPostCreateWithoutUserInput,
        Prisma.CommunityPostUncheckedCreateWithoutUserInput
      >
    | Prisma.CommunityPostCreateWithoutUserInput[]
    | Prisma.CommunityPostUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CommunityPostCreateOrConnectWithoutUserInput
    | Prisma.CommunityPostCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.CommunityPostCreateManyUserInputEnvelope;
  connect?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
};

export type CommunityPostUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.CommunityPostCreateWithoutUserInput,
        Prisma.CommunityPostUncheckedCreateWithoutUserInput
      >
    | Prisma.CommunityPostCreateWithoutUserInput[]
    | Prisma.CommunityPostUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CommunityPostCreateOrConnectWithoutUserInput
    | Prisma.CommunityPostCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.CommunityPostCreateManyUserInputEnvelope;
  connect?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
};

export type CommunityPostUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CommunityPostCreateWithoutUserInput,
        Prisma.CommunityPostUncheckedCreateWithoutUserInput
      >
    | Prisma.CommunityPostCreateWithoutUserInput[]
    | Prisma.CommunityPostUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CommunityPostCreateOrConnectWithoutUserInput
    | Prisma.CommunityPostCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.CommunityPostUpsertWithWhereUniqueWithoutUserInput
    | Prisma.CommunityPostUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.CommunityPostCreateManyUserInputEnvelope;
  set?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
  disconnect?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
  delete?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
  connect?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
  update?:
    | Prisma.CommunityPostUpdateWithWhereUniqueWithoutUserInput
    | Prisma.CommunityPostUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.CommunityPostUpdateManyWithWhereWithoutUserInput
    | Prisma.CommunityPostUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.CommunityPostScalarWhereInput
    | Prisma.CommunityPostScalarWhereInput[];
};

export type CommunityPostUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CommunityPostCreateWithoutUserInput,
        Prisma.CommunityPostUncheckedCreateWithoutUserInput
      >
    | Prisma.CommunityPostCreateWithoutUserInput[]
    | Prisma.CommunityPostUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CommunityPostCreateOrConnectWithoutUserInput
    | Prisma.CommunityPostCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.CommunityPostUpsertWithWhereUniqueWithoutUserInput
    | Prisma.CommunityPostUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.CommunityPostCreateManyUserInputEnvelope;
  set?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
  disconnect?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
  delete?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
  connect?:
    | Prisma.CommunityPostWhereUniqueInput
    | Prisma.CommunityPostWhereUniqueInput[];
  update?:
    | Prisma.CommunityPostUpdateWithWhereUniqueWithoutUserInput
    | Prisma.CommunityPostUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.CommunityPostUpdateManyWithWhereWithoutUserInput
    | Prisma.CommunityPostUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.CommunityPostScalarWhereInput
    | Prisma.CommunityPostScalarWhereInput[];
};

export type CommunityPostCreateNestedOneWithoutLikesInput = {
  create?: Prisma.XOR<
    Prisma.CommunityPostCreateWithoutLikesInput,
    Prisma.CommunityPostUncheckedCreateWithoutLikesInput
  >;
  connectOrCreate?: Prisma.CommunityPostCreateOrConnectWithoutLikesInput;
  connect?: Prisma.CommunityPostWhereUniqueInput;
};

export type CommunityPostUpdateOneRequiredWithoutLikesNestedInput = {
  create?: Prisma.XOR<
    Prisma.CommunityPostCreateWithoutLikesInput,
    Prisma.CommunityPostUncheckedCreateWithoutLikesInput
  >;
  connectOrCreate?: Prisma.CommunityPostCreateOrConnectWithoutLikesInput;
  upsert?: Prisma.CommunityPostUpsertWithoutLikesInput;
  connect?: Prisma.CommunityPostWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.CommunityPostUpdateToOneWithWhereWithoutLikesInput,
      Prisma.CommunityPostUpdateWithoutLikesInput
    >,
    Prisma.CommunityPostUncheckedUpdateWithoutLikesInput
  >;
};

export type CommunityPostCreateWithoutUserInput = {
  id?: string;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  imageUrl: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  likes?: Prisma.LikeCreateNestedManyWithoutCommunityPostInput;
};

export type CommunityPostUncheckedCreateWithoutUserInput = {
  id?: string;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  imageUrl: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutCommunityPostInput;
};

export type CommunityPostCreateOrConnectWithoutUserInput = {
  where: Prisma.CommunityPostWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CommunityPostCreateWithoutUserInput,
    Prisma.CommunityPostUncheckedCreateWithoutUserInput
  >;
};

export type CommunityPostCreateManyUserInputEnvelope = {
  data:
    | Prisma.CommunityPostCreateManyUserInput
    | Prisma.CommunityPostCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type CommunityPostUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CommunityPostWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CommunityPostUpdateWithoutUserInput,
    Prisma.CommunityPostUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.CommunityPostCreateWithoutUserInput,
    Prisma.CommunityPostUncheckedCreateWithoutUserInput
  >;
};

export type CommunityPostUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CommunityPostWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CommunityPostUpdateWithoutUserInput,
    Prisma.CommunityPostUncheckedUpdateWithoutUserInput
  >;
};

export type CommunityPostUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CommunityPostScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CommunityPostUpdateManyMutationInput,
    Prisma.CommunityPostUncheckedUpdateManyWithoutUserInput
  >;
};

export type CommunityPostScalarWhereInput = {
  AND?:
    | Prisma.CommunityPostScalarWhereInput
    | Prisma.CommunityPostScalarWhereInput[];
  OR?: Prisma.CommunityPostScalarWhereInput[];
  NOT?:
    | Prisma.CommunityPostScalarWhereInput
    | Prisma.CommunityPostScalarWhereInput[];
  id?: Prisma.UuidFilter<'CommunityPost'> | string;
  content?: Prisma.StringFilter<'CommunityPost'> | string;
  createdBy?: Prisma.UuidFilter<'CommunityPost'> | string;
  createdAt?: Prisma.DateTimeFilter<'CommunityPost'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'CommunityPost'> | Date | string;
  imageUrl?: Prisma.JsonFilter<'CommunityPost'>;
  sharedBy?: Prisma.JsonFilter<'CommunityPost'>;
};

export type CommunityPostCreateWithoutLikesInput = {
  id?: string;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  imageUrl: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  user: Prisma.UserCreateNestedOneWithoutCommunityPostInput;
};

export type CommunityPostUncheckedCreateWithoutLikesInput = {
  id?: string;
  content: string;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  imageUrl: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

export type CommunityPostCreateOrConnectWithoutLikesInput = {
  where: Prisma.CommunityPostWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CommunityPostCreateWithoutLikesInput,
    Prisma.CommunityPostUncheckedCreateWithoutLikesInput
  >;
};

export type CommunityPostUpsertWithoutLikesInput = {
  update: Prisma.XOR<
    Prisma.CommunityPostUpdateWithoutLikesInput,
    Prisma.CommunityPostUncheckedUpdateWithoutLikesInput
  >;
  create: Prisma.XOR<
    Prisma.CommunityPostCreateWithoutLikesInput,
    Prisma.CommunityPostUncheckedCreateWithoutLikesInput
  >;
  where?: Prisma.CommunityPostWhereInput;
};

export type CommunityPostUpdateToOneWithWhereWithoutLikesInput = {
  where?: Prisma.CommunityPostWhereInput;
  data: Prisma.XOR<
    Prisma.CommunityPostUpdateWithoutLikesInput,
    Prisma.CommunityPostUncheckedUpdateWithoutLikesInput
  >;
};

export type CommunityPostUpdateWithoutLikesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  imageUrl?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  user?: Prisma.UserUpdateOneRequiredWithoutCommunityPostNestedInput;
};

export type CommunityPostUncheckedUpdateWithoutLikesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  imageUrl?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

export type CommunityPostCreateManyUserInput = {
  id?: string;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  imageUrl: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

export type CommunityPostUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  imageUrl?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  likes?: Prisma.LikeUpdateManyWithoutCommunityPostNestedInput;
};

export type CommunityPostUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  imageUrl?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  likes?: Prisma.LikeUncheckedUpdateManyWithoutCommunityPostNestedInput;
};

export type CommunityPostUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  imageUrl?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  sharedBy?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

/**
 * Count Type CommunityPostCountOutputType
 */

export type CommunityPostCountOutputType = {
  likes: number;
};

export type CommunityPostCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  likes?: boolean | CommunityPostCountOutputTypeCountLikesArgs;
};

/**
 * CommunityPostCountOutputType without action
 */
export type CommunityPostCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPostCountOutputType
   */
  select?: Prisma.CommunityPostCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * CommunityPostCountOutputType without action
 */
export type CommunityPostCountOutputTypeCountLikesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.LikeWhereInput;
};

export type CommunityPostSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    content?: boolean;
    createdBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    imageUrl?: boolean;
    sharedBy?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    likes?: boolean | Prisma.CommunityPost$likesArgs<ExtArgs>;
    _count?: boolean | Prisma.CommunityPostCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['communityPost']
>;

export type CommunityPostSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    content?: boolean;
    createdBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    imageUrl?: boolean;
    sharedBy?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['communityPost']
>;

export type CommunityPostSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    content?: boolean;
    createdBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    imageUrl?: boolean;
    sharedBy?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['communityPost']
>;

export type CommunityPostSelectScalar = {
  id?: boolean;
  content?: boolean;
  createdBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  imageUrl?: boolean;
  sharedBy?: boolean;
};

export type CommunityPostOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'content'
  | 'createdBy'
  | 'createdAt'
  | 'updatedAt'
  | 'imageUrl'
  | 'sharedBy',
  ExtArgs['result']['communityPost']
>;
export type CommunityPostInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  likes?: boolean | Prisma.CommunityPost$likesArgs<ExtArgs>;
  _count?: boolean | Prisma.CommunityPostCountOutputTypeDefaultArgs<ExtArgs>;
};
export type CommunityPostIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type CommunityPostIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $CommunityPostPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'CommunityPost';
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    likes: Prisma.$LikePayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      content: string;
      createdBy: string;
      createdAt: Date;
      updatedAt: Date;
      imageUrl: runtime.JsonValue;
      sharedBy: runtime.JsonValue;
    },
    ExtArgs['result']['communityPost']
  >;
  composites: {};
};

export type CommunityPostGetPayload<
  S extends boolean | null | undefined | CommunityPostDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CommunityPostPayload, S>;

export type CommunityPostCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  CommunityPostFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: CommunityPostCountAggregateInputType | true;
};

export interface CommunityPostDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['CommunityPost'];
    meta: { name: 'CommunityPost' };
  };
  /**
   * Find zero or one CommunityPost that matches the filter.
   * @param {CommunityPostFindUniqueArgs} args - Arguments to find a CommunityPost
   * @example
   * // Get one CommunityPost
   * const communityPost = await prisma.communityPost.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CommunityPostFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CommunityPostFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunityPostClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CommunityPost that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CommunityPostFindUniqueOrThrowArgs} args - Arguments to find a CommunityPost
   * @example
   * // Get one CommunityPost
   * const communityPost = await prisma.communityPost.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CommunityPostFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CommunityPostFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunityPostClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CommunityPost that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunityPostFindFirstArgs} args - Arguments to find a CommunityPost
   * @example
   * // Get one CommunityPost
   * const communityPost = await prisma.communityPost.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CommunityPostFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CommunityPostFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunityPostClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CommunityPost that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunityPostFindFirstOrThrowArgs} args - Arguments to find a CommunityPost
   * @example
   * // Get one CommunityPost
   * const communityPost = await prisma.communityPost.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CommunityPostFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CommunityPostFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunityPostClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CommunityPosts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunityPostFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CommunityPosts
   * const communityPosts = await prisma.communityPost.findMany()
   *
   * // Get first 10 CommunityPosts
   * const communityPosts = await prisma.communityPost.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const communityPostWithIdOnly = await prisma.communityPost.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CommunityPostFindManyArgs>(
    args?: Prisma.SelectSubset<T, CommunityPostFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a CommunityPost.
   * @param {CommunityPostCreateArgs} args - Arguments to create a CommunityPost.
   * @example
   * // Create one CommunityPost
   * const CommunityPost = await prisma.communityPost.create({
   *   data: {
   *     // ... data to create a CommunityPost
   *   }
   * })
   *
   */
  create<T extends CommunityPostCreateArgs>(
    args: Prisma.SelectSubset<T, CommunityPostCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunityPostClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CommunityPosts.
   * @param {CommunityPostCreateManyArgs} args - Arguments to create many CommunityPosts.
   * @example
   * // Create many CommunityPosts
   * const communityPost = await prisma.communityPost.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CommunityPostCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CommunityPostCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CommunityPosts and returns the data saved in the database.
   * @param {CommunityPostCreateManyAndReturnArgs} args - Arguments to create many CommunityPosts.
   * @example
   * // Create many CommunityPosts
   * const communityPost = await prisma.communityPost.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CommunityPosts and only return the `id`
   * const communityPostWithIdOnly = await prisma.communityPost.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CommunityPostCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      CommunityPostCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CommunityPost.
   * @param {CommunityPostDeleteArgs} args - Arguments to delete one CommunityPost.
   * @example
   * // Delete one CommunityPost
   * const CommunityPost = await prisma.communityPost.delete({
   *   where: {
   *     // ... filter to delete one CommunityPost
   *   }
   * })
   *
   */
  delete<T extends CommunityPostDeleteArgs>(
    args: Prisma.SelectSubset<T, CommunityPostDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunityPostClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CommunityPost.
   * @param {CommunityPostUpdateArgs} args - Arguments to update one CommunityPost.
   * @example
   * // Update one CommunityPost
   * const communityPost = await prisma.communityPost.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CommunityPostUpdateArgs>(
    args: Prisma.SelectSubset<T, CommunityPostUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunityPostClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CommunityPosts.
   * @param {CommunityPostDeleteManyArgs} args - Arguments to filter CommunityPosts to delete.
   * @example
   * // Delete a few CommunityPosts
   * const { count } = await prisma.communityPost.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CommunityPostDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CommunityPostDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CommunityPosts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunityPostUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CommunityPosts
   * const communityPost = await prisma.communityPost.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CommunityPostUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CommunityPostUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CommunityPosts and returns the data updated in the database.
   * @param {CommunityPostUpdateManyAndReturnArgs} args - Arguments to update many CommunityPosts.
   * @example
   * // Update many CommunityPosts
   * const communityPost = await prisma.communityPost.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CommunityPosts and only return the `id`
   * const communityPostWithIdOnly = await prisma.communityPost.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CommunityPostUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, CommunityPostUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CommunityPost.
   * @param {CommunityPostUpsertArgs} args - Arguments to update or create a CommunityPost.
   * @example
   * // Update or create a CommunityPost
   * const communityPost = await prisma.communityPost.upsert({
   *   create: {
   *     // ... data to create a CommunityPost
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CommunityPost we want to update
   *   }
   * })
   */
  upsert<T extends CommunityPostUpsertArgs>(
    args: Prisma.SelectSubset<T, CommunityPostUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__CommunityPostClient<
    runtime.Types.Result.GetResult<
      Prisma.$CommunityPostPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CommunityPosts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunityPostCountArgs} args - Arguments to filter CommunityPosts to count.
   * @example
   * // Count the number of CommunityPosts
   * const count = await prisma.communityPost.count({
   *   where: {
   *     // ... the filter for the CommunityPosts we want to count
   *   }
   * })
   **/
  count<T extends CommunityPostCountArgs>(
    args?: Prisma.Subset<T, CommunityPostCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            CommunityPostCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CommunityPost.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunityPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CommunityPostAggregateArgs>(
    args: Prisma.Subset<T, CommunityPostAggregateArgs>,
  ): Prisma.PrismaPromise<GetCommunityPostAggregateType<T>>;

  /**
   * Group by CommunityPost.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CommunityPostGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CommunityPostGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CommunityPostGroupByArgs['orderBy'] }
      : { orderBy?: CommunityPostGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, CommunityPostGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetCommunityPostGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CommunityPost model
   */
  readonly fields: CommunityPostFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CommunityPost.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CommunityPostClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  likes<T extends Prisma.CommunityPost$likesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CommunityPost$likesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$LikePayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CommunityPost model
 */
export interface CommunityPostFieldRefs {
  readonly id: Prisma.FieldRef<'CommunityPost', 'String'>;
  readonly content: Prisma.FieldRef<'CommunityPost', 'String'>;
  readonly createdBy: Prisma.FieldRef<'CommunityPost', 'String'>;
  readonly createdAt: Prisma.FieldRef<'CommunityPost', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'CommunityPost', 'DateTime'>;
  readonly imageUrl: Prisma.FieldRef<'CommunityPost', 'Json'>;
  readonly sharedBy: Prisma.FieldRef<'CommunityPost', 'Json'>;
}

// Custom InputTypes
/**
 * CommunityPost findUnique
 */
export type CommunityPostFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
  /**
   * Filter, which CommunityPost to fetch.
   */
  where: Prisma.CommunityPostWhereUniqueInput;
};

/**
 * CommunityPost findUniqueOrThrow
 */
export type CommunityPostFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
  /**
   * Filter, which CommunityPost to fetch.
   */
  where: Prisma.CommunityPostWhereUniqueInput;
};

/**
 * CommunityPost findFirst
 */
export type CommunityPostFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
  /**
   * Filter, which CommunityPost to fetch.
   */
  where?: Prisma.CommunityPostWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CommunityPosts to fetch.
   */
  orderBy?:
    | Prisma.CommunityPostOrderByWithRelationInput
    | Prisma.CommunityPostOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CommunityPosts.
   */
  cursor?: Prisma.CommunityPostWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CommunityPosts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CommunityPosts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CommunityPosts.
   */
  distinct?:
    | Prisma.CommunityPostScalarFieldEnum
    | Prisma.CommunityPostScalarFieldEnum[];
};

/**
 * CommunityPost findFirstOrThrow
 */
export type CommunityPostFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
  /**
   * Filter, which CommunityPost to fetch.
   */
  where?: Prisma.CommunityPostWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CommunityPosts to fetch.
   */
  orderBy?:
    | Prisma.CommunityPostOrderByWithRelationInput
    | Prisma.CommunityPostOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CommunityPosts.
   */
  cursor?: Prisma.CommunityPostWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CommunityPosts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CommunityPosts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CommunityPosts.
   */
  distinct?:
    | Prisma.CommunityPostScalarFieldEnum
    | Prisma.CommunityPostScalarFieldEnum[];
};

/**
 * CommunityPost findMany
 */
export type CommunityPostFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
  /**
   * Filter, which CommunityPosts to fetch.
   */
  where?: Prisma.CommunityPostWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CommunityPosts to fetch.
   */
  orderBy?:
    | Prisma.CommunityPostOrderByWithRelationInput
    | Prisma.CommunityPostOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CommunityPosts.
   */
  cursor?: Prisma.CommunityPostWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CommunityPosts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CommunityPosts.
   */
  skip?: number;
  distinct?:
    | Prisma.CommunityPostScalarFieldEnum
    | Prisma.CommunityPostScalarFieldEnum[];
};

/**
 * CommunityPost create
 */
export type CommunityPostCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
  /**
   * The data needed to create a CommunityPost.
   */
  data: Prisma.XOR<
    Prisma.CommunityPostCreateInput,
    Prisma.CommunityPostUncheckedCreateInput
  >;
};

/**
 * CommunityPost createMany
 */
export type CommunityPostCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many CommunityPosts.
   */
  data:
    | Prisma.CommunityPostCreateManyInput
    | Prisma.CommunityPostCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CommunityPost createManyAndReturn
 */
export type CommunityPostCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * The data used to create many CommunityPosts.
   */
  data:
    | Prisma.CommunityPostCreateManyInput
    | Prisma.CommunityPostCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CommunityPost update
 */
export type CommunityPostUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
  /**
   * The data needed to update a CommunityPost.
   */
  data: Prisma.XOR<
    Prisma.CommunityPostUpdateInput,
    Prisma.CommunityPostUncheckedUpdateInput
  >;
  /**
   * Choose, which CommunityPost to update.
   */
  where: Prisma.CommunityPostWhereUniqueInput;
};

/**
 * CommunityPost updateMany
 */
export type CommunityPostUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update CommunityPosts.
   */
  data: Prisma.XOR<
    Prisma.CommunityPostUpdateManyMutationInput,
    Prisma.CommunityPostUncheckedUpdateManyInput
  >;
  /**
   * Filter which CommunityPosts to update
   */
  where?: Prisma.CommunityPostWhereInput;
  /**
   * Limit how many CommunityPosts to update.
   */
  limit?: number;
};

/**
 * CommunityPost updateManyAndReturn
 */
export type CommunityPostUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * The data used to update CommunityPosts.
   */
  data: Prisma.XOR<
    Prisma.CommunityPostUpdateManyMutationInput,
    Prisma.CommunityPostUncheckedUpdateManyInput
  >;
  /**
   * Filter which CommunityPosts to update
   */
  where?: Prisma.CommunityPostWhereInput;
  /**
   * Limit how many CommunityPosts to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CommunityPost upsert
 */
export type CommunityPostUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
  /**
   * The filter to search for the CommunityPost to update in case it exists.
   */
  where: Prisma.CommunityPostWhereUniqueInput;
  /**
   * In case the CommunityPost found by the `where` argument doesn't exist, create a new CommunityPost with this data.
   */
  create: Prisma.XOR<
    Prisma.CommunityPostCreateInput,
    Prisma.CommunityPostUncheckedCreateInput
  >;
  /**
   * In case the CommunityPost was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CommunityPostUpdateInput,
    Prisma.CommunityPostUncheckedUpdateInput
  >;
};

/**
 * CommunityPost delete
 */
export type CommunityPostDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
  /**
   * Filter which CommunityPost to delete.
   */
  where: Prisma.CommunityPostWhereUniqueInput;
};

/**
 * CommunityPost deleteMany
 */
export type CommunityPostDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CommunityPosts to delete
   */
  where?: Prisma.CommunityPostWhereInput;
  /**
   * Limit how many CommunityPosts to delete.
   */
  limit?: number;
};

/**
 * CommunityPost.likes
 */
export type CommunityPost$likesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Like
   */
  select?: Prisma.LikeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Like
   */
  omit?: Prisma.LikeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LikeInclude<ExtArgs> | null;
  where?: Prisma.LikeWhereInput;
  orderBy?:
    | Prisma.LikeOrderByWithRelationInput
    | Prisma.LikeOrderByWithRelationInput[];
  cursor?: Prisma.LikeWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.LikeScalarFieldEnum | Prisma.LikeScalarFieldEnum[];
};

/**
 * CommunityPost without action
 */
export type CommunityPostDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CommunityPost
   */
  select?: Prisma.CommunityPostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CommunityPost
   */
  omit?: Prisma.CommunityPostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommunityPostInclude<ExtArgs> | null;
};
