/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Tags` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Tags
 *
 */
export type TagsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TagsPayload>;

export type AggregateTags = {
  _count: TagsCountAggregateOutputType | null;
  _min: TagsMinAggregateOutputType | null;
  _max: TagsMaxAggregateOutputType | null;
};

export type TagsMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  description: string | null;
};

export type TagsMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  description: string | null;
};

export type TagsCountAggregateOutputType = {
  id: number;
  name: number;
  description: number;
  _all: number;
};

export type TagsMinAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
};

export type TagsMaxAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
};

export type TagsCountAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  _all?: true;
};

export type TagsAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Tags to aggregate.
   */
  where?: Prisma.TagsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tags to fetch.
   */
  orderBy?:
    | Prisma.TagsOrderByWithRelationInput
    | Prisma.TagsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TagsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tags from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tags.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Tags
   **/
  _count?: true | TagsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TagsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TagsMaxAggregateInputType;
};

export type GetTagsAggregateType<T extends TagsAggregateArgs> = {
  [P in keyof T & keyof AggregateTags]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTags[P]>
    : Prisma.GetScalarType<T[P], AggregateTags[P]>;
};

export type TagsGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TagsWhereInput;
  orderBy?:
    | Prisma.TagsOrderByWithAggregationInput
    | Prisma.TagsOrderByWithAggregationInput[];
  by: Prisma.TagsScalarFieldEnum[] | Prisma.TagsScalarFieldEnum;
  having?: Prisma.TagsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TagsCountAggregateInputType | true;
  _min?: TagsMinAggregateInputType;
  _max?: TagsMaxAggregateInputType;
};

export type TagsGroupByOutputType = {
  id: string;
  name: string;
  description: string | null;
  _count: TagsCountAggregateOutputType | null;
  _min: TagsMinAggregateOutputType | null;
  _max: TagsMaxAggregateOutputType | null;
};

type GetTagsGroupByPayload<T extends TagsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TagsGroupByOutputType, T['by']> & {
      [P in keyof T & keyof TagsGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TagsGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TagsGroupByOutputType[P]>;
    }
  >
>;

export type TagsWhereInput = {
  AND?: Prisma.TagsWhereInput | Prisma.TagsWhereInput[];
  OR?: Prisma.TagsWhereInput[];
  NOT?: Prisma.TagsWhereInput | Prisma.TagsWhereInput[];
  id?: Prisma.UuidFilter<'Tags'> | string;
  name?: Prisma.StringFilter<'Tags'> | string;
  description?: Prisma.StringNullableFilter<'Tags'> | string | null;
  faqTags?: Prisma.FAQTagsListRelationFilter;
};

export type TagsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  faqTags?: Prisma.FAQTagsOrderByRelationAggregateInput;
};

export type TagsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.TagsWhereInput | Prisma.TagsWhereInput[];
    OR?: Prisma.TagsWhereInput[];
    NOT?: Prisma.TagsWhereInput | Prisma.TagsWhereInput[];
    name?: Prisma.StringFilter<'Tags'> | string;
    description?: Prisma.StringNullableFilter<'Tags'> | string | null;
    faqTags?: Prisma.FAQTagsListRelationFilter;
  },
  'id'
>;

export type TagsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.TagsCountOrderByAggregateInput;
  _max?: Prisma.TagsMaxOrderByAggregateInput;
  _min?: Prisma.TagsMinOrderByAggregateInput;
};

export type TagsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TagsScalarWhereWithAggregatesInput
    | Prisma.TagsScalarWhereWithAggregatesInput[];
  OR?: Prisma.TagsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TagsScalarWhereWithAggregatesInput
    | Prisma.TagsScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'Tags'> | string;
  name?: Prisma.StringWithAggregatesFilter<'Tags'> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'Tags'>
    | string
    | null;
};

export type TagsCreateInput = {
  id?: string;
  name: string;
  description?: string | null;
  faqTags?: Prisma.FAQTagsCreateNestedManyWithoutTagsInput;
};

export type TagsUncheckedCreateInput = {
  id?: string;
  name: string;
  description?: string | null;
  faqTags?: Prisma.FAQTagsUncheckedCreateNestedManyWithoutTagsInput;
};

export type TagsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  faqTags?: Prisma.FAQTagsUpdateManyWithoutTagsNestedInput;
};

export type TagsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  faqTags?: Prisma.FAQTagsUncheckedUpdateManyWithoutTagsNestedInput;
};

export type TagsCreateManyInput = {
  id?: string;
  name: string;
  description?: string | null;
};

export type TagsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TagsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TagsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
};

export type TagsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
};

export type TagsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
};

export type TagsScalarRelationFilter = {
  is?: Prisma.TagsWhereInput;
  isNot?: Prisma.TagsWhereInput;
};

export type TagsCreateNestedOneWithoutFaqTagsInput = {
  create?: Prisma.XOR<
    Prisma.TagsCreateWithoutFaqTagsInput,
    Prisma.TagsUncheckedCreateWithoutFaqTagsInput
  >;
  connectOrCreate?: Prisma.TagsCreateOrConnectWithoutFaqTagsInput;
  connect?: Prisma.TagsWhereUniqueInput;
};

export type TagsUpdateOneRequiredWithoutFaqTagsNestedInput = {
  create?: Prisma.XOR<
    Prisma.TagsCreateWithoutFaqTagsInput,
    Prisma.TagsUncheckedCreateWithoutFaqTagsInput
  >;
  connectOrCreate?: Prisma.TagsCreateOrConnectWithoutFaqTagsInput;
  upsert?: Prisma.TagsUpsertWithoutFaqTagsInput;
  connect?: Prisma.TagsWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TagsUpdateToOneWithWhereWithoutFaqTagsInput,
      Prisma.TagsUpdateWithoutFaqTagsInput
    >,
    Prisma.TagsUncheckedUpdateWithoutFaqTagsInput
  >;
};

export type TagsCreateWithoutFaqTagsInput = {
  id?: string;
  name: string;
  description?: string | null;
};

export type TagsUncheckedCreateWithoutFaqTagsInput = {
  id?: string;
  name: string;
  description?: string | null;
};

export type TagsCreateOrConnectWithoutFaqTagsInput = {
  where: Prisma.TagsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TagsCreateWithoutFaqTagsInput,
    Prisma.TagsUncheckedCreateWithoutFaqTagsInput
  >;
};

export type TagsUpsertWithoutFaqTagsInput = {
  update: Prisma.XOR<
    Prisma.TagsUpdateWithoutFaqTagsInput,
    Prisma.TagsUncheckedUpdateWithoutFaqTagsInput
  >;
  create: Prisma.XOR<
    Prisma.TagsCreateWithoutFaqTagsInput,
    Prisma.TagsUncheckedCreateWithoutFaqTagsInput
  >;
  where?: Prisma.TagsWhereInput;
};

export type TagsUpdateToOneWithWhereWithoutFaqTagsInput = {
  where?: Prisma.TagsWhereInput;
  data: Prisma.XOR<
    Prisma.TagsUpdateWithoutFaqTagsInput,
    Prisma.TagsUncheckedUpdateWithoutFaqTagsInput
  >;
};

export type TagsUpdateWithoutFaqTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type TagsUncheckedUpdateWithoutFaqTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

/**
 * Count Type TagsCountOutputType
 */

export type TagsCountOutputType = {
  faqTags: number;
};

export type TagsCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  faqTags?: boolean | TagsCountOutputTypeCountFaqTagsArgs;
};

/**
 * TagsCountOutputType without action
 */
export type TagsCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagsCountOutputType
   */
  select?: Prisma.TagsCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * TagsCountOutputType without action
 */
export type TagsCountOutputTypeCountFaqTagsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FAQTagsWhereInput;
};

export type TagsSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    faqTags?: boolean | Prisma.Tags$faqTagsArgs<ExtArgs>;
    _count?: boolean | Prisma.TagsCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['tags']
>;

export type TagsSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
  },
  ExtArgs['result']['tags']
>;

export type TagsSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
  },
  ExtArgs['result']['tags']
>;

export type TagsSelectScalar = {
  id?: boolean;
  name?: boolean;
  description?: boolean;
};

export type TagsOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'description',
  ExtArgs['result']['tags']
>;
export type TagsInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  faqTags?: boolean | Prisma.Tags$faqTagsArgs<ExtArgs>;
  _count?: boolean | Prisma.TagsCountOutputTypeDefaultArgs<ExtArgs>;
};
export type TagsIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type TagsIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $TagsPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Tags';
  objects: {
    faqTags: Prisma.$FAQTagsPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      description: string | null;
    },
    ExtArgs['result']['tags']
  >;
  composites: {};
};

export type TagsGetPayload<
  S extends boolean | null | undefined | TagsDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TagsPayload, S>;

export type TagsCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<TagsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: TagsCountAggregateInputType | true;
};

export interface TagsDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Tags'];
    meta: { name: 'Tags' };
  };
  /**
   * Find zero or one Tags that matches the filter.
   * @param {TagsFindUniqueArgs} args - Arguments to find a Tags
   * @example
   * // Get one Tags
   * const tags = await prisma.tags.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TagsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TagsFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__TagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Tags that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TagsFindUniqueOrThrowArgs} args - Arguments to find a Tags
   * @example
   * // Get one Tags
   * const tags = await prisma.tags.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TagsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TagsFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Tags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsFindFirstArgs} args - Arguments to find a Tags
   * @example
   * // Get one Tags
   * const tags = await prisma.tags.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TagsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TagsFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__TagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Tags that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsFindFirstOrThrowArgs} args - Arguments to find a Tags
   * @example
   * // Get one Tags
   * const tags = await prisma.tags.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TagsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TagsFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Tags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tags
   * const tags = await prisma.tags.findMany()
   *
   * // Get first 10 Tags
   * const tags = await prisma.tags.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const tagsWithIdOnly = await prisma.tags.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TagsFindManyArgs>(
    args?: Prisma.SelectSubset<T, TagsFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Tags.
   * @param {TagsCreateArgs} args - Arguments to create a Tags.
   * @example
   * // Create one Tags
   * const Tags = await prisma.tags.create({
   *   data: {
   *     // ... data to create a Tags
   *   }
   * })
   *
   */
  create<T extends TagsCreateArgs>(
    args: Prisma.SelectSubset<T, TagsCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__TagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Tags.
   * @param {TagsCreateManyArgs} args - Arguments to create many Tags.
   * @example
   * // Create many Tags
   * const tags = await prisma.tags.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TagsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TagsCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Tags and returns the data saved in the database.
   * @param {TagsCreateManyAndReturnArgs} args - Arguments to create many Tags.
   * @example
   * // Create many Tags
   * const tags = await prisma.tags.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Tags and only return the `id`
   * const tagsWithIdOnly = await prisma.tags.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TagsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TagsCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Tags.
   * @param {TagsDeleteArgs} args - Arguments to delete one Tags.
   * @example
   * // Delete one Tags
   * const Tags = await prisma.tags.delete({
   *   where: {
   *     // ... filter to delete one Tags
   *   }
   * })
   *
   */
  delete<T extends TagsDeleteArgs>(
    args: Prisma.SelectSubset<T, TagsDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__TagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Tags.
   * @param {TagsUpdateArgs} args - Arguments to update one Tags.
   * @example
   * // Update one Tags
   * const tags = await prisma.tags.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TagsUpdateArgs>(
    args: Prisma.SelectSubset<T, TagsUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__TagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Tags.
   * @param {TagsDeleteManyArgs} args - Arguments to filter Tags to delete.
   * @example
   * // Delete a few Tags
   * const { count } = await prisma.tags.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TagsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TagsDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Tags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tags
   * const tags = await prisma.tags.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TagsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TagsUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Tags and returns the data updated in the database.
   * @param {TagsUpdateManyAndReturnArgs} args - Arguments to update many Tags.
   * @example
   * // Update many Tags
   * const tags = await prisma.tags.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Tags and only return the `id`
   * const tagsWithIdOnly = await prisma.tags.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TagsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TagsUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Tags.
   * @param {TagsUpsertArgs} args - Arguments to update or create a Tags.
   * @example
   * // Update or create a Tags
   * const tags = await prisma.tags.upsert({
   *   create: {
   *     // ... data to create a Tags
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tags we want to update
   *   }
   * })
   */
  upsert<T extends TagsUpsertArgs>(
    args: Prisma.SelectSubset<T, TagsUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__TagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagsPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Tags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsCountArgs} args - Arguments to filter Tags to count.
   * @example
   * // Count the number of Tags
   * const count = await prisma.tags.count({
   *   where: {
   *     // ... the filter for the Tags we want to count
   *   }
   * })
   **/
  count<T extends TagsCountArgs>(
    args?: Prisma.Subset<T, TagsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TagsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Tags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TagsAggregateArgs>(
    args: Prisma.Subset<T, TagsAggregateArgs>,
  ): Prisma.PrismaPromise<GetTagsAggregateType<T>>;

  /**
   * Group by Tags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TagsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TagsGroupByArgs['orderBy'] }
      : { orderBy?: TagsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, TagsGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetTagsGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Tags model
   */
  readonly fields: TagsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tags.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TagsClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  faqTags<T extends Prisma.Tags$faqTagsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Tags$faqTagsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$FAQTagsPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Tags model
 */
export interface TagsFieldRefs {
  readonly id: Prisma.FieldRef<'Tags', 'String'>;
  readonly name: Prisma.FieldRef<'Tags', 'String'>;
  readonly description: Prisma.FieldRef<'Tags', 'String'>;
}

// Custom InputTypes
/**
 * Tags findUnique
 */
export type TagsFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
  /**
   * Filter, which Tags to fetch.
   */
  where: Prisma.TagsWhereUniqueInput;
};

/**
 * Tags findUniqueOrThrow
 */
export type TagsFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
  /**
   * Filter, which Tags to fetch.
   */
  where: Prisma.TagsWhereUniqueInput;
};

/**
 * Tags findFirst
 */
export type TagsFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
  /**
   * Filter, which Tags to fetch.
   */
  where?: Prisma.TagsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tags to fetch.
   */
  orderBy?:
    | Prisma.TagsOrderByWithRelationInput
    | Prisma.TagsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Tags.
   */
  cursor?: Prisma.TagsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tags from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tags.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Tags.
   */
  distinct?: Prisma.TagsScalarFieldEnum | Prisma.TagsScalarFieldEnum[];
};

/**
 * Tags findFirstOrThrow
 */
export type TagsFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
  /**
   * Filter, which Tags to fetch.
   */
  where?: Prisma.TagsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tags to fetch.
   */
  orderBy?:
    | Prisma.TagsOrderByWithRelationInput
    | Prisma.TagsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Tags.
   */
  cursor?: Prisma.TagsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tags from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tags.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Tags.
   */
  distinct?: Prisma.TagsScalarFieldEnum | Prisma.TagsScalarFieldEnum[];
};

/**
 * Tags findMany
 */
export type TagsFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
  /**
   * Filter, which Tags to fetch.
   */
  where?: Prisma.TagsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tags to fetch.
   */
  orderBy?:
    | Prisma.TagsOrderByWithRelationInput
    | Prisma.TagsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Tags.
   */
  cursor?: Prisma.TagsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tags from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tags.
   */
  skip?: number;
  distinct?: Prisma.TagsScalarFieldEnum | Prisma.TagsScalarFieldEnum[];
};

/**
 * Tags create
 */
export type TagsCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
  /**
   * The data needed to create a Tags.
   */
  data: Prisma.XOR<Prisma.TagsCreateInput, Prisma.TagsUncheckedCreateInput>;
};

/**
 * Tags createMany
 */
export type TagsCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Tags.
   */
  data: Prisma.TagsCreateManyInput | Prisma.TagsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Tags createManyAndReturn
 */
export type TagsCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * The data used to create many Tags.
   */
  data: Prisma.TagsCreateManyInput | Prisma.TagsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Tags update
 */
export type TagsUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
  /**
   * The data needed to update a Tags.
   */
  data: Prisma.XOR<Prisma.TagsUpdateInput, Prisma.TagsUncheckedUpdateInput>;
  /**
   * Choose, which Tags to update.
   */
  where: Prisma.TagsWhereUniqueInput;
};

/**
 * Tags updateMany
 */
export type TagsUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Tags.
   */
  data: Prisma.XOR<
    Prisma.TagsUpdateManyMutationInput,
    Prisma.TagsUncheckedUpdateManyInput
  >;
  /**
   * Filter which Tags to update
   */
  where?: Prisma.TagsWhereInput;
  /**
   * Limit how many Tags to update.
   */
  limit?: number;
};

/**
 * Tags updateManyAndReturn
 */
export type TagsUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * The data used to update Tags.
   */
  data: Prisma.XOR<
    Prisma.TagsUpdateManyMutationInput,
    Prisma.TagsUncheckedUpdateManyInput
  >;
  /**
   * Filter which Tags to update
   */
  where?: Prisma.TagsWhereInput;
  /**
   * Limit how many Tags to update.
   */
  limit?: number;
};

/**
 * Tags upsert
 */
export type TagsUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
  /**
   * The filter to search for the Tags to update in case it exists.
   */
  where: Prisma.TagsWhereUniqueInput;
  /**
   * In case the Tags found by the `where` argument doesn't exist, create a new Tags with this data.
   */
  create: Prisma.XOR<Prisma.TagsCreateInput, Prisma.TagsUncheckedCreateInput>;
  /**
   * In case the Tags was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TagsUpdateInput, Prisma.TagsUncheckedUpdateInput>;
};

/**
 * Tags delete
 */
export type TagsDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
  /**
   * Filter which Tags to delete.
   */
  where: Prisma.TagsWhereUniqueInput;
};

/**
 * Tags deleteMany
 */
export type TagsDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Tags to delete
   */
  where?: Prisma.TagsWhereInput;
  /**
   * Limit how many Tags to delete.
   */
  limit?: number;
};

/**
 * Tags.faqTags
 */
export type Tags$faqTagsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  where?: Prisma.FAQTagsWhereInput;
  orderBy?:
    | Prisma.FAQTagsOrderByWithRelationInput
    | Prisma.FAQTagsOrderByWithRelationInput[];
  cursor?: Prisma.FAQTagsWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.FAQTagsScalarFieldEnum | Prisma.FAQTagsScalarFieldEnum[];
};

/**
 * Tags without action
 */
export type TagsDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tags
   */
  select?: Prisma.TagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tags
   */
  omit?: Prisma.TagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagsInclude<ExtArgs> | null;
};
