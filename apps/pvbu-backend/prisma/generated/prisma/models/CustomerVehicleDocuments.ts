/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `CustomerVehicleDocuments` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model CustomerVehicleDocuments
 *
 */
export type CustomerVehicleDocumentsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CustomerVehicleDocumentsPayload>;

export type AggregateCustomerVehicleDocuments = {
  _count: CustomerVehicleDocumentsCountAggregateOutputType | null;
  _min: CustomerVehicleDocumentsMinAggregateOutputType | null;
  _max: CustomerVehicleDocumentsMaxAggregateOutputType | null;
};

export type CustomerVehicleDocumentsMinAggregateOutputType = {
  id: string | null;
  documentType: $Enums.CustomerVehicleDocumentType | null;
  documentUrl: string | null;
  Remarks: string | null;
  assignedVehicleId: string | null;
  uploadedAt: Date | null;
  updatedAt: Date | null;
};

export type CustomerVehicleDocumentsMaxAggregateOutputType = {
  id: string | null;
  documentType: $Enums.CustomerVehicleDocumentType | null;
  documentUrl: string | null;
  Remarks: string | null;
  assignedVehicleId: string | null;
  uploadedAt: Date | null;
  updatedAt: Date | null;
};

export type CustomerVehicleDocumentsCountAggregateOutputType = {
  id: number;
  documentType: number;
  documentUrl: number;
  Remarks: number;
  assignedVehicleId: number;
  uploadedAt: number;
  updatedAt: number;
  _all: number;
};

export type CustomerVehicleDocumentsMinAggregateInputType = {
  id?: true;
  documentType?: true;
  documentUrl?: true;
  Remarks?: true;
  assignedVehicleId?: true;
  uploadedAt?: true;
  updatedAt?: true;
};

export type CustomerVehicleDocumentsMaxAggregateInputType = {
  id?: true;
  documentType?: true;
  documentUrl?: true;
  Remarks?: true;
  assignedVehicleId?: true;
  uploadedAt?: true;
  updatedAt?: true;
};

export type CustomerVehicleDocumentsCountAggregateInputType = {
  id?: true;
  documentType?: true;
  documentUrl?: true;
  Remarks?: true;
  assignedVehicleId?: true;
  uploadedAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type CustomerVehicleDocumentsAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CustomerVehicleDocuments to aggregate.
   */
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerVehicleDocuments to fetch.
   */
  orderBy?:
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerVehicleDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerVehicleDocuments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CustomerVehicleDocuments
   **/
  _count?: true | CustomerVehicleDocumentsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CustomerVehicleDocumentsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CustomerVehicleDocumentsMaxAggregateInputType;
};

export type GetCustomerVehicleDocumentsAggregateType<
  T extends CustomerVehicleDocumentsAggregateArgs,
> = {
  [P in keyof T & keyof AggregateCustomerVehicleDocuments]: P extends
    | '_count'
    | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCustomerVehicleDocuments[P]>
    : Prisma.GetScalarType<T[P], AggregateCustomerVehicleDocuments[P]>;
};

export type CustomerVehicleDocumentsGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
  orderBy?:
    | Prisma.CustomerVehicleDocumentsOrderByWithAggregationInput
    | Prisma.CustomerVehicleDocumentsOrderByWithAggregationInput[];
  by:
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum[]
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum;
  having?: Prisma.CustomerVehicleDocumentsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CustomerVehicleDocumentsCountAggregateInputType | true;
  _min?: CustomerVehicleDocumentsMinAggregateInputType;
  _max?: CustomerVehicleDocumentsMaxAggregateInputType;
};

export type CustomerVehicleDocumentsGroupByOutputType = {
  id: string;
  documentType: $Enums.CustomerVehicleDocumentType;
  documentUrl: string;
  Remarks: string | null;
  assignedVehicleId: string;
  uploadedAt: Date;
  updatedAt: Date;
  _count: CustomerVehicleDocumentsCountAggregateOutputType | null;
  _min: CustomerVehicleDocumentsMinAggregateOutputType | null;
  _max: CustomerVehicleDocumentsMaxAggregateOutputType | null;
};

type GetCustomerVehicleDocumentsGroupByPayload<
  T extends CustomerVehicleDocumentsGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<
      CustomerVehicleDocumentsGroupByOutputType,
      T['by']
    > & {
      [P in keyof T &
        keyof CustomerVehicleDocumentsGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              CustomerVehicleDocumentsGroupByOutputType[P]
            >
        : Prisma.GetScalarType<
            T[P],
            CustomerVehicleDocumentsGroupByOutputType[P]
          >;
    }
  >
>;

export type CustomerVehicleDocumentsWhereInput = {
  AND?:
    | Prisma.CustomerVehicleDocumentsWhereInput
    | Prisma.CustomerVehicleDocumentsWhereInput[];
  OR?: Prisma.CustomerVehicleDocumentsWhereInput[];
  NOT?:
    | Prisma.CustomerVehicleDocumentsWhereInput
    | Prisma.CustomerVehicleDocumentsWhereInput[];
  id?: Prisma.UuidFilter<'CustomerVehicleDocuments'> | string;
  documentType?:
    | Prisma.EnumCustomerVehicleDocumentTypeFilter<'CustomerVehicleDocuments'>
    | $Enums.CustomerVehicleDocumentType;
  documentUrl?: Prisma.StringFilter<'CustomerVehicleDocuments'> | string;
  Remarks?:
    | Prisma.StringNullableFilter<'CustomerVehicleDocuments'>
    | string
    | null;
  assignedVehicleId?: Prisma.UuidFilter<'CustomerVehicleDocuments'> | string;
  uploadedAt?:
    | Prisma.DateTimeFilter<'CustomerVehicleDocuments'>
    | Date
    | string;
  updatedAt?: Prisma.DateTimeFilter<'CustomerVehicleDocuments'> | Date | string;
  assignedVehicles?: Prisma.XOR<
    Prisma.AssignedVehiclesScalarRelationFilter,
    Prisma.AssignedVehiclesWhereInput
  >;
};

export type CustomerVehicleDocumentsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  documentType?: Prisma.SortOrder;
  documentUrl?: Prisma.SortOrder;
  Remarks?: Prisma.SortOrderInput | Prisma.SortOrder;
  assignedVehicleId?: Prisma.SortOrder;
  uploadedAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  assignedVehicles?: Prisma.AssignedVehiclesOrderByWithRelationInput;
};

export type CustomerVehicleDocumentsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.CustomerVehicleDocumentsWhereInput
      | Prisma.CustomerVehicleDocumentsWhereInput[];
    OR?: Prisma.CustomerVehicleDocumentsWhereInput[];
    NOT?:
      | Prisma.CustomerVehicleDocumentsWhereInput
      | Prisma.CustomerVehicleDocumentsWhereInput[];
    documentType?:
      | Prisma.EnumCustomerVehicleDocumentTypeFilter<'CustomerVehicleDocuments'>
      | $Enums.CustomerVehicleDocumentType;
    documentUrl?: Prisma.StringFilter<'CustomerVehicleDocuments'> | string;
    Remarks?:
      | Prisma.StringNullableFilter<'CustomerVehicleDocuments'>
      | string
      | null;
    assignedVehicleId?: Prisma.UuidFilter<'CustomerVehicleDocuments'> | string;
    uploadedAt?:
      | Prisma.DateTimeFilter<'CustomerVehicleDocuments'>
      | Date
      | string;
    updatedAt?:
      | Prisma.DateTimeFilter<'CustomerVehicleDocuments'>
      | Date
      | string;
    assignedVehicles?: Prisma.XOR<
      Prisma.AssignedVehiclesScalarRelationFilter,
      Prisma.AssignedVehiclesWhereInput
    >;
  },
  'id'
>;

export type CustomerVehicleDocumentsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  documentType?: Prisma.SortOrder;
  documentUrl?: Prisma.SortOrder;
  Remarks?: Prisma.SortOrderInput | Prisma.SortOrder;
  assignedVehicleId?: Prisma.SortOrder;
  uploadedAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.CustomerVehicleDocumentsCountOrderByAggregateInput;
  _max?: Prisma.CustomerVehicleDocumentsMaxOrderByAggregateInput;
  _min?: Prisma.CustomerVehicleDocumentsMinOrderByAggregateInput;
};

export type CustomerVehicleDocumentsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CustomerVehicleDocumentsScalarWhereWithAggregatesInput
    | Prisma.CustomerVehicleDocumentsScalarWhereWithAggregatesInput[];
  OR?: Prisma.CustomerVehicleDocumentsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CustomerVehicleDocumentsScalarWhereWithAggregatesInput
    | Prisma.CustomerVehicleDocumentsScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'CustomerVehicleDocuments'> | string;
  documentType?:
    | Prisma.EnumCustomerVehicleDocumentTypeWithAggregatesFilter<'CustomerVehicleDocuments'>
    | $Enums.CustomerVehicleDocumentType;
  documentUrl?:
    | Prisma.StringWithAggregatesFilter<'CustomerVehicleDocuments'>
    | string;
  Remarks?:
    | Prisma.StringNullableWithAggregatesFilter<'CustomerVehicleDocuments'>
    | string
    | null;
  assignedVehicleId?:
    | Prisma.UuidWithAggregatesFilter<'CustomerVehicleDocuments'>
    | string;
  uploadedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CustomerVehicleDocuments'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CustomerVehicleDocuments'>
    | Date
    | string;
};

export type CustomerVehicleDocumentsCreateInput = {
  id?: string;
  documentType: $Enums.CustomerVehicleDocumentType;
  documentUrl: string;
  Remarks?: string | null;
  uploadedAt?: Date | string;
  updatedAt?: Date | string;
  assignedVehicles: Prisma.AssignedVehiclesCreateNestedOneWithoutCustomerVehicleDocumentsInput;
};

export type CustomerVehicleDocumentsUncheckedCreateInput = {
  id?: string;
  documentType: $Enums.CustomerVehicleDocumentType;
  documentUrl: string;
  Remarks?: string | null;
  assignedVehicleId: string;
  uploadedAt?: Date | string;
  updatedAt?: Date | string;
};

export type CustomerVehicleDocumentsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentType?:
    | Prisma.EnumCustomerVehicleDocumentTypeFieldUpdateOperationsInput
    | $Enums.CustomerVehicleDocumentType;
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  Remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  assignedVehicles?: Prisma.AssignedVehiclesUpdateOneRequiredWithoutCustomerVehicleDocumentsNestedInput;
};

export type CustomerVehicleDocumentsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentType?:
    | Prisma.EnumCustomerVehicleDocumentTypeFieldUpdateOperationsInput
    | $Enums.CustomerVehicleDocumentType;
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  Remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assignedVehicleId?: Prisma.StringFieldUpdateOperationsInput | string;
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerVehicleDocumentsCreateManyInput = {
  id?: string;
  documentType: $Enums.CustomerVehicleDocumentType;
  documentUrl: string;
  Remarks?: string | null;
  assignedVehicleId: string;
  uploadedAt?: Date | string;
  updatedAt?: Date | string;
};

export type CustomerVehicleDocumentsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentType?:
    | Prisma.EnumCustomerVehicleDocumentTypeFieldUpdateOperationsInput
    | $Enums.CustomerVehicleDocumentType;
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  Remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerVehicleDocumentsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentType?:
    | Prisma.EnumCustomerVehicleDocumentTypeFieldUpdateOperationsInput
    | $Enums.CustomerVehicleDocumentType;
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  Remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  assignedVehicleId?: Prisma.StringFieldUpdateOperationsInput | string;
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerVehicleDocumentsListRelationFilter = {
  every?: Prisma.CustomerVehicleDocumentsWhereInput;
  some?: Prisma.CustomerVehicleDocumentsWhereInput;
  none?: Prisma.CustomerVehicleDocumentsWhereInput;
};

export type CustomerVehicleDocumentsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type CustomerVehicleDocumentsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  documentType?: Prisma.SortOrder;
  documentUrl?: Prisma.SortOrder;
  Remarks?: Prisma.SortOrder;
  assignedVehicleId?: Prisma.SortOrder;
  uploadedAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CustomerVehicleDocumentsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  documentType?: Prisma.SortOrder;
  documentUrl?: Prisma.SortOrder;
  Remarks?: Prisma.SortOrder;
  assignedVehicleId?: Prisma.SortOrder;
  uploadedAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CustomerVehicleDocumentsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  documentType?: Prisma.SortOrder;
  documentUrl?: Prisma.SortOrder;
  Remarks?: Prisma.SortOrder;
  assignedVehicleId?: Prisma.SortOrder;
  uploadedAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type CustomerVehicleDocumentsCreateNestedManyWithoutAssignedVehiclesInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput,
          Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput
        >
      | Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput[]
      | Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput[];
    connectOrCreate?:
      | Prisma.CustomerVehicleDocumentsCreateOrConnectWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsCreateOrConnectWithoutAssignedVehiclesInput[];
    createMany?: Prisma.CustomerVehicleDocumentsCreateManyAssignedVehiclesInputEnvelope;
    connect?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
  };

export type CustomerVehicleDocumentsUncheckedCreateNestedManyWithoutAssignedVehiclesInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput,
          Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput
        >
      | Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput[]
      | Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput[];
    connectOrCreate?:
      | Prisma.CustomerVehicleDocumentsCreateOrConnectWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsCreateOrConnectWithoutAssignedVehiclesInput[];
    createMany?: Prisma.CustomerVehicleDocumentsCreateManyAssignedVehiclesInputEnvelope;
    connect?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
  };

export type CustomerVehicleDocumentsUpdateManyWithoutAssignedVehiclesNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput,
          Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput
        >
      | Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput[]
      | Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput[];
    connectOrCreate?:
      | Prisma.CustomerVehicleDocumentsCreateOrConnectWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsCreateOrConnectWithoutAssignedVehiclesInput[];
    upsert?:
      | Prisma.CustomerVehicleDocumentsUpsertWithWhereUniqueWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsUpsertWithWhereUniqueWithoutAssignedVehiclesInput[];
    createMany?: Prisma.CustomerVehicleDocumentsCreateManyAssignedVehiclesInputEnvelope;
    set?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
    disconnect?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
    delete?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
    connect?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
    update?:
      | Prisma.CustomerVehicleDocumentsUpdateWithWhereUniqueWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsUpdateWithWhereUniqueWithoutAssignedVehiclesInput[];
    updateMany?:
      | Prisma.CustomerVehicleDocumentsUpdateManyWithWhereWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsUpdateManyWithWhereWithoutAssignedVehiclesInput[];
    deleteMany?:
      | Prisma.CustomerVehicleDocumentsScalarWhereInput
      | Prisma.CustomerVehicleDocumentsScalarWhereInput[];
  };

export type CustomerVehicleDocumentsUncheckedUpdateManyWithoutAssignedVehiclesNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput,
          Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput
        >
      | Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput[]
      | Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput[];
    connectOrCreate?:
      | Prisma.CustomerVehicleDocumentsCreateOrConnectWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsCreateOrConnectWithoutAssignedVehiclesInput[];
    upsert?:
      | Prisma.CustomerVehicleDocumentsUpsertWithWhereUniqueWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsUpsertWithWhereUniqueWithoutAssignedVehiclesInput[];
    createMany?: Prisma.CustomerVehicleDocumentsCreateManyAssignedVehiclesInputEnvelope;
    set?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
    disconnect?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
    delete?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
    connect?:
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput
      | Prisma.CustomerVehicleDocumentsWhereUniqueInput[];
    update?:
      | Prisma.CustomerVehicleDocumentsUpdateWithWhereUniqueWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsUpdateWithWhereUniqueWithoutAssignedVehiclesInput[];
    updateMany?:
      | Prisma.CustomerVehicleDocumentsUpdateManyWithWhereWithoutAssignedVehiclesInput
      | Prisma.CustomerVehicleDocumentsUpdateManyWithWhereWithoutAssignedVehiclesInput[];
    deleteMany?:
      | Prisma.CustomerVehicleDocumentsScalarWhereInput
      | Prisma.CustomerVehicleDocumentsScalarWhereInput[];
  };

export type EnumCustomerVehicleDocumentTypeFieldUpdateOperationsInput = {
  set?: $Enums.CustomerVehicleDocumentType;
};

export type CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput = {
  id?: string;
  documentType: $Enums.CustomerVehicleDocumentType;
  documentUrl: string;
  Remarks?: string | null;
  uploadedAt?: Date | string;
  updatedAt?: Date | string;
};

export type CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput =
  {
    id?: string;
    documentType: $Enums.CustomerVehicleDocumentType;
    documentUrl: string;
    Remarks?: string | null;
    uploadedAt?: Date | string;
    updatedAt?: Date | string;
  };

export type CustomerVehicleDocumentsCreateOrConnectWithoutAssignedVehiclesInput =
  {
    where: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput,
      Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput
    >;
  };

export type CustomerVehicleDocumentsCreateManyAssignedVehiclesInputEnvelope = {
  data:
    | Prisma.CustomerVehicleDocumentsCreateManyAssignedVehiclesInput
    | Prisma.CustomerVehicleDocumentsCreateManyAssignedVehiclesInput[];
  skipDuplicates?: boolean;
};

export type CustomerVehicleDocumentsUpsertWithWhereUniqueWithoutAssignedVehiclesInput =
  {
    where: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
    update: Prisma.XOR<
      Prisma.CustomerVehicleDocumentsUpdateWithoutAssignedVehiclesInput,
      Prisma.CustomerVehicleDocumentsUncheckedUpdateWithoutAssignedVehiclesInput
    >;
    create: Prisma.XOR<
      Prisma.CustomerVehicleDocumentsCreateWithoutAssignedVehiclesInput,
      Prisma.CustomerVehicleDocumentsUncheckedCreateWithoutAssignedVehiclesInput
    >;
  };

export type CustomerVehicleDocumentsUpdateWithWhereUniqueWithoutAssignedVehiclesInput =
  {
    where: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
    data: Prisma.XOR<
      Prisma.CustomerVehicleDocumentsUpdateWithoutAssignedVehiclesInput,
      Prisma.CustomerVehicleDocumentsUncheckedUpdateWithoutAssignedVehiclesInput
    >;
  };

export type CustomerVehicleDocumentsUpdateManyWithWhereWithoutAssignedVehiclesInput =
  {
    where: Prisma.CustomerVehicleDocumentsScalarWhereInput;
    data: Prisma.XOR<
      Prisma.CustomerVehicleDocumentsUpdateManyMutationInput,
      Prisma.CustomerVehicleDocumentsUncheckedUpdateManyWithoutAssignedVehiclesInput
    >;
  };

export type CustomerVehicleDocumentsScalarWhereInput = {
  AND?:
    | Prisma.CustomerVehicleDocumentsScalarWhereInput
    | Prisma.CustomerVehicleDocumentsScalarWhereInput[];
  OR?: Prisma.CustomerVehicleDocumentsScalarWhereInput[];
  NOT?:
    | Prisma.CustomerVehicleDocumentsScalarWhereInput
    | Prisma.CustomerVehicleDocumentsScalarWhereInput[];
  id?: Prisma.UuidFilter<'CustomerVehicleDocuments'> | string;
  documentType?:
    | Prisma.EnumCustomerVehicleDocumentTypeFilter<'CustomerVehicleDocuments'>
    | $Enums.CustomerVehicleDocumentType;
  documentUrl?: Prisma.StringFilter<'CustomerVehicleDocuments'> | string;
  Remarks?:
    | Prisma.StringNullableFilter<'CustomerVehicleDocuments'>
    | string
    | null;
  assignedVehicleId?: Prisma.UuidFilter<'CustomerVehicleDocuments'> | string;
  uploadedAt?:
    | Prisma.DateTimeFilter<'CustomerVehicleDocuments'>
    | Date
    | string;
  updatedAt?: Prisma.DateTimeFilter<'CustomerVehicleDocuments'> | Date | string;
};

export type CustomerVehicleDocumentsCreateManyAssignedVehiclesInput = {
  id?: string;
  documentType: $Enums.CustomerVehicleDocumentType;
  documentUrl: string;
  Remarks?: string | null;
  uploadedAt?: Date | string;
  updatedAt?: Date | string;
};

export type CustomerVehicleDocumentsUpdateWithoutAssignedVehiclesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentType?:
    | Prisma.EnumCustomerVehicleDocumentTypeFieldUpdateOperationsInput
    | $Enums.CustomerVehicleDocumentType;
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  Remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerVehicleDocumentsUncheckedUpdateWithoutAssignedVehiclesInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    documentType?:
      | Prisma.EnumCustomerVehicleDocumentTypeFieldUpdateOperationsInput
      | $Enums.CustomerVehicleDocumentType;
    documentUrl?: Prisma.StringFieldUpdateOperationsInput | string;
    Remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  };

export type CustomerVehicleDocumentsUncheckedUpdateManyWithoutAssignedVehiclesInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    documentType?:
      | Prisma.EnumCustomerVehicleDocumentTypeFieldUpdateOperationsInput
      | $Enums.CustomerVehicleDocumentType;
    documentUrl?: Prisma.StringFieldUpdateOperationsInput | string;
    Remarks?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
    uploadedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  };

export type CustomerVehicleDocumentsSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    documentType?: boolean;
    documentUrl?: boolean;
    Remarks?: boolean;
    assignedVehicleId?: boolean;
    uploadedAt?: boolean;
    updatedAt?: boolean;
    assignedVehicles?: boolean | Prisma.AssignedVehiclesDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['customerVehicleDocuments']
>;

export type CustomerVehicleDocumentsSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    documentType?: boolean;
    documentUrl?: boolean;
    Remarks?: boolean;
    assignedVehicleId?: boolean;
    uploadedAt?: boolean;
    updatedAt?: boolean;
    assignedVehicles?: boolean | Prisma.AssignedVehiclesDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['customerVehicleDocuments']
>;

export type CustomerVehicleDocumentsSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    documentType?: boolean;
    documentUrl?: boolean;
    Remarks?: boolean;
    assignedVehicleId?: boolean;
    uploadedAt?: boolean;
    updatedAt?: boolean;
    assignedVehicles?: boolean | Prisma.AssignedVehiclesDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['customerVehicleDocuments']
>;

export type CustomerVehicleDocumentsSelectScalar = {
  id?: boolean;
  documentType?: boolean;
  documentUrl?: boolean;
  Remarks?: boolean;
  assignedVehicleId?: boolean;
  uploadedAt?: boolean;
  updatedAt?: boolean;
};

export type CustomerVehicleDocumentsOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'documentType'
  | 'documentUrl'
  | 'Remarks'
  | 'assignedVehicleId'
  | 'uploadedAt'
  | 'updatedAt',
  ExtArgs['result']['customerVehicleDocuments']
>;
export type CustomerVehicleDocumentsInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  assignedVehicles?: boolean | Prisma.AssignedVehiclesDefaultArgs<ExtArgs>;
};
export type CustomerVehicleDocumentsIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  assignedVehicles?: boolean | Prisma.AssignedVehiclesDefaultArgs<ExtArgs>;
};
export type CustomerVehicleDocumentsIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  assignedVehicles?: boolean | Prisma.AssignedVehiclesDefaultArgs<ExtArgs>;
};

export type $CustomerVehicleDocumentsPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'CustomerVehicleDocuments';
  objects: {
    assignedVehicles: Prisma.$AssignedVehiclesPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      documentType: $Enums.CustomerVehicleDocumentType;
      documentUrl: string;
      Remarks: string | null;
      assignedVehicleId: string;
      uploadedAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['customerVehicleDocuments']
  >;
  composites: {};
};

export type CustomerVehicleDocumentsGetPayload<
  S extends boolean | null | undefined | CustomerVehicleDocumentsDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CustomerVehicleDocumentsPayload, S>;

export type CustomerVehicleDocumentsCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  CustomerVehicleDocumentsFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: CustomerVehicleDocumentsCountAggregateInputType | true;
};

export interface CustomerVehicleDocumentsDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['CustomerVehicleDocuments'];
    meta: { name: 'CustomerVehicleDocuments' };
  };
  /**
   * Find zero or one CustomerVehicleDocuments that matches the filter.
   * @param {CustomerVehicleDocumentsFindUniqueArgs} args - Arguments to find a CustomerVehicleDocuments
   * @example
   * // Get one CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CustomerVehicleDocumentsFindUniqueArgs>(
    args: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsFindUniqueArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerVehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CustomerVehicleDocuments that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CustomerVehicleDocumentsFindUniqueOrThrowArgs} args - Arguments to find a CustomerVehicleDocuments
   * @example
   * // Get one CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CustomerVehicleDocumentsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerVehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CustomerVehicleDocuments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerVehicleDocumentsFindFirstArgs} args - Arguments to find a CustomerVehicleDocuments
   * @example
   * // Get one CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CustomerVehicleDocumentsFindFirstArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsFindFirstArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerVehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CustomerVehicleDocuments that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerVehicleDocumentsFindFirstOrThrowArgs} args - Arguments to find a CustomerVehicleDocuments
   * @example
   * // Get one CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CustomerVehicleDocumentsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerVehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CustomerVehicleDocuments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerVehicleDocumentsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.findMany()
   *
   * // Get first 10 CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const customerVehicleDocumentsWithIdOnly = await prisma.customerVehicleDocuments.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CustomerVehicleDocumentsFindManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsFindManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a CustomerVehicleDocuments.
   * @param {CustomerVehicleDocumentsCreateArgs} args - Arguments to create a CustomerVehicleDocuments.
   * @example
   * // Create one CustomerVehicleDocuments
   * const CustomerVehicleDocuments = await prisma.customerVehicleDocuments.create({
   *   data: {
   *     // ... data to create a CustomerVehicleDocuments
   *   }
   * })
   *
   */
  create<T extends CustomerVehicleDocumentsCreateArgs>(
    args: Prisma.SelectSubset<T, CustomerVehicleDocumentsCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerVehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CustomerVehicleDocuments.
   * @param {CustomerVehicleDocumentsCreateManyArgs} args - Arguments to create many CustomerVehicleDocuments.
   * @example
   * // Create many CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CustomerVehicleDocumentsCreateManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsCreateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CustomerVehicleDocuments and returns the data saved in the database.
   * @param {CustomerVehicleDocumentsCreateManyAndReturnArgs} args - Arguments to create many CustomerVehicleDocuments.
   * @example
   * // Create many CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CustomerVehicleDocuments and only return the `id`
   * const customerVehicleDocumentsWithIdOnly = await prisma.customerVehicleDocuments.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<
    T extends CustomerVehicleDocumentsCreateManyAndReturnArgs,
  >(
    args?: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CustomerVehicleDocuments.
   * @param {CustomerVehicleDocumentsDeleteArgs} args - Arguments to delete one CustomerVehicleDocuments.
   * @example
   * // Delete one CustomerVehicleDocuments
   * const CustomerVehicleDocuments = await prisma.customerVehicleDocuments.delete({
   *   where: {
   *     // ... filter to delete one CustomerVehicleDocuments
   *   }
   * })
   *
   */
  delete<T extends CustomerVehicleDocumentsDeleteArgs>(
    args: Prisma.SelectSubset<T, CustomerVehicleDocumentsDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerVehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CustomerVehicleDocuments.
   * @param {CustomerVehicleDocumentsUpdateArgs} args - Arguments to update one CustomerVehicleDocuments.
   * @example
   * // Update one CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CustomerVehicleDocumentsUpdateArgs>(
    args: Prisma.SelectSubset<T, CustomerVehicleDocumentsUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerVehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CustomerVehicleDocuments.
   * @param {CustomerVehicleDocumentsDeleteManyArgs} args - Arguments to filter CustomerVehicleDocuments to delete.
   * @example
   * // Delete a few CustomerVehicleDocuments
   * const { count } = await prisma.customerVehicleDocuments.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CustomerVehicleDocumentsDeleteManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsDeleteManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CustomerVehicleDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerVehicleDocumentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CustomerVehicleDocumentsUpdateManyArgs>(
    args: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsUpdateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CustomerVehicleDocuments and returns the data updated in the database.
   * @param {CustomerVehicleDocumentsUpdateManyAndReturnArgs} args - Arguments to update many CustomerVehicleDocuments.
   * @example
   * // Update many CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CustomerVehicleDocuments and only return the `id`
   * const customerVehicleDocumentsWithIdOnly = await prisma.customerVehicleDocuments.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<
    T extends CustomerVehicleDocumentsUpdateManyAndReturnArgs,
  >(
    args: Prisma.SelectSubset<
      T,
      CustomerVehicleDocumentsUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CustomerVehicleDocuments.
   * @param {CustomerVehicleDocumentsUpsertArgs} args - Arguments to update or create a CustomerVehicleDocuments.
   * @example
   * // Update or create a CustomerVehicleDocuments
   * const customerVehicleDocuments = await prisma.customerVehicleDocuments.upsert({
   *   create: {
   *     // ... data to create a CustomerVehicleDocuments
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CustomerVehicleDocuments we want to update
   *   }
   * })
   */
  upsert<T extends CustomerVehicleDocumentsUpsertArgs>(
    args: Prisma.SelectSubset<T, CustomerVehicleDocumentsUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerVehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CustomerVehicleDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerVehicleDocumentsCountArgs} args - Arguments to filter CustomerVehicleDocuments to count.
   * @example
   * // Count the number of CustomerVehicleDocuments
   * const count = await prisma.customerVehicleDocuments.count({
   *   where: {
   *     // ... the filter for the CustomerVehicleDocuments we want to count
   *   }
   * })
   **/
  count<T extends CustomerVehicleDocumentsCountArgs>(
    args?: Prisma.Subset<T, CustomerVehicleDocumentsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            CustomerVehicleDocumentsCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CustomerVehicleDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerVehicleDocumentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CustomerVehicleDocumentsAggregateArgs>(
    args: Prisma.Subset<T, CustomerVehicleDocumentsAggregateArgs>,
  ): Prisma.PrismaPromise<GetCustomerVehicleDocumentsAggregateType<T>>;

  /**
   * Group by CustomerVehicleDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerVehicleDocumentsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CustomerVehicleDocumentsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CustomerVehicleDocumentsGroupByArgs['orderBy'] }
      : { orderBy?: CustomerVehicleDocumentsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      CustomerVehicleDocumentsGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetCustomerVehicleDocumentsGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CustomerVehicleDocuments model
   */
  readonly fields: CustomerVehicleDocumentsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CustomerVehicleDocuments.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CustomerVehicleDocumentsClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  assignedVehicles<T extends Prisma.AssignedVehiclesDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AssignedVehiclesDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignedVehiclesClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AssignedVehiclesPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CustomerVehicleDocuments model
 */
export interface CustomerVehicleDocumentsFieldRefs {
  readonly id: Prisma.FieldRef<'CustomerVehicleDocuments', 'String'>;
  readonly documentType: Prisma.FieldRef<
    'CustomerVehicleDocuments',
    'CustomerVehicleDocumentType'
  >;
  readonly documentUrl: Prisma.FieldRef<'CustomerVehicleDocuments', 'String'>;
  readonly Remarks: Prisma.FieldRef<'CustomerVehicleDocuments', 'String'>;
  readonly assignedVehicleId: Prisma.FieldRef<
    'CustomerVehicleDocuments',
    'String'
  >;
  readonly uploadedAt: Prisma.FieldRef<'CustomerVehicleDocuments', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'CustomerVehicleDocuments', 'DateTime'>;
}

// Custom InputTypes
/**
 * CustomerVehicleDocuments findUnique
 */
export type CustomerVehicleDocumentsFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerVehicleDocuments to fetch.
   */
  where: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
};

/**
 * CustomerVehicleDocuments findUniqueOrThrow
 */
export type CustomerVehicleDocumentsFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerVehicleDocuments to fetch.
   */
  where: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
};

/**
 * CustomerVehicleDocuments findFirst
 */
export type CustomerVehicleDocumentsFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerVehicleDocuments to fetch.
   */
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerVehicleDocuments to fetch.
   */
  orderBy?:
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CustomerVehicleDocuments.
   */
  cursor?: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerVehicleDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerVehicleDocuments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CustomerVehicleDocuments.
   */
  distinct?:
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum[];
};

/**
 * CustomerVehicleDocuments findFirstOrThrow
 */
export type CustomerVehicleDocumentsFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerVehicleDocuments to fetch.
   */
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerVehicleDocuments to fetch.
   */
  orderBy?:
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CustomerVehicleDocuments.
   */
  cursor?: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerVehicleDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerVehicleDocuments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CustomerVehicleDocuments.
   */
  distinct?:
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum[];
};

/**
 * CustomerVehicleDocuments findMany
 */
export type CustomerVehicleDocumentsFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerVehicleDocuments to fetch.
   */
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerVehicleDocuments to fetch.
   */
  orderBy?:
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CustomerVehicleDocuments.
   */
  cursor?: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerVehicleDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerVehicleDocuments.
   */
  skip?: number;
  distinct?:
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum[];
};

/**
 * CustomerVehicleDocuments create
 */
export type CustomerVehicleDocumentsCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  /**
   * The data needed to create a CustomerVehicleDocuments.
   */
  data: Prisma.XOR<
    Prisma.CustomerVehicleDocumentsCreateInput,
    Prisma.CustomerVehicleDocumentsUncheckedCreateInput
  >;
};

/**
 * CustomerVehicleDocuments createMany
 */
export type CustomerVehicleDocumentsCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many CustomerVehicleDocuments.
   */
  data:
    | Prisma.CustomerVehicleDocumentsCreateManyInput
    | Prisma.CustomerVehicleDocumentsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CustomerVehicleDocuments createManyAndReturn
 */
export type CustomerVehicleDocumentsCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * The data used to create many CustomerVehicleDocuments.
   */
  data:
    | Prisma.CustomerVehicleDocumentsCreateManyInput
    | Prisma.CustomerVehicleDocumentsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CustomerVehicleDocuments update
 */
export type CustomerVehicleDocumentsUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  /**
   * The data needed to update a CustomerVehicleDocuments.
   */
  data: Prisma.XOR<
    Prisma.CustomerVehicleDocumentsUpdateInput,
    Prisma.CustomerVehicleDocumentsUncheckedUpdateInput
  >;
  /**
   * Choose, which CustomerVehicleDocuments to update.
   */
  where: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
};

/**
 * CustomerVehicleDocuments updateMany
 */
export type CustomerVehicleDocumentsUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update CustomerVehicleDocuments.
   */
  data: Prisma.XOR<
    Prisma.CustomerVehicleDocumentsUpdateManyMutationInput,
    Prisma.CustomerVehicleDocumentsUncheckedUpdateManyInput
  >;
  /**
   * Filter which CustomerVehicleDocuments to update
   */
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
  /**
   * Limit how many CustomerVehicleDocuments to update.
   */
  limit?: number;
};

/**
 * CustomerVehicleDocuments updateManyAndReturn
 */
export type CustomerVehicleDocumentsUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * The data used to update CustomerVehicleDocuments.
   */
  data: Prisma.XOR<
    Prisma.CustomerVehicleDocumentsUpdateManyMutationInput,
    Prisma.CustomerVehicleDocumentsUncheckedUpdateManyInput
  >;
  /**
   * Filter which CustomerVehicleDocuments to update
   */
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
  /**
   * Limit how many CustomerVehicleDocuments to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CustomerVehicleDocuments upsert
 */
export type CustomerVehicleDocumentsUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  /**
   * The filter to search for the CustomerVehicleDocuments to update in case it exists.
   */
  where: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
  /**
   * In case the CustomerVehicleDocuments found by the `where` argument doesn't exist, create a new CustomerVehicleDocuments with this data.
   */
  create: Prisma.XOR<
    Prisma.CustomerVehicleDocumentsCreateInput,
    Prisma.CustomerVehicleDocumentsUncheckedCreateInput
  >;
  /**
   * In case the CustomerVehicleDocuments was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CustomerVehicleDocumentsUpdateInput,
    Prisma.CustomerVehicleDocumentsUncheckedUpdateInput
  >;
};

/**
 * CustomerVehicleDocuments delete
 */
export type CustomerVehicleDocumentsDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter which CustomerVehicleDocuments to delete.
   */
  where: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
};

/**
 * CustomerVehicleDocuments deleteMany
 */
export type CustomerVehicleDocumentsDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CustomerVehicleDocuments to delete
   */
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
  /**
   * Limit how many CustomerVehicleDocuments to delete.
   */
  limit?: number;
};

/**
 * CustomerVehicleDocuments without action
 */
export type CustomerVehicleDocumentsDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
};
