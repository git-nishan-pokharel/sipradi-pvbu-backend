/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AccessPolicy` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model AccessPolicy
 *
 */
export type AccessPolicyModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AccessPolicyPayload>;

export type AggregateAccessPolicy = {
  _count: AccessPolicyCountAggregateOutputType | null;
  _avg: AccessPolicyAvgAggregateOutputType | null;
  _sum: AccessPolicySumAggregateOutputType | null;
  _min: AccessPolicyMinAggregateOutputType | null;
  _max: AccessPolicyMaxAggregateOutputType | null;
};

export type AccessPolicyAvgAggregateOutputType = {
  id: number | null;
};

export type AccessPolicySumAggregateOutputType = {
  id: number | null;
};

export type AccessPolicyMinAggregateOutputType = {
  id: number | null;
  title: string | null;
  description: string | null;
  isEnabled: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AccessPolicyMaxAggregateOutputType = {
  id: number | null;
  title: string | null;
  description: string | null;
  isEnabled: boolean | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AccessPolicyCountAggregateOutputType = {
  id: number;
  title: number;
  description: number;
  isEnabled: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type AccessPolicyAvgAggregateInputType = {
  id?: true;
};

export type AccessPolicySumAggregateInputType = {
  id?: true;
};

export type AccessPolicyMinAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  isEnabled?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AccessPolicyMaxAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  isEnabled?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AccessPolicyCountAggregateInputType = {
  id?: true;
  title?: true;
  description?: true;
  isEnabled?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type AccessPolicyAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AccessPolicy to aggregate.
   */
  where?: Prisma.AccessPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessPolicies to fetch.
   */
  orderBy?:
    | Prisma.AccessPolicyOrderByWithRelationInput
    | Prisma.AccessPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AccessPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessPolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AccessPolicies
   **/
  _count?: true | AccessPolicyCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AccessPolicyAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AccessPolicySumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AccessPolicyMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AccessPolicyMaxAggregateInputType;
};

export type GetAccessPolicyAggregateType<T extends AccessPolicyAggregateArgs> =
  {
    [P in keyof T & keyof AggregateAccessPolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateAccessPolicy[P]>
      : Prisma.GetScalarType<T[P], AggregateAccessPolicy[P]>;
  };

export type AccessPolicyGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AccessPolicyWhereInput;
  orderBy?:
    | Prisma.AccessPolicyOrderByWithAggregationInput
    | Prisma.AccessPolicyOrderByWithAggregationInput[];
  by: Prisma.AccessPolicyScalarFieldEnum[] | Prisma.AccessPolicyScalarFieldEnum;
  having?: Prisma.AccessPolicyScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AccessPolicyCountAggregateInputType | true;
  _avg?: AccessPolicyAvgAggregateInputType;
  _sum?: AccessPolicySumAggregateInputType;
  _min?: AccessPolicyMinAggregateInputType;
  _max?: AccessPolicyMaxAggregateInputType;
};

export type AccessPolicyGroupByOutputType = {
  id: number;
  title: string;
  description: string | null;
  isEnabled: boolean;
  createdAt: Date;
  updatedAt: Date;
  _count: AccessPolicyCountAggregateOutputType | null;
  _avg: AccessPolicyAvgAggregateOutputType | null;
  _sum: AccessPolicySumAggregateOutputType | null;
  _min: AccessPolicyMinAggregateOutputType | null;
  _max: AccessPolicyMaxAggregateOutputType | null;
};

type GetAccessPolicyGroupByPayload<T extends AccessPolicyGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AccessPolicyGroupByOutputType, T['by']> & {
        [P in keyof T & keyof AccessPolicyGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccessPolicyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccessPolicyGroupByOutputType[P]>;
      }
    >
  >;

export type AccessPolicyWhereInput = {
  AND?: Prisma.AccessPolicyWhereInput | Prisma.AccessPolicyWhereInput[];
  OR?: Prisma.AccessPolicyWhereInput[];
  NOT?: Prisma.AccessPolicyWhereInput | Prisma.AccessPolicyWhereInput[];
  id?: Prisma.IntFilter<'AccessPolicy'> | number;
  title?: Prisma.StringFilter<'AccessPolicy'> | string;
  description?: Prisma.StringNullableFilter<'AccessPolicy'> | string | null;
  isEnabled?: Prisma.BoolFilter<'AccessPolicy'> | boolean;
  createdAt?: Prisma.DateTimeFilter<'AccessPolicy'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'AccessPolicy'> | Date | string;
  rules?: Prisma.AccessRulesListRelationFilter;
  user?: Prisma.UserListRelationFilter;
};

export type AccessPolicyOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  rules?: Prisma.AccessRulesOrderByRelationAggregateInput;
  user?: Prisma.UserOrderByRelationAggregateInput;
};

export type AccessPolicyWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    title?: string;
    AND?: Prisma.AccessPolicyWhereInput | Prisma.AccessPolicyWhereInput[];
    OR?: Prisma.AccessPolicyWhereInput[];
    NOT?: Prisma.AccessPolicyWhereInput | Prisma.AccessPolicyWhereInput[];
    description?: Prisma.StringNullableFilter<'AccessPolicy'> | string | null;
    isEnabled?: Prisma.BoolFilter<'AccessPolicy'> | boolean;
    createdAt?: Prisma.DateTimeFilter<'AccessPolicy'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'AccessPolicy'> | Date | string;
    rules?: Prisma.AccessRulesListRelationFilter;
    user?: Prisma.UserListRelationFilter;
  },
  'id' | 'title'
>;

export type AccessPolicyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.AccessPolicyCountOrderByAggregateInput;
  _avg?: Prisma.AccessPolicyAvgOrderByAggregateInput;
  _max?: Prisma.AccessPolicyMaxOrderByAggregateInput;
  _min?: Prisma.AccessPolicyMinOrderByAggregateInput;
  _sum?: Prisma.AccessPolicySumOrderByAggregateInput;
};

export type AccessPolicyScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AccessPolicyScalarWhereWithAggregatesInput
    | Prisma.AccessPolicyScalarWhereWithAggregatesInput[];
  OR?: Prisma.AccessPolicyScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AccessPolicyScalarWhereWithAggregatesInput
    | Prisma.AccessPolicyScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'AccessPolicy'> | number;
  title?: Prisma.StringWithAggregatesFilter<'AccessPolicy'> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'AccessPolicy'>
    | string
    | null;
  isEnabled?: Prisma.BoolWithAggregatesFilter<'AccessPolicy'> | boolean;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'AccessPolicy'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'AccessPolicy'>
    | Date
    | string;
};

export type AccessPolicyCreateInput = {
  title: string;
  description?: string | null;
  isEnabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  rules?: Prisma.AccessRulesCreateNestedManyWithoutPolicyInput;
  user?: Prisma.UserCreateNestedManyWithoutAccessInput;
};

export type AccessPolicyUncheckedCreateInput = {
  id?: number;
  title: string;
  description?: string | null;
  isEnabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  rules?: Prisma.AccessRulesUncheckedCreateNestedManyWithoutPolicyInput;
  user?: Prisma.UserUncheckedCreateNestedManyWithoutAccessInput;
};

export type AccessPolicyUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  rules?: Prisma.AccessRulesUpdateManyWithoutPolicyNestedInput;
  user?: Prisma.UserUpdateManyWithoutAccessNestedInput;
};

export type AccessPolicyUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  rules?: Prisma.AccessRulesUncheckedUpdateManyWithoutPolicyNestedInput;
  user?: Prisma.UserUncheckedUpdateManyWithoutAccessNestedInput;
};

export type AccessPolicyCreateManyInput = {
  id?: number;
  title: string;
  description?: string | null;
  isEnabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccessPolicyUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessPolicyUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessPolicyNullableScalarRelationFilter = {
  is?: Prisma.AccessPolicyWhereInput | null;
  isNot?: Prisma.AccessPolicyWhereInput | null;
};

export type AccessPolicyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccessPolicyAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type AccessPolicyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccessPolicyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  isEnabled?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccessPolicySumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type AccessPolicyScalarRelationFilter = {
  is?: Prisma.AccessPolicyWhereInput;
  isNot?: Prisma.AccessPolicyWhereInput;
};

export type AccessPolicyCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<
    Prisma.AccessPolicyCreateWithoutUserInput,
    Prisma.AccessPolicyUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.AccessPolicyCreateOrConnectWithoutUserInput;
  connect?: Prisma.AccessPolicyWhereUniqueInput;
};

export type AccessPolicyUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.AccessPolicyCreateWithoutUserInput,
    Prisma.AccessPolicyUncheckedCreateWithoutUserInput
  >;
  connectOrCreate?: Prisma.AccessPolicyCreateOrConnectWithoutUserInput;
  upsert?: Prisma.AccessPolicyUpsertWithoutUserInput;
  disconnect?: Prisma.AccessPolicyWhereInput | boolean;
  delete?: Prisma.AccessPolicyWhereInput | boolean;
  connect?: Prisma.AccessPolicyWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AccessPolicyUpdateToOneWithWhereWithoutUserInput,
      Prisma.AccessPolicyUpdateWithoutUserInput
    >,
    Prisma.AccessPolicyUncheckedUpdateWithoutUserInput
  >;
};

export type AccessPolicyCreateNestedOneWithoutRulesInput = {
  create?: Prisma.XOR<
    Prisma.AccessPolicyCreateWithoutRulesInput,
    Prisma.AccessPolicyUncheckedCreateWithoutRulesInput
  >;
  connectOrCreate?: Prisma.AccessPolicyCreateOrConnectWithoutRulesInput;
  connect?: Prisma.AccessPolicyWhereUniqueInput;
};

export type AccessPolicyUpdateOneRequiredWithoutRulesNestedInput = {
  create?: Prisma.XOR<
    Prisma.AccessPolicyCreateWithoutRulesInput,
    Prisma.AccessPolicyUncheckedCreateWithoutRulesInput
  >;
  connectOrCreate?: Prisma.AccessPolicyCreateOrConnectWithoutRulesInput;
  upsert?: Prisma.AccessPolicyUpsertWithoutRulesInput;
  connect?: Prisma.AccessPolicyWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.AccessPolicyUpdateToOneWithWhereWithoutRulesInput,
      Prisma.AccessPolicyUpdateWithoutRulesInput
    >,
    Prisma.AccessPolicyUncheckedUpdateWithoutRulesInput
  >;
};

export type AccessPolicyCreateWithoutUserInput = {
  title: string;
  description?: string | null;
  isEnabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  rules?: Prisma.AccessRulesCreateNestedManyWithoutPolicyInput;
};

export type AccessPolicyUncheckedCreateWithoutUserInput = {
  id?: number;
  title: string;
  description?: string | null;
  isEnabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  rules?: Prisma.AccessRulesUncheckedCreateNestedManyWithoutPolicyInput;
};

export type AccessPolicyCreateOrConnectWithoutUserInput = {
  where: Prisma.AccessPolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccessPolicyCreateWithoutUserInput,
    Prisma.AccessPolicyUncheckedCreateWithoutUserInput
  >;
};

export type AccessPolicyUpsertWithoutUserInput = {
  update: Prisma.XOR<
    Prisma.AccessPolicyUpdateWithoutUserInput,
    Prisma.AccessPolicyUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.AccessPolicyCreateWithoutUserInput,
    Prisma.AccessPolicyUncheckedCreateWithoutUserInput
  >;
  where?: Prisma.AccessPolicyWhereInput;
};

export type AccessPolicyUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.AccessPolicyWhereInput;
  data: Prisma.XOR<
    Prisma.AccessPolicyUpdateWithoutUserInput,
    Prisma.AccessPolicyUncheckedUpdateWithoutUserInput
  >;
};

export type AccessPolicyUpdateWithoutUserInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  rules?: Prisma.AccessRulesUpdateManyWithoutPolicyNestedInput;
};

export type AccessPolicyUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  rules?: Prisma.AccessRulesUncheckedUpdateManyWithoutPolicyNestedInput;
};

export type AccessPolicyCreateWithoutRulesInput = {
  title: string;
  description?: string | null;
  isEnabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user?: Prisma.UserCreateNestedManyWithoutAccessInput;
};

export type AccessPolicyUncheckedCreateWithoutRulesInput = {
  id?: number;
  title: string;
  description?: string | null;
  isEnabled?: boolean;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user?: Prisma.UserUncheckedCreateNestedManyWithoutAccessInput;
};

export type AccessPolicyCreateOrConnectWithoutRulesInput = {
  where: Prisma.AccessPolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccessPolicyCreateWithoutRulesInput,
    Prisma.AccessPolicyUncheckedCreateWithoutRulesInput
  >;
};

export type AccessPolicyUpsertWithoutRulesInput = {
  update: Prisma.XOR<
    Prisma.AccessPolicyUpdateWithoutRulesInput,
    Prisma.AccessPolicyUncheckedUpdateWithoutRulesInput
  >;
  create: Prisma.XOR<
    Prisma.AccessPolicyCreateWithoutRulesInput,
    Prisma.AccessPolicyUncheckedCreateWithoutRulesInput
  >;
  where?: Prisma.AccessPolicyWhereInput;
};

export type AccessPolicyUpdateToOneWithWhereWithoutRulesInput = {
  where?: Prisma.AccessPolicyWhereInput;
  data: Prisma.XOR<
    Prisma.AccessPolicyUpdateWithoutRulesInput,
    Prisma.AccessPolicyUncheckedUpdateWithoutRulesInput
  >;
};

export type AccessPolicyUpdateWithoutRulesInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateManyWithoutAccessNestedInput;
};

export type AccessPolicyUncheckedUpdateWithoutRulesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  isEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUncheckedUpdateManyWithoutAccessNestedInput;
};

/**
 * Count Type AccessPolicyCountOutputType
 */

export type AccessPolicyCountOutputType = {
  rules: number;
  user: number;
};

export type AccessPolicyCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  rules?: boolean | AccessPolicyCountOutputTypeCountRulesArgs;
  user?: boolean | AccessPolicyCountOutputTypeCountUserArgs;
};

/**
 * AccessPolicyCountOutputType without action
 */
export type AccessPolicyCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicyCountOutputType
   */
  select?: Prisma.AccessPolicyCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AccessPolicyCountOutputType without action
 */
export type AccessPolicyCountOutputTypeCountRulesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AccessRulesWhereInput;
};

/**
 * AccessPolicyCountOutputType without action
 */
export type AccessPolicyCountOutputTypeCountUserArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.UserWhereInput;
};

export type AccessPolicySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    isEnabled?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    rules?: boolean | Prisma.AccessPolicy$rulesArgs<ExtArgs>;
    user?: boolean | Prisma.AccessPolicy$userArgs<ExtArgs>;
    _count?: boolean | Prisma.AccessPolicyCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['accessPolicy']
>;

export type AccessPolicySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    isEnabled?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['accessPolicy']
>;

export type AccessPolicySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    description?: boolean;
    isEnabled?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['accessPolicy']
>;

export type AccessPolicySelectScalar = {
  id?: boolean;
  title?: boolean;
  description?: boolean;
  isEnabled?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type AccessPolicyOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'title' | 'description' | 'isEnabled' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['accessPolicy']
>;
export type AccessPolicyInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  rules?: boolean | Prisma.AccessPolicy$rulesArgs<ExtArgs>;
  user?: boolean | Prisma.AccessPolicy$userArgs<ExtArgs>;
  _count?: boolean | Prisma.AccessPolicyCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AccessPolicyIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type AccessPolicyIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $AccessPolicyPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'AccessPolicy';
  objects: {
    rules: Prisma.$AccessRulesPayload<ExtArgs>[];
    user: Prisma.$UserPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      title: string;
      description: string | null;
      isEnabled: boolean;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['accessPolicy']
  >;
  composites: {};
};

export type AccessPolicyGetPayload<
  S extends boolean | null | undefined | AccessPolicyDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AccessPolicyPayload, S>;

export type AccessPolicyCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AccessPolicyFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: AccessPolicyCountAggregateInputType | true;
};

export interface AccessPolicyDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['AccessPolicy'];
    meta: { name: 'AccessPolicy' };
  };
  /**
   * Find zero or one AccessPolicy that matches the filter.
   * @param {AccessPolicyFindUniqueArgs} args - Arguments to find a AccessPolicy
   * @example
   * // Get one AccessPolicy
   * const accessPolicy = await prisma.accessPolicy.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccessPolicyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AccessPolicyFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AccessPolicy that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccessPolicyFindUniqueOrThrowArgs} args - Arguments to find a AccessPolicy
   * @example
   * // Get one AccessPolicy
   * const accessPolicy = await prisma.accessPolicy.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccessPolicyFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AccessPolicyFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccessPolicy that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessPolicyFindFirstArgs} args - Arguments to find a AccessPolicy
   * @example
   * // Get one AccessPolicy
   * const accessPolicy = await prisma.accessPolicy.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccessPolicyFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AccessPolicyFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccessPolicy that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessPolicyFindFirstOrThrowArgs} args - Arguments to find a AccessPolicy
   * @example
   * // Get one AccessPolicy
   * const accessPolicy = await prisma.accessPolicy.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccessPolicyFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AccessPolicyFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AccessPolicies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessPolicyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccessPolicies
   * const accessPolicies = await prisma.accessPolicy.findMany()
   *
   * // Get first 10 AccessPolicies
   * const accessPolicies = await prisma.accessPolicy.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const accessPolicyWithIdOnly = await prisma.accessPolicy.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AccessPolicyFindManyArgs>(
    args?: Prisma.SelectSubset<T, AccessPolicyFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AccessPolicy.
   * @param {AccessPolicyCreateArgs} args - Arguments to create a AccessPolicy.
   * @example
   * // Create one AccessPolicy
   * const AccessPolicy = await prisma.accessPolicy.create({
   *   data: {
   *     // ... data to create a AccessPolicy
   *   }
   * })
   *
   */
  create<T extends AccessPolicyCreateArgs>(
    args: Prisma.SelectSubset<T, AccessPolicyCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AccessPolicies.
   * @param {AccessPolicyCreateManyArgs} args - Arguments to create many AccessPolicies.
   * @example
   * // Create many AccessPolicies
   * const accessPolicy = await prisma.accessPolicy.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AccessPolicyCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AccessPolicyCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AccessPolicies and returns the data saved in the database.
   * @param {AccessPolicyCreateManyAndReturnArgs} args - Arguments to create many AccessPolicies.
   * @example
   * // Create many AccessPolicies
   * const accessPolicy = await prisma.accessPolicy.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AccessPolicies and only return the `id`
   * const accessPolicyWithIdOnly = await prisma.accessPolicy.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AccessPolicyCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AccessPolicyCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AccessPolicy.
   * @param {AccessPolicyDeleteArgs} args - Arguments to delete one AccessPolicy.
   * @example
   * // Delete one AccessPolicy
   * const AccessPolicy = await prisma.accessPolicy.delete({
   *   where: {
   *     // ... filter to delete one AccessPolicy
   *   }
   * })
   *
   */
  delete<T extends AccessPolicyDeleteArgs>(
    args: Prisma.SelectSubset<T, AccessPolicyDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AccessPolicy.
   * @param {AccessPolicyUpdateArgs} args - Arguments to update one AccessPolicy.
   * @example
   * // Update one AccessPolicy
   * const accessPolicy = await prisma.accessPolicy.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AccessPolicyUpdateArgs>(
    args: Prisma.SelectSubset<T, AccessPolicyUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AccessPolicies.
   * @param {AccessPolicyDeleteManyArgs} args - Arguments to filter AccessPolicies to delete.
   * @example
   * // Delete a few AccessPolicies
   * const { count } = await prisma.accessPolicy.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AccessPolicyDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AccessPolicyDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccessPolicies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessPolicyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccessPolicies
   * const accessPolicy = await prisma.accessPolicy.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AccessPolicyUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AccessPolicyUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccessPolicies and returns the data updated in the database.
   * @param {AccessPolicyUpdateManyAndReturnArgs} args - Arguments to update many AccessPolicies.
   * @example
   * // Update many AccessPolicies
   * const accessPolicy = await prisma.accessPolicy.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AccessPolicies and only return the `id`
   * const accessPolicyWithIdOnly = await prisma.accessPolicy.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AccessPolicyUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AccessPolicyUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AccessPolicy.
   * @param {AccessPolicyUpsertArgs} args - Arguments to update or create a AccessPolicy.
   * @example
   * // Update or create a AccessPolicy
   * const accessPolicy = await prisma.accessPolicy.upsert({
   *   create: {
   *     // ... data to create a AccessPolicy
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccessPolicy we want to update
   *   }
   * })
   */
  upsert<T extends AccessPolicyUpsertArgs>(
    args: Prisma.SelectSubset<T, AccessPolicyUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessPolicyPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AccessPolicies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessPolicyCountArgs} args - Arguments to filter AccessPolicies to count.
   * @example
   * // Count the number of AccessPolicies
   * const count = await prisma.accessPolicy.count({
   *   where: {
   *     // ... the filter for the AccessPolicies we want to count
   *   }
   * })
   **/
  count<T extends AccessPolicyCountArgs>(
    args?: Prisma.Subset<T, AccessPolicyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            AccessPolicyCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AccessPolicy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessPolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AccessPolicyAggregateArgs>(
    args: Prisma.Subset<T, AccessPolicyAggregateArgs>,
  ): Prisma.PrismaPromise<GetAccessPolicyAggregateType<T>>;

  /**
   * Group by AccessPolicy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessPolicyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AccessPolicyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccessPolicyGroupByArgs['orderBy'] }
      : { orderBy?: AccessPolicyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, AccessPolicyGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetAccessPolicyGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AccessPolicy model
   */
  readonly fields: AccessPolicyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccessPolicy.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccessPolicyClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  rules<T extends Prisma.AccessPolicy$rulesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccessPolicy$rulesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AccessRulesPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  user<T extends Prisma.AccessPolicy$userArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccessPolicy$userArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AccessPolicy model
 */
export interface AccessPolicyFieldRefs {
  readonly id: Prisma.FieldRef<'AccessPolicy', 'Int'>;
  readonly title: Prisma.FieldRef<'AccessPolicy', 'String'>;
  readonly description: Prisma.FieldRef<'AccessPolicy', 'String'>;
  readonly isEnabled: Prisma.FieldRef<'AccessPolicy', 'Boolean'>;
  readonly createdAt: Prisma.FieldRef<'AccessPolicy', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'AccessPolicy', 'DateTime'>;
}

// Custom InputTypes
/**
 * AccessPolicy findUnique
 */
export type AccessPolicyFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which AccessPolicy to fetch.
   */
  where: Prisma.AccessPolicyWhereUniqueInput;
};

/**
 * AccessPolicy findUniqueOrThrow
 */
export type AccessPolicyFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which AccessPolicy to fetch.
   */
  where: Prisma.AccessPolicyWhereUniqueInput;
};

/**
 * AccessPolicy findFirst
 */
export type AccessPolicyFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which AccessPolicy to fetch.
   */
  where?: Prisma.AccessPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessPolicies to fetch.
   */
  orderBy?:
    | Prisma.AccessPolicyOrderByWithRelationInput
    | Prisma.AccessPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccessPolicies.
   */
  cursor?: Prisma.AccessPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessPolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccessPolicies.
   */
  distinct?:
    | Prisma.AccessPolicyScalarFieldEnum
    | Prisma.AccessPolicyScalarFieldEnum[];
};

/**
 * AccessPolicy findFirstOrThrow
 */
export type AccessPolicyFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which AccessPolicy to fetch.
   */
  where?: Prisma.AccessPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessPolicies to fetch.
   */
  orderBy?:
    | Prisma.AccessPolicyOrderByWithRelationInput
    | Prisma.AccessPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccessPolicies.
   */
  cursor?: Prisma.AccessPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessPolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccessPolicies.
   */
  distinct?:
    | Prisma.AccessPolicyScalarFieldEnum
    | Prisma.AccessPolicyScalarFieldEnum[];
};

/**
 * AccessPolicy findMany
 */
export type AccessPolicyFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which AccessPolicies to fetch.
   */
  where?: Prisma.AccessPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessPolicies to fetch.
   */
  orderBy?:
    | Prisma.AccessPolicyOrderByWithRelationInput
    | Prisma.AccessPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AccessPolicies.
   */
  cursor?: Prisma.AccessPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessPolicies.
   */
  skip?: number;
  distinct?:
    | Prisma.AccessPolicyScalarFieldEnum
    | Prisma.AccessPolicyScalarFieldEnum[];
};

/**
 * AccessPolicy create
 */
export type AccessPolicyCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
  /**
   * The data needed to create a AccessPolicy.
   */
  data: Prisma.XOR<
    Prisma.AccessPolicyCreateInput,
    Prisma.AccessPolicyUncheckedCreateInput
  >;
};

/**
 * AccessPolicy createMany
 */
export type AccessPolicyCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AccessPolicies.
   */
  data:
    | Prisma.AccessPolicyCreateManyInput
    | Prisma.AccessPolicyCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AccessPolicy createManyAndReturn
 */
export type AccessPolicyCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * The data used to create many AccessPolicies.
   */
  data:
    | Prisma.AccessPolicyCreateManyInput
    | Prisma.AccessPolicyCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AccessPolicy update
 */
export type AccessPolicyUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
  /**
   * The data needed to update a AccessPolicy.
   */
  data: Prisma.XOR<
    Prisma.AccessPolicyUpdateInput,
    Prisma.AccessPolicyUncheckedUpdateInput
  >;
  /**
   * Choose, which AccessPolicy to update.
   */
  where: Prisma.AccessPolicyWhereUniqueInput;
};

/**
 * AccessPolicy updateMany
 */
export type AccessPolicyUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AccessPolicies.
   */
  data: Prisma.XOR<
    Prisma.AccessPolicyUpdateManyMutationInput,
    Prisma.AccessPolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccessPolicies to update
   */
  where?: Prisma.AccessPolicyWhereInput;
  /**
   * Limit how many AccessPolicies to update.
   */
  limit?: number;
};

/**
 * AccessPolicy updateManyAndReturn
 */
export type AccessPolicyUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * The data used to update AccessPolicies.
   */
  data: Prisma.XOR<
    Prisma.AccessPolicyUpdateManyMutationInput,
    Prisma.AccessPolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccessPolicies to update
   */
  where?: Prisma.AccessPolicyWhereInput;
  /**
   * Limit how many AccessPolicies to update.
   */
  limit?: number;
};

/**
 * AccessPolicy upsert
 */
export type AccessPolicyUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
  /**
   * The filter to search for the AccessPolicy to update in case it exists.
   */
  where: Prisma.AccessPolicyWhereUniqueInput;
  /**
   * In case the AccessPolicy found by the `where` argument doesn't exist, create a new AccessPolicy with this data.
   */
  create: Prisma.XOR<
    Prisma.AccessPolicyCreateInput,
    Prisma.AccessPolicyUncheckedCreateInput
  >;
  /**
   * In case the AccessPolicy was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AccessPolicyUpdateInput,
    Prisma.AccessPolicyUncheckedUpdateInput
  >;
};

/**
 * AccessPolicy delete
 */
export type AccessPolicyDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
  /**
   * Filter which AccessPolicy to delete.
   */
  where: Prisma.AccessPolicyWhereUniqueInput;
};

/**
 * AccessPolicy deleteMany
 */
export type AccessPolicyDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AccessPolicies to delete
   */
  where?: Prisma.AccessPolicyWhereInput;
  /**
   * Limit how many AccessPolicies to delete.
   */
  limit?: number;
};

/**
 * AccessPolicy.rules
 */
export type AccessPolicy$rulesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  where?: Prisma.AccessRulesWhereInput;
  orderBy?:
    | Prisma.AccessRulesOrderByWithRelationInput
    | Prisma.AccessRulesOrderByWithRelationInput[];
  cursor?: Prisma.AccessRulesWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.AccessRulesScalarFieldEnum
    | Prisma.AccessRulesScalarFieldEnum[];
};

/**
 * AccessPolicy.user
 */
export type AccessPolicy$userArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
  orderBy?:
    | Prisma.UserOrderByWithRelationInput
    | Prisma.UserOrderByWithRelationInput[];
  cursor?: Prisma.UserWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];
};

/**
 * AccessPolicy without action
 */
export type AccessPolicyDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessPolicy
   */
  select?: Prisma.AccessPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessPolicy
   */
  omit?: Prisma.AccessPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessPolicyInclude<ExtArgs> | null;
};
