/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ActionCondition` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model ActionCondition
 *
 */
export type ActionConditionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ActionConditionPayload>;

export type AggregateActionCondition = {
  _count: ActionConditionCountAggregateOutputType | null;
  _avg: ActionConditionAvgAggregateOutputType | null;
  _sum: ActionConditionSumAggregateOutputType | null;
  _min: ActionConditionMinAggregateOutputType | null;
  _max: ActionConditionMaxAggregateOutputType | null;
};

export type ActionConditionAvgAggregateOutputType = {
  id: number | null;
  resourceActionId: number | null;
};

export type ActionConditionSumAggregateOutputType = {
  id: number | null;
  resourceActionId: number | null;
};

export type ActionConditionMinAggregateOutputType = {
  id: number | null;
  label: string | null;
  resourceActionId: number | null;
};

export type ActionConditionMaxAggregateOutputType = {
  id: number | null;
  label: string | null;
  resourceActionId: number | null;
};

export type ActionConditionCountAggregateOutputType = {
  id: number;
  label: number;
  condition: number;
  resourceActionId: number;
  _all: number;
};

export type ActionConditionAvgAggregateInputType = {
  id?: true;
  resourceActionId?: true;
};

export type ActionConditionSumAggregateInputType = {
  id?: true;
  resourceActionId?: true;
};

export type ActionConditionMinAggregateInputType = {
  id?: true;
  label?: true;
  resourceActionId?: true;
};

export type ActionConditionMaxAggregateInputType = {
  id?: true;
  label?: true;
  resourceActionId?: true;
};

export type ActionConditionCountAggregateInputType = {
  id?: true;
  label?: true;
  condition?: true;
  resourceActionId?: true;
  _all?: true;
};

export type ActionConditionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ActionCondition to aggregate.
   */
  where?: Prisma.ActionConditionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ActionConditions to fetch.
   */
  orderBy?:
    | Prisma.ActionConditionOrderByWithRelationInput
    | Prisma.ActionConditionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ActionConditionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ActionConditions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ActionConditions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ActionConditions
   **/
  _count?: true | ActionConditionCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ActionConditionAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ActionConditionSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ActionConditionMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ActionConditionMaxAggregateInputType;
};

export type GetActionConditionAggregateType<
  T extends ActionConditionAggregateArgs,
> = {
  [P in keyof T & keyof AggregateActionCondition]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateActionCondition[P]>
    : Prisma.GetScalarType<T[P], AggregateActionCondition[P]>;
};

export type ActionConditionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ActionConditionWhereInput;
  orderBy?:
    | Prisma.ActionConditionOrderByWithAggregationInput
    | Prisma.ActionConditionOrderByWithAggregationInput[];
  by:
    | Prisma.ActionConditionScalarFieldEnum[]
    | Prisma.ActionConditionScalarFieldEnum;
  having?: Prisma.ActionConditionScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ActionConditionCountAggregateInputType | true;
  _avg?: ActionConditionAvgAggregateInputType;
  _sum?: ActionConditionSumAggregateInputType;
  _min?: ActionConditionMinAggregateInputType;
  _max?: ActionConditionMaxAggregateInputType;
};

export type ActionConditionGroupByOutputType = {
  id: number;
  label: string;
  condition: runtime.JsonValue;
  resourceActionId: number;
  _count: ActionConditionCountAggregateOutputType | null;
  _avg: ActionConditionAvgAggregateOutputType | null;
  _sum: ActionConditionSumAggregateOutputType | null;
  _min: ActionConditionMinAggregateOutputType | null;
  _max: ActionConditionMaxAggregateOutputType | null;
};

type GetActionConditionGroupByPayload<T extends ActionConditionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ActionConditionGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof ActionConditionGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ActionConditionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ActionConditionGroupByOutputType[P]>;
      }
    >
  >;

export type ActionConditionWhereInput = {
  AND?: Prisma.ActionConditionWhereInput | Prisma.ActionConditionWhereInput[];
  OR?: Prisma.ActionConditionWhereInput[];
  NOT?: Prisma.ActionConditionWhereInput | Prisma.ActionConditionWhereInput[];
  id?: Prisma.IntFilter<'ActionCondition'> | number;
  label?: Prisma.StringFilter<'ActionCondition'> | string;
  condition?: Prisma.JsonFilter<'ActionCondition'>;
  resourceActionId?: Prisma.IntFilter<'ActionCondition'> | number;
  resourceAction?: Prisma.XOR<
    Prisma.ResourceActionScalarRelationFilter,
    Prisma.ResourceActionWhereInput
  >;
  accessRules?: Prisma.AccessRulesListRelationFilter;
};

export type ActionConditionOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  condition?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
  resourceAction?: Prisma.ResourceActionOrderByWithRelationInput;
  accessRules?: Prisma.AccessRulesOrderByRelationAggregateInput;
};

export type ActionConditionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.ActionConditionWhereInput | Prisma.ActionConditionWhereInput[];
    OR?: Prisma.ActionConditionWhereInput[];
    NOT?: Prisma.ActionConditionWhereInput | Prisma.ActionConditionWhereInput[];
    label?: Prisma.StringFilter<'ActionCondition'> | string;
    condition?: Prisma.JsonFilter<'ActionCondition'>;
    resourceActionId?: Prisma.IntFilter<'ActionCondition'> | number;
    resourceAction?: Prisma.XOR<
      Prisma.ResourceActionScalarRelationFilter,
      Prisma.ResourceActionWhereInput
    >;
    accessRules?: Prisma.AccessRulesListRelationFilter;
  },
  'id'
>;

export type ActionConditionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  condition?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
  _count?: Prisma.ActionConditionCountOrderByAggregateInput;
  _avg?: Prisma.ActionConditionAvgOrderByAggregateInput;
  _max?: Prisma.ActionConditionMaxOrderByAggregateInput;
  _min?: Prisma.ActionConditionMinOrderByAggregateInput;
  _sum?: Prisma.ActionConditionSumOrderByAggregateInput;
};

export type ActionConditionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ActionConditionScalarWhereWithAggregatesInput
    | Prisma.ActionConditionScalarWhereWithAggregatesInput[];
  OR?: Prisma.ActionConditionScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ActionConditionScalarWhereWithAggregatesInput
    | Prisma.ActionConditionScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'ActionCondition'> | number;
  label?: Prisma.StringWithAggregatesFilter<'ActionCondition'> | string;
  condition?: Prisma.JsonWithAggregatesFilter<'ActionCondition'>;
  resourceActionId?: Prisma.IntWithAggregatesFilter<'ActionCondition'> | number;
};

export type ActionConditionCreateInput = {
  label: string;
  condition: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceAction: Prisma.ResourceActionCreateNestedOneWithoutActionConditionInput;
  accessRules?: Prisma.AccessRulesCreateNestedManyWithoutActionConditionInput;
};

export type ActionConditionUncheckedCreateInput = {
  id?: number;
  label: string;
  condition: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceActionId: number;
  accessRules?: Prisma.AccessRulesUncheckedCreateNestedManyWithoutActionConditionInput;
};

export type ActionConditionUpdateInput = {
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  condition?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceAction?: Prisma.ResourceActionUpdateOneRequiredWithoutActionConditionNestedInput;
  accessRules?: Prisma.AccessRulesUpdateManyWithoutActionConditionNestedInput;
};

export type ActionConditionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  condition?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceActionId?: Prisma.IntFieldUpdateOperationsInput | number;
  accessRules?: Prisma.AccessRulesUncheckedUpdateManyWithoutActionConditionNestedInput;
};

export type ActionConditionCreateManyInput = {
  id?: number;
  label: string;
  condition: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceActionId: number;
};

export type ActionConditionUpdateManyMutationInput = {
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  condition?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

export type ActionConditionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  condition?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceActionId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ActionConditionNullableScalarRelationFilter = {
  is?: Prisma.ActionConditionWhereInput | null;
  isNot?: Prisma.ActionConditionWhereInput | null;
};

export type ActionConditionListRelationFilter = {
  every?: Prisma.ActionConditionWhereInput;
  some?: Prisma.ActionConditionWhereInput;
  none?: Prisma.ActionConditionWhereInput;
};

export type ActionConditionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ActionConditionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  condition?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
};

export type ActionConditionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
};

export type ActionConditionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
};

export type ActionConditionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  label?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
};

export type ActionConditionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
};

export type ActionConditionCreateNestedOneWithoutAccessRulesInput = {
  create?: Prisma.XOR<
    Prisma.ActionConditionCreateWithoutAccessRulesInput,
    Prisma.ActionConditionUncheckedCreateWithoutAccessRulesInput
  >;
  connectOrCreate?: Prisma.ActionConditionCreateOrConnectWithoutAccessRulesInput;
  connect?: Prisma.ActionConditionWhereUniqueInput;
};

export type ActionConditionUpdateOneWithoutAccessRulesNestedInput = {
  create?: Prisma.XOR<
    Prisma.ActionConditionCreateWithoutAccessRulesInput,
    Prisma.ActionConditionUncheckedCreateWithoutAccessRulesInput
  >;
  connectOrCreate?: Prisma.ActionConditionCreateOrConnectWithoutAccessRulesInput;
  upsert?: Prisma.ActionConditionUpsertWithoutAccessRulesInput;
  disconnect?: Prisma.ActionConditionWhereInput | boolean;
  delete?: Prisma.ActionConditionWhereInput | boolean;
  connect?: Prisma.ActionConditionWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ActionConditionUpdateToOneWithWhereWithoutAccessRulesInput,
      Prisma.ActionConditionUpdateWithoutAccessRulesInput
    >,
    Prisma.ActionConditionUncheckedUpdateWithoutAccessRulesInput
  >;
};

export type ActionConditionCreateNestedManyWithoutResourceActionInput = {
  create?:
    | Prisma.XOR<
        Prisma.ActionConditionCreateWithoutResourceActionInput,
        Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput
      >
    | Prisma.ActionConditionCreateWithoutResourceActionInput[]
    | Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput[];
  connectOrCreate?:
    | Prisma.ActionConditionCreateOrConnectWithoutResourceActionInput
    | Prisma.ActionConditionCreateOrConnectWithoutResourceActionInput[];
  createMany?: Prisma.ActionConditionCreateManyResourceActionInputEnvelope;
  connect?:
    | Prisma.ActionConditionWhereUniqueInput
    | Prisma.ActionConditionWhereUniqueInput[];
};

export type ActionConditionUncheckedCreateNestedManyWithoutResourceActionInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.ActionConditionCreateWithoutResourceActionInput,
          Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput
        >
      | Prisma.ActionConditionCreateWithoutResourceActionInput[]
      | Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput[];
    connectOrCreate?:
      | Prisma.ActionConditionCreateOrConnectWithoutResourceActionInput
      | Prisma.ActionConditionCreateOrConnectWithoutResourceActionInput[];
    createMany?: Prisma.ActionConditionCreateManyResourceActionInputEnvelope;
    connect?:
      | Prisma.ActionConditionWhereUniqueInput
      | Prisma.ActionConditionWhereUniqueInput[];
  };

export type ActionConditionUpdateManyWithoutResourceActionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ActionConditionCreateWithoutResourceActionInput,
        Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput
      >
    | Prisma.ActionConditionCreateWithoutResourceActionInput[]
    | Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput[];
  connectOrCreate?:
    | Prisma.ActionConditionCreateOrConnectWithoutResourceActionInput
    | Prisma.ActionConditionCreateOrConnectWithoutResourceActionInput[];
  upsert?:
    | Prisma.ActionConditionUpsertWithWhereUniqueWithoutResourceActionInput
    | Prisma.ActionConditionUpsertWithWhereUniqueWithoutResourceActionInput[];
  createMany?: Prisma.ActionConditionCreateManyResourceActionInputEnvelope;
  set?:
    | Prisma.ActionConditionWhereUniqueInput
    | Prisma.ActionConditionWhereUniqueInput[];
  disconnect?:
    | Prisma.ActionConditionWhereUniqueInput
    | Prisma.ActionConditionWhereUniqueInput[];
  delete?:
    | Prisma.ActionConditionWhereUniqueInput
    | Prisma.ActionConditionWhereUniqueInput[];
  connect?:
    | Prisma.ActionConditionWhereUniqueInput
    | Prisma.ActionConditionWhereUniqueInput[];
  update?:
    | Prisma.ActionConditionUpdateWithWhereUniqueWithoutResourceActionInput
    | Prisma.ActionConditionUpdateWithWhereUniqueWithoutResourceActionInput[];
  updateMany?:
    | Prisma.ActionConditionUpdateManyWithWhereWithoutResourceActionInput
    | Prisma.ActionConditionUpdateManyWithWhereWithoutResourceActionInput[];
  deleteMany?:
    | Prisma.ActionConditionScalarWhereInput
    | Prisma.ActionConditionScalarWhereInput[];
};

export type ActionConditionUncheckedUpdateManyWithoutResourceActionNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.ActionConditionCreateWithoutResourceActionInput,
          Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput
        >
      | Prisma.ActionConditionCreateWithoutResourceActionInput[]
      | Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput[];
    connectOrCreate?:
      | Prisma.ActionConditionCreateOrConnectWithoutResourceActionInput
      | Prisma.ActionConditionCreateOrConnectWithoutResourceActionInput[];
    upsert?:
      | Prisma.ActionConditionUpsertWithWhereUniqueWithoutResourceActionInput
      | Prisma.ActionConditionUpsertWithWhereUniqueWithoutResourceActionInput[];
    createMany?: Prisma.ActionConditionCreateManyResourceActionInputEnvelope;
    set?:
      | Prisma.ActionConditionWhereUniqueInput
      | Prisma.ActionConditionWhereUniqueInput[];
    disconnect?:
      | Prisma.ActionConditionWhereUniqueInput
      | Prisma.ActionConditionWhereUniqueInput[];
    delete?:
      | Prisma.ActionConditionWhereUniqueInput
      | Prisma.ActionConditionWhereUniqueInput[];
    connect?:
      | Prisma.ActionConditionWhereUniqueInput
      | Prisma.ActionConditionWhereUniqueInput[];
    update?:
      | Prisma.ActionConditionUpdateWithWhereUniqueWithoutResourceActionInput
      | Prisma.ActionConditionUpdateWithWhereUniqueWithoutResourceActionInput[];
    updateMany?:
      | Prisma.ActionConditionUpdateManyWithWhereWithoutResourceActionInput
      | Prisma.ActionConditionUpdateManyWithWhereWithoutResourceActionInput[];
    deleteMany?:
      | Prisma.ActionConditionScalarWhereInput
      | Prisma.ActionConditionScalarWhereInput[];
  };

export type ActionConditionCreateWithoutAccessRulesInput = {
  label: string;
  condition: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceAction: Prisma.ResourceActionCreateNestedOneWithoutActionConditionInput;
};

export type ActionConditionUncheckedCreateWithoutAccessRulesInput = {
  id?: number;
  label: string;
  condition: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceActionId: number;
};

export type ActionConditionCreateOrConnectWithoutAccessRulesInput = {
  where: Prisma.ActionConditionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ActionConditionCreateWithoutAccessRulesInput,
    Prisma.ActionConditionUncheckedCreateWithoutAccessRulesInput
  >;
};

export type ActionConditionUpsertWithoutAccessRulesInput = {
  update: Prisma.XOR<
    Prisma.ActionConditionUpdateWithoutAccessRulesInput,
    Prisma.ActionConditionUncheckedUpdateWithoutAccessRulesInput
  >;
  create: Prisma.XOR<
    Prisma.ActionConditionCreateWithoutAccessRulesInput,
    Prisma.ActionConditionUncheckedCreateWithoutAccessRulesInput
  >;
  where?: Prisma.ActionConditionWhereInput;
};

export type ActionConditionUpdateToOneWithWhereWithoutAccessRulesInput = {
  where?: Prisma.ActionConditionWhereInput;
  data: Prisma.XOR<
    Prisma.ActionConditionUpdateWithoutAccessRulesInput,
    Prisma.ActionConditionUncheckedUpdateWithoutAccessRulesInput
  >;
};

export type ActionConditionUpdateWithoutAccessRulesInput = {
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  condition?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceAction?: Prisma.ResourceActionUpdateOneRequiredWithoutActionConditionNestedInput;
};

export type ActionConditionUncheckedUpdateWithoutAccessRulesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  condition?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  resourceActionId?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type ActionConditionCreateWithoutResourceActionInput = {
  label: string;
  condition: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  accessRules?: Prisma.AccessRulesCreateNestedManyWithoutActionConditionInput;
};

export type ActionConditionUncheckedCreateWithoutResourceActionInput = {
  id?: number;
  label: string;
  condition: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  accessRules?: Prisma.AccessRulesUncheckedCreateNestedManyWithoutActionConditionInput;
};

export type ActionConditionCreateOrConnectWithoutResourceActionInput = {
  where: Prisma.ActionConditionWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ActionConditionCreateWithoutResourceActionInput,
    Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput
  >;
};

export type ActionConditionCreateManyResourceActionInputEnvelope = {
  data:
    | Prisma.ActionConditionCreateManyResourceActionInput
    | Prisma.ActionConditionCreateManyResourceActionInput[];
  skipDuplicates?: boolean;
};

export type ActionConditionUpsertWithWhereUniqueWithoutResourceActionInput = {
  where: Prisma.ActionConditionWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ActionConditionUpdateWithoutResourceActionInput,
    Prisma.ActionConditionUncheckedUpdateWithoutResourceActionInput
  >;
  create: Prisma.XOR<
    Prisma.ActionConditionCreateWithoutResourceActionInput,
    Prisma.ActionConditionUncheckedCreateWithoutResourceActionInput
  >;
};

export type ActionConditionUpdateWithWhereUniqueWithoutResourceActionInput = {
  where: Prisma.ActionConditionWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ActionConditionUpdateWithoutResourceActionInput,
    Prisma.ActionConditionUncheckedUpdateWithoutResourceActionInput
  >;
};

export type ActionConditionUpdateManyWithWhereWithoutResourceActionInput = {
  where: Prisma.ActionConditionScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ActionConditionUpdateManyMutationInput,
    Prisma.ActionConditionUncheckedUpdateManyWithoutResourceActionInput
  >;
};

export type ActionConditionScalarWhereInput = {
  AND?:
    | Prisma.ActionConditionScalarWhereInput
    | Prisma.ActionConditionScalarWhereInput[];
  OR?: Prisma.ActionConditionScalarWhereInput[];
  NOT?:
    | Prisma.ActionConditionScalarWhereInput
    | Prisma.ActionConditionScalarWhereInput[];
  id?: Prisma.IntFilter<'ActionCondition'> | number;
  label?: Prisma.StringFilter<'ActionCondition'> | string;
  condition?: Prisma.JsonFilter<'ActionCondition'>;
  resourceActionId?: Prisma.IntFilter<'ActionCondition'> | number;
};

export type ActionConditionCreateManyResourceActionInput = {
  id?: number;
  label: string;
  condition: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

export type ActionConditionUpdateWithoutResourceActionInput = {
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  condition?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  accessRules?: Prisma.AccessRulesUpdateManyWithoutActionConditionNestedInput;
};

export type ActionConditionUncheckedUpdateWithoutResourceActionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  condition?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  accessRules?: Prisma.AccessRulesUncheckedUpdateManyWithoutActionConditionNestedInput;
};

export type ActionConditionUncheckedUpdateManyWithoutResourceActionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  label?: Prisma.StringFieldUpdateOperationsInput | string;
  condition?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
};

/**
 * Count Type ActionConditionCountOutputType
 */

export type ActionConditionCountOutputType = {
  accessRules: number;
};

export type ActionConditionCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  accessRules?: boolean | ActionConditionCountOutputTypeCountAccessRulesArgs;
};

/**
 * ActionConditionCountOutputType without action
 */
export type ActionConditionCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionConditionCountOutputType
   */
  select?: Prisma.ActionConditionCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ActionConditionCountOutputType without action
 */
export type ActionConditionCountOutputTypeCountAccessRulesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AccessRulesWhereInput;
};

export type ActionConditionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    label?: boolean;
    condition?: boolean;
    resourceActionId?: boolean;
    resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
    accessRules?: boolean | Prisma.ActionCondition$accessRulesArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.ActionConditionCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['actionCondition']
>;

export type ActionConditionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    label?: boolean;
    condition?: boolean;
    resourceActionId?: boolean;
    resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['actionCondition']
>;

export type ActionConditionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    label?: boolean;
    condition?: boolean;
    resourceActionId?: boolean;
    resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['actionCondition']
>;

export type ActionConditionSelectScalar = {
  id?: boolean;
  label?: boolean;
  condition?: boolean;
  resourceActionId?: boolean;
};

export type ActionConditionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'label' | 'condition' | 'resourceActionId',
  ExtArgs['result']['actionCondition']
>;
export type ActionConditionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
  accessRules?: boolean | Prisma.ActionCondition$accessRulesArgs<ExtArgs>;
  _count?: boolean | Prisma.ActionConditionCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ActionConditionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
};
export type ActionConditionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
};

export type $ActionConditionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'ActionCondition';
  objects: {
    resourceAction: Prisma.$ResourceActionPayload<ExtArgs>;
    accessRules: Prisma.$AccessRulesPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      label: string;
      condition: runtime.JsonValue;
      resourceActionId: number;
    },
    ExtArgs['result']['actionCondition']
  >;
  composites: {};
};

export type ActionConditionGetPayload<
  S extends boolean | null | undefined | ActionConditionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ActionConditionPayload, S>;

export type ActionConditionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ActionConditionFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: ActionConditionCountAggregateInputType | true;
};

export interface ActionConditionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['ActionCondition'];
    meta: { name: 'ActionCondition' };
  };
  /**
   * Find zero or one ActionCondition that matches the filter.
   * @param {ActionConditionFindUniqueArgs} args - Arguments to find a ActionCondition
   * @example
   * // Get one ActionCondition
   * const actionCondition = await prisma.actionCondition.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ActionConditionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ActionConditionFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ActionConditionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one ActionCondition that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ActionConditionFindUniqueOrThrowArgs} args - Arguments to find a ActionCondition
   * @example
   * // Get one ActionCondition
   * const actionCondition = await prisma.actionCondition.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ActionConditionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ActionConditionFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ActionConditionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ActionCondition that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionConditionFindFirstArgs} args - Arguments to find a ActionCondition
   * @example
   * // Get one ActionCondition
   * const actionCondition = await prisma.actionCondition.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ActionConditionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ActionConditionFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ActionConditionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first ActionCondition that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionConditionFindFirstOrThrowArgs} args - Arguments to find a ActionCondition
   * @example
   * // Get one ActionCondition
   * const actionCondition = await prisma.actionCondition.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ActionConditionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ActionConditionFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ActionConditionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more ActionConditions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionConditionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ActionConditions
   * const actionConditions = await prisma.actionCondition.findMany()
   *
   * // Get first 10 ActionConditions
   * const actionConditions = await prisma.actionCondition.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const actionConditionWithIdOnly = await prisma.actionCondition.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ActionConditionFindManyArgs>(
    args?: Prisma.SelectSubset<T, ActionConditionFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a ActionCondition.
   * @param {ActionConditionCreateArgs} args - Arguments to create a ActionCondition.
   * @example
   * // Create one ActionCondition
   * const ActionCondition = await prisma.actionCondition.create({
   *   data: {
   *     // ... data to create a ActionCondition
   *   }
   * })
   *
   */
  create<T extends ActionConditionCreateArgs>(
    args: Prisma.SelectSubset<T, ActionConditionCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ActionConditionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many ActionConditions.
   * @param {ActionConditionCreateManyArgs} args - Arguments to create many ActionConditions.
   * @example
   * // Create many ActionConditions
   * const actionCondition = await prisma.actionCondition.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ActionConditionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ActionConditionCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many ActionConditions and returns the data saved in the database.
   * @param {ActionConditionCreateManyAndReturnArgs} args - Arguments to create many ActionConditions.
   * @example
   * // Create many ActionConditions
   * const actionCondition = await prisma.actionCondition.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ActionConditions and only return the `id`
   * const actionConditionWithIdOnly = await prisma.actionCondition.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ActionConditionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      ActionConditionCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a ActionCondition.
   * @param {ActionConditionDeleteArgs} args - Arguments to delete one ActionCondition.
   * @example
   * // Delete one ActionCondition
   * const ActionCondition = await prisma.actionCondition.delete({
   *   where: {
   *     // ... filter to delete one ActionCondition
   *   }
   * })
   *
   */
  delete<T extends ActionConditionDeleteArgs>(
    args: Prisma.SelectSubset<T, ActionConditionDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ActionConditionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one ActionCondition.
   * @param {ActionConditionUpdateArgs} args - Arguments to update one ActionCondition.
   * @example
   * // Update one ActionCondition
   * const actionCondition = await prisma.actionCondition.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ActionConditionUpdateArgs>(
    args: Prisma.SelectSubset<T, ActionConditionUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ActionConditionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more ActionConditions.
   * @param {ActionConditionDeleteManyArgs} args - Arguments to filter ActionConditions to delete.
   * @example
   * // Delete a few ActionConditions
   * const { count } = await prisma.actionCondition.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ActionConditionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ActionConditionDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ActionConditions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionConditionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ActionConditions
   * const actionCondition = await prisma.actionCondition.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ActionConditionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ActionConditionUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more ActionConditions and returns the data updated in the database.
   * @param {ActionConditionUpdateManyAndReturnArgs} args - Arguments to update many ActionConditions.
   * @example
   * // Update many ActionConditions
   * const actionCondition = await prisma.actionCondition.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ActionConditions and only return the `id`
   * const actionConditionWithIdOnly = await prisma.actionCondition.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ActionConditionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      ActionConditionUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one ActionCondition.
   * @param {ActionConditionUpsertArgs} args - Arguments to update or create a ActionCondition.
   * @example
   * // Update or create a ActionCondition
   * const actionCondition = await prisma.actionCondition.upsert({
   *   create: {
   *     // ... data to create a ActionCondition
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ActionCondition we want to update
   *   }
   * })
   */
  upsert<T extends ActionConditionUpsertArgs>(
    args: Prisma.SelectSubset<T, ActionConditionUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ActionConditionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of ActionConditions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionConditionCountArgs} args - Arguments to filter ActionConditions to count.
   * @example
   * // Count the number of ActionConditions
   * const count = await prisma.actionCondition.count({
   *   where: {
   *     // ... the filter for the ActionConditions we want to count
   *   }
   * })
   **/
  count<T extends ActionConditionCountArgs>(
    args?: Prisma.Subset<T, ActionConditionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            ActionConditionCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a ActionCondition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionConditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ActionConditionAggregateArgs>(
    args: Prisma.Subset<T, ActionConditionAggregateArgs>,
  ): Prisma.PrismaPromise<GetActionConditionAggregateType<T>>;

  /**
   * Group by ActionCondition.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ActionConditionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ActionConditionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ActionConditionGroupByArgs['orderBy'] }
      : { orderBy?: ActionConditionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ActionConditionGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetActionConditionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the ActionCondition model
   */
  readonly fields: ActionConditionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ActionCondition.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ActionConditionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  resourceAction<T extends Prisma.ResourceActionDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ResourceActionDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ResourceActionPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  accessRules<T extends Prisma.ActionCondition$accessRulesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ActionCondition$accessRulesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$AccessRulesPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the ActionCondition model
 */
export interface ActionConditionFieldRefs {
  readonly id: Prisma.FieldRef<'ActionCondition', 'Int'>;
  readonly label: Prisma.FieldRef<'ActionCondition', 'String'>;
  readonly condition: Prisma.FieldRef<'ActionCondition', 'Json'>;
  readonly resourceActionId: Prisma.FieldRef<'ActionCondition', 'Int'>;
}

// Custom InputTypes
/**
 * ActionCondition findUnique
 */
export type ActionConditionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  /**
   * Filter, which ActionCondition to fetch.
   */
  where: Prisma.ActionConditionWhereUniqueInput;
};

/**
 * ActionCondition findUniqueOrThrow
 */
export type ActionConditionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  /**
   * Filter, which ActionCondition to fetch.
   */
  where: Prisma.ActionConditionWhereUniqueInput;
};

/**
 * ActionCondition findFirst
 */
export type ActionConditionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  /**
   * Filter, which ActionCondition to fetch.
   */
  where?: Prisma.ActionConditionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ActionConditions to fetch.
   */
  orderBy?:
    | Prisma.ActionConditionOrderByWithRelationInput
    | Prisma.ActionConditionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ActionConditions.
   */
  cursor?: Prisma.ActionConditionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ActionConditions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ActionConditions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ActionConditions.
   */
  distinct?:
    | Prisma.ActionConditionScalarFieldEnum
    | Prisma.ActionConditionScalarFieldEnum[];
};

/**
 * ActionCondition findFirstOrThrow
 */
export type ActionConditionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  /**
   * Filter, which ActionCondition to fetch.
   */
  where?: Prisma.ActionConditionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ActionConditions to fetch.
   */
  orderBy?:
    | Prisma.ActionConditionOrderByWithRelationInput
    | Prisma.ActionConditionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ActionConditions.
   */
  cursor?: Prisma.ActionConditionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ActionConditions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ActionConditions.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ActionConditions.
   */
  distinct?:
    | Prisma.ActionConditionScalarFieldEnum
    | Prisma.ActionConditionScalarFieldEnum[];
};

/**
 * ActionCondition findMany
 */
export type ActionConditionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  /**
   * Filter, which ActionConditions to fetch.
   */
  where?: Prisma.ActionConditionWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ActionConditions to fetch.
   */
  orderBy?:
    | Prisma.ActionConditionOrderByWithRelationInput
    | Prisma.ActionConditionOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ActionConditions.
   */
  cursor?: Prisma.ActionConditionWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ActionConditions from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ActionConditions.
   */
  skip?: number;
  distinct?:
    | Prisma.ActionConditionScalarFieldEnum
    | Prisma.ActionConditionScalarFieldEnum[];
};

/**
 * ActionCondition create
 */
export type ActionConditionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  /**
   * The data needed to create a ActionCondition.
   */
  data: Prisma.XOR<
    Prisma.ActionConditionCreateInput,
    Prisma.ActionConditionUncheckedCreateInput
  >;
};

/**
 * ActionCondition createMany
 */
export type ActionConditionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ActionConditions.
   */
  data:
    | Prisma.ActionConditionCreateManyInput
    | Prisma.ActionConditionCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * ActionCondition createManyAndReturn
 */
export type ActionConditionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * The data used to create many ActionConditions.
   */
  data:
    | Prisma.ActionConditionCreateManyInput
    | Prisma.ActionConditionCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * ActionCondition update
 */
export type ActionConditionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  /**
   * The data needed to update a ActionCondition.
   */
  data: Prisma.XOR<
    Prisma.ActionConditionUpdateInput,
    Prisma.ActionConditionUncheckedUpdateInput
  >;
  /**
   * Choose, which ActionCondition to update.
   */
  where: Prisma.ActionConditionWhereUniqueInput;
};

/**
 * ActionCondition updateMany
 */
export type ActionConditionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ActionConditions.
   */
  data: Prisma.XOR<
    Prisma.ActionConditionUpdateManyMutationInput,
    Prisma.ActionConditionUncheckedUpdateManyInput
  >;
  /**
   * Filter which ActionConditions to update
   */
  where?: Prisma.ActionConditionWhereInput;
  /**
   * Limit how many ActionConditions to update.
   */
  limit?: number;
};

/**
 * ActionCondition updateManyAndReturn
 */
export type ActionConditionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * The data used to update ActionConditions.
   */
  data: Prisma.XOR<
    Prisma.ActionConditionUpdateManyMutationInput,
    Prisma.ActionConditionUncheckedUpdateManyInput
  >;
  /**
   * Filter which ActionConditions to update
   */
  where?: Prisma.ActionConditionWhereInput;
  /**
   * Limit how many ActionConditions to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * ActionCondition upsert
 */
export type ActionConditionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  /**
   * The filter to search for the ActionCondition to update in case it exists.
   */
  where: Prisma.ActionConditionWhereUniqueInput;
  /**
   * In case the ActionCondition found by the `where` argument doesn't exist, create a new ActionCondition with this data.
   */
  create: Prisma.XOR<
    Prisma.ActionConditionCreateInput,
    Prisma.ActionConditionUncheckedCreateInput
  >;
  /**
   * In case the ActionCondition was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ActionConditionUpdateInput,
    Prisma.ActionConditionUncheckedUpdateInput
  >;
};

/**
 * ActionCondition delete
 */
export type ActionConditionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  /**
   * Filter which ActionCondition to delete.
   */
  where: Prisma.ActionConditionWhereUniqueInput;
};

/**
 * ActionCondition deleteMany
 */
export type ActionConditionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ActionConditions to delete
   */
  where?: Prisma.ActionConditionWhereInput;
  /**
   * Limit how many ActionConditions to delete.
   */
  limit?: number;
};

/**
 * ActionCondition.accessRules
 */
export type ActionCondition$accessRulesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  where?: Prisma.AccessRulesWhereInput;
  orderBy?:
    | Prisma.AccessRulesOrderByWithRelationInput
    | Prisma.AccessRulesOrderByWithRelationInput[];
  cursor?: Prisma.AccessRulesWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.AccessRulesScalarFieldEnum
    | Prisma.AccessRulesScalarFieldEnum[];
};

/**
 * ActionCondition without action
 */
export type ActionConditionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
};
