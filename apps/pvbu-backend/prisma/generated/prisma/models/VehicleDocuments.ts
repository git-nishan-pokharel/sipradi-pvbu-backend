/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `VehicleDocuments` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model VehicleDocuments
 *
 */
export type VehicleDocumentsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$VehicleDocumentsPayload>;

export type AggregateVehicleDocuments = {
  _count: VehicleDocumentsCountAggregateOutputType | null;
  _min: VehicleDocumentsMinAggregateOutputType | null;
  _max: VehicleDocumentsMaxAggregateOutputType | null;
};

export type VehicleDocumentsMinAggregateOutputType = {
  id: string | null;
  documentationType: $Enums.VehicleVideoType | null;
  documentationUrl: string | null;
  description: string | null;
  vehicleModelId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type VehicleDocumentsMaxAggregateOutputType = {
  id: string | null;
  documentationType: $Enums.VehicleVideoType | null;
  documentationUrl: string | null;
  description: string | null;
  vehicleModelId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type VehicleDocumentsCountAggregateOutputType = {
  id: number;
  documentationType: number;
  documentationUrl: number;
  description: number;
  vehicleModelId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type VehicleDocumentsMinAggregateInputType = {
  id?: true;
  documentationType?: true;
  documentationUrl?: true;
  description?: true;
  vehicleModelId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type VehicleDocumentsMaxAggregateInputType = {
  id?: true;
  documentationType?: true;
  documentationUrl?: true;
  description?: true;
  vehicleModelId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type VehicleDocumentsCountAggregateInputType = {
  id?: true;
  documentationType?: true;
  documentationUrl?: true;
  description?: true;
  vehicleModelId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type VehicleDocumentsAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which VehicleDocuments to aggregate.
   */
  where?: Prisma.VehicleDocumentsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VehicleDocuments to fetch.
   */
  orderBy?:
    | Prisma.VehicleDocumentsOrderByWithRelationInput
    | Prisma.VehicleDocumentsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.VehicleDocumentsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VehicleDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VehicleDocuments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned VehicleDocuments
   **/
  _count?: true | VehicleDocumentsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: VehicleDocumentsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: VehicleDocumentsMaxAggregateInputType;
};

export type GetVehicleDocumentsAggregateType<
  T extends VehicleDocumentsAggregateArgs,
> = {
  [P in keyof T & keyof AggregateVehicleDocuments]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVehicleDocuments[P]>
    : Prisma.GetScalarType<T[P], AggregateVehicleDocuments[P]>;
};

export type VehicleDocumentsGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.VehicleDocumentsWhereInput;
  orderBy?:
    | Prisma.VehicleDocumentsOrderByWithAggregationInput
    | Prisma.VehicleDocumentsOrderByWithAggregationInput[];
  by:
    | Prisma.VehicleDocumentsScalarFieldEnum[]
    | Prisma.VehicleDocumentsScalarFieldEnum;
  having?: Prisma.VehicleDocumentsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: VehicleDocumentsCountAggregateInputType | true;
  _min?: VehicleDocumentsMinAggregateInputType;
  _max?: VehicleDocumentsMaxAggregateInputType;
};

export type VehicleDocumentsGroupByOutputType = {
  id: string;
  documentationType: $Enums.VehicleVideoType;
  documentationUrl: string;
  description: string | null;
  vehicleModelId: string;
  createdAt: Date;
  updatedAt: Date;
  _count: VehicleDocumentsCountAggregateOutputType | null;
  _min: VehicleDocumentsMinAggregateOutputType | null;
  _max: VehicleDocumentsMaxAggregateOutputType | null;
};

type GetVehicleDocumentsGroupByPayload<T extends VehicleDocumentsGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<VehicleDocumentsGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof VehicleDocumentsGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VehicleDocumentsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VehicleDocumentsGroupByOutputType[P]>;
      }
    >
  >;

export type VehicleDocumentsWhereInput = {
  AND?: Prisma.VehicleDocumentsWhereInput | Prisma.VehicleDocumentsWhereInput[];
  OR?: Prisma.VehicleDocumentsWhereInput[];
  NOT?: Prisma.VehicleDocumentsWhereInput | Prisma.VehicleDocumentsWhereInput[];
  id?: Prisma.UuidFilter<'VehicleDocuments'> | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeFilter<'VehicleDocuments'>
    | $Enums.VehicleVideoType;
  documentationUrl?: Prisma.StringFilter<'VehicleDocuments'> | string;
  description?: Prisma.StringNullableFilter<'VehicleDocuments'> | string | null;
  vehicleModelId?: Prisma.UuidFilter<'VehicleDocuments'> | string;
  createdAt?: Prisma.DateTimeFilter<'VehicleDocuments'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'VehicleDocuments'> | Date | string;
  vehicleModel?: Prisma.XOR<
    Prisma.VehicleModelsScalarRelationFilter,
    Prisma.VehicleModelsWhereInput
  >;
};

export type VehicleDocumentsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  documentationType?: Prisma.SortOrder;
  documentationUrl?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  vehicleModel?: Prisma.VehicleModelsOrderByWithRelationInput;
};

export type VehicleDocumentsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.VehicleDocumentsWhereInput
      | Prisma.VehicleDocumentsWhereInput[];
    OR?: Prisma.VehicleDocumentsWhereInput[];
    NOT?:
      | Prisma.VehicleDocumentsWhereInput
      | Prisma.VehicleDocumentsWhereInput[];
    documentationType?:
      | Prisma.EnumVehicleVideoTypeFilter<'VehicleDocuments'>
      | $Enums.VehicleVideoType;
    documentationUrl?: Prisma.StringFilter<'VehicleDocuments'> | string;
    description?:
      | Prisma.StringNullableFilter<'VehicleDocuments'>
      | string
      | null;
    vehicleModelId?: Prisma.UuidFilter<'VehicleDocuments'> | string;
    createdAt?: Prisma.DateTimeFilter<'VehicleDocuments'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'VehicleDocuments'> | Date | string;
    vehicleModel?: Prisma.XOR<
      Prisma.VehicleModelsScalarRelationFilter,
      Prisma.VehicleModelsWhereInput
    >;
  },
  'id'
>;

export type VehicleDocumentsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  documentationType?: Prisma.SortOrder;
  documentationUrl?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.VehicleDocumentsCountOrderByAggregateInput;
  _max?: Prisma.VehicleDocumentsMaxOrderByAggregateInput;
  _min?: Prisma.VehicleDocumentsMinOrderByAggregateInput;
};

export type VehicleDocumentsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.VehicleDocumentsScalarWhereWithAggregatesInput
    | Prisma.VehicleDocumentsScalarWhereWithAggregatesInput[];
  OR?: Prisma.VehicleDocumentsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.VehicleDocumentsScalarWhereWithAggregatesInput
    | Prisma.VehicleDocumentsScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'VehicleDocuments'> | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeWithAggregatesFilter<'VehicleDocuments'>
    | $Enums.VehicleVideoType;
  documentationUrl?:
    | Prisma.StringWithAggregatesFilter<'VehicleDocuments'>
    | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'VehicleDocuments'>
    | string
    | null;
  vehicleModelId?: Prisma.UuidWithAggregatesFilter<'VehicleDocuments'> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'VehicleDocuments'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'VehicleDocuments'>
    | Date
    | string;
};

export type VehicleDocumentsCreateInput = {
  id?: string;
  documentationType: $Enums.VehicleVideoType;
  documentationUrl: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  vehicleModel: Prisma.VehicleModelsCreateNestedOneWithoutVehicleDocumentsInput;
};

export type VehicleDocumentsUncheckedCreateInput = {
  id?: string;
  documentationType: $Enums.VehicleVideoType;
  documentationUrl: string;
  description?: string | null;
  vehicleModelId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleDocumentsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  documentationUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  vehicleModel?: Prisma.VehicleModelsUpdateOneRequiredWithoutVehicleDocumentsNestedInput;
};

export type VehicleDocumentsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  documentationUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  vehicleModelId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleDocumentsCreateManyInput = {
  id?: string;
  documentationType: $Enums.VehicleVideoType;
  documentationUrl: string;
  description?: string | null;
  vehicleModelId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleDocumentsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  documentationUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleDocumentsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  documentationUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  vehicleModelId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleDocumentsListRelationFilter = {
  every?: Prisma.VehicleDocumentsWhereInput;
  some?: Prisma.VehicleDocumentsWhereInput;
  none?: Prisma.VehicleDocumentsWhereInput;
};

export type VehicleDocumentsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type VehicleDocumentsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  documentationType?: Prisma.SortOrder;
  documentationUrl?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type VehicleDocumentsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  documentationType?: Prisma.SortOrder;
  documentationUrl?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type VehicleDocumentsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  documentationType?: Prisma.SortOrder;
  documentationUrl?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type VehicleDocumentsCreateNestedManyWithoutVehicleModelInput = {
  create?:
    | Prisma.XOR<
        Prisma.VehicleDocumentsCreateWithoutVehicleModelInput,
        Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput
      >
    | Prisma.VehicleDocumentsCreateWithoutVehicleModelInput[]
    | Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput[];
  connectOrCreate?:
    | Prisma.VehicleDocumentsCreateOrConnectWithoutVehicleModelInput
    | Prisma.VehicleDocumentsCreateOrConnectWithoutVehicleModelInput[];
  createMany?: Prisma.VehicleDocumentsCreateManyVehicleModelInputEnvelope;
  connect?:
    | Prisma.VehicleDocumentsWhereUniqueInput
    | Prisma.VehicleDocumentsWhereUniqueInput[];
};

export type VehicleDocumentsUncheckedCreateNestedManyWithoutVehicleModelInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.VehicleDocumentsCreateWithoutVehicleModelInput,
          Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput
        >
      | Prisma.VehicleDocumentsCreateWithoutVehicleModelInput[]
      | Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput[];
    connectOrCreate?:
      | Prisma.VehicleDocumentsCreateOrConnectWithoutVehicleModelInput
      | Prisma.VehicleDocumentsCreateOrConnectWithoutVehicleModelInput[];
    createMany?: Prisma.VehicleDocumentsCreateManyVehicleModelInputEnvelope;
    connect?:
      | Prisma.VehicleDocumentsWhereUniqueInput
      | Prisma.VehicleDocumentsWhereUniqueInput[];
  };

export type VehicleDocumentsUpdateManyWithoutVehicleModelNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VehicleDocumentsCreateWithoutVehicleModelInput,
        Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput
      >
    | Prisma.VehicleDocumentsCreateWithoutVehicleModelInput[]
    | Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput[];
  connectOrCreate?:
    | Prisma.VehicleDocumentsCreateOrConnectWithoutVehicleModelInput
    | Prisma.VehicleDocumentsCreateOrConnectWithoutVehicleModelInput[];
  upsert?:
    | Prisma.VehicleDocumentsUpsertWithWhereUniqueWithoutVehicleModelInput
    | Prisma.VehicleDocumentsUpsertWithWhereUniqueWithoutVehicleModelInput[];
  createMany?: Prisma.VehicleDocumentsCreateManyVehicleModelInputEnvelope;
  set?:
    | Prisma.VehicleDocumentsWhereUniqueInput
    | Prisma.VehicleDocumentsWhereUniqueInput[];
  disconnect?:
    | Prisma.VehicleDocumentsWhereUniqueInput
    | Prisma.VehicleDocumentsWhereUniqueInput[];
  delete?:
    | Prisma.VehicleDocumentsWhereUniqueInput
    | Prisma.VehicleDocumentsWhereUniqueInput[];
  connect?:
    | Prisma.VehicleDocumentsWhereUniqueInput
    | Prisma.VehicleDocumentsWhereUniqueInput[];
  update?:
    | Prisma.VehicleDocumentsUpdateWithWhereUniqueWithoutVehicleModelInput
    | Prisma.VehicleDocumentsUpdateWithWhereUniqueWithoutVehicleModelInput[];
  updateMany?:
    | Prisma.VehicleDocumentsUpdateManyWithWhereWithoutVehicleModelInput
    | Prisma.VehicleDocumentsUpdateManyWithWhereWithoutVehicleModelInput[];
  deleteMany?:
    | Prisma.VehicleDocumentsScalarWhereInput
    | Prisma.VehicleDocumentsScalarWhereInput[];
};

export type VehicleDocumentsUncheckedUpdateManyWithoutVehicleModelNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.VehicleDocumentsCreateWithoutVehicleModelInput,
          Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput
        >
      | Prisma.VehicleDocumentsCreateWithoutVehicleModelInput[]
      | Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput[];
    connectOrCreate?:
      | Prisma.VehicleDocumentsCreateOrConnectWithoutVehicleModelInput
      | Prisma.VehicleDocumentsCreateOrConnectWithoutVehicleModelInput[];
    upsert?:
      | Prisma.VehicleDocumentsUpsertWithWhereUniqueWithoutVehicleModelInput
      | Prisma.VehicleDocumentsUpsertWithWhereUniqueWithoutVehicleModelInput[];
    createMany?: Prisma.VehicleDocumentsCreateManyVehicleModelInputEnvelope;
    set?:
      | Prisma.VehicleDocumentsWhereUniqueInput
      | Prisma.VehicleDocumentsWhereUniqueInput[];
    disconnect?:
      | Prisma.VehicleDocumentsWhereUniqueInput
      | Prisma.VehicleDocumentsWhereUniqueInput[];
    delete?:
      | Prisma.VehicleDocumentsWhereUniqueInput
      | Prisma.VehicleDocumentsWhereUniqueInput[];
    connect?:
      | Prisma.VehicleDocumentsWhereUniqueInput
      | Prisma.VehicleDocumentsWhereUniqueInput[];
    update?:
      | Prisma.VehicleDocumentsUpdateWithWhereUniqueWithoutVehicleModelInput
      | Prisma.VehicleDocumentsUpdateWithWhereUniqueWithoutVehicleModelInput[];
    updateMany?:
      | Prisma.VehicleDocumentsUpdateManyWithWhereWithoutVehicleModelInput
      | Prisma.VehicleDocumentsUpdateManyWithWhereWithoutVehicleModelInput[];
    deleteMany?:
      | Prisma.VehicleDocumentsScalarWhereInput
      | Prisma.VehicleDocumentsScalarWhereInput[];
  };

export type VehicleDocumentsCreateWithoutVehicleModelInput = {
  id?: string;
  documentationType: $Enums.VehicleVideoType;
  documentationUrl: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleDocumentsUncheckedCreateWithoutVehicleModelInput = {
  id?: string;
  documentationType: $Enums.VehicleVideoType;
  documentationUrl: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleDocumentsCreateOrConnectWithoutVehicleModelInput = {
  where: Prisma.VehicleDocumentsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.VehicleDocumentsCreateWithoutVehicleModelInput,
    Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput
  >;
};

export type VehicleDocumentsCreateManyVehicleModelInputEnvelope = {
  data:
    | Prisma.VehicleDocumentsCreateManyVehicleModelInput
    | Prisma.VehicleDocumentsCreateManyVehicleModelInput[];
  skipDuplicates?: boolean;
};

export type VehicleDocumentsUpsertWithWhereUniqueWithoutVehicleModelInput = {
  where: Prisma.VehicleDocumentsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.VehicleDocumentsUpdateWithoutVehicleModelInput,
    Prisma.VehicleDocumentsUncheckedUpdateWithoutVehicleModelInput
  >;
  create: Prisma.XOR<
    Prisma.VehicleDocumentsCreateWithoutVehicleModelInput,
    Prisma.VehicleDocumentsUncheckedCreateWithoutVehicleModelInput
  >;
};

export type VehicleDocumentsUpdateWithWhereUniqueWithoutVehicleModelInput = {
  where: Prisma.VehicleDocumentsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.VehicleDocumentsUpdateWithoutVehicleModelInput,
    Prisma.VehicleDocumentsUncheckedUpdateWithoutVehicleModelInput
  >;
};

export type VehicleDocumentsUpdateManyWithWhereWithoutVehicleModelInput = {
  where: Prisma.VehicleDocumentsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.VehicleDocumentsUpdateManyMutationInput,
    Prisma.VehicleDocumentsUncheckedUpdateManyWithoutVehicleModelInput
  >;
};

export type VehicleDocumentsScalarWhereInput = {
  AND?:
    | Prisma.VehicleDocumentsScalarWhereInput
    | Prisma.VehicleDocumentsScalarWhereInput[];
  OR?: Prisma.VehicleDocumentsScalarWhereInput[];
  NOT?:
    | Prisma.VehicleDocumentsScalarWhereInput
    | Prisma.VehicleDocumentsScalarWhereInput[];
  id?: Prisma.UuidFilter<'VehicleDocuments'> | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeFilter<'VehicleDocuments'>
    | $Enums.VehicleVideoType;
  documentationUrl?: Prisma.StringFilter<'VehicleDocuments'> | string;
  description?: Prisma.StringNullableFilter<'VehicleDocuments'> | string | null;
  vehicleModelId?: Prisma.UuidFilter<'VehicleDocuments'> | string;
  createdAt?: Prisma.DateTimeFilter<'VehicleDocuments'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'VehicleDocuments'> | Date | string;
};

export type VehicleDocumentsCreateManyVehicleModelInput = {
  id?: string;
  documentationType: $Enums.VehicleVideoType;
  documentationUrl: string;
  description?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleDocumentsUpdateWithoutVehicleModelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  documentationUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleDocumentsUncheckedUpdateWithoutVehicleModelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  documentationUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleDocumentsUncheckedUpdateManyWithoutVehicleModelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  documentationType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  documentationUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleDocumentsSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    documentationType?: boolean;
    documentationUrl?: boolean;
    description?: boolean;
    vehicleModelId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['vehicleDocuments']
>;

export type VehicleDocumentsSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    documentationType?: boolean;
    documentationUrl?: boolean;
    description?: boolean;
    vehicleModelId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['vehicleDocuments']
>;

export type VehicleDocumentsSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    documentationType?: boolean;
    documentationUrl?: boolean;
    description?: boolean;
    vehicleModelId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['vehicleDocuments']
>;

export type VehicleDocumentsSelectScalar = {
  id?: boolean;
  documentationType?: boolean;
  documentationUrl?: boolean;
  description?: boolean;
  vehicleModelId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type VehicleDocumentsOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'documentationType'
  | 'documentationUrl'
  | 'description'
  | 'vehicleModelId'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['vehicleDocuments']
>;
export type VehicleDocumentsInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
};
export type VehicleDocumentsIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
};
export type VehicleDocumentsIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
};

export type $VehicleDocumentsPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'VehicleDocuments';
  objects: {
    vehicleModel: Prisma.$VehicleModelsPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      documentationType: $Enums.VehicleVideoType;
      documentationUrl: string;
      description: string | null;
      vehicleModelId: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['vehicleDocuments']
  >;
  composites: {};
};

export type VehicleDocumentsGetPayload<
  S extends boolean | null | undefined | VehicleDocumentsDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$VehicleDocumentsPayload, S>;

export type VehicleDocumentsCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  VehicleDocumentsFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: VehicleDocumentsCountAggregateInputType | true;
};

export interface VehicleDocumentsDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['VehicleDocuments'];
    meta: { name: 'VehicleDocuments' };
  };
  /**
   * Find zero or one VehicleDocuments that matches the filter.
   * @param {VehicleDocumentsFindUniqueArgs} args - Arguments to find a VehicleDocuments
   * @example
   * // Get one VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VehicleDocumentsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, VehicleDocumentsFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one VehicleDocuments that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VehicleDocumentsFindUniqueOrThrowArgs} args - Arguments to find a VehicleDocuments
   * @example
   * // Get one VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VehicleDocumentsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      VehicleDocumentsFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__VehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first VehicleDocuments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleDocumentsFindFirstArgs} args - Arguments to find a VehicleDocuments
   * @example
   * // Get one VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VehicleDocumentsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, VehicleDocumentsFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first VehicleDocuments that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleDocumentsFindFirstOrThrowArgs} args - Arguments to find a VehicleDocuments
   * @example
   * // Get one VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VehicleDocumentsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      VehicleDocumentsFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__VehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more VehicleDocuments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleDocumentsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.findMany()
   *
   * // Get first 10 VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const vehicleDocumentsWithIdOnly = await prisma.vehicleDocuments.findMany({ select: { id: true } })
   *
   */
  findMany<T extends VehicleDocumentsFindManyArgs>(
    args?: Prisma.SelectSubset<T, VehicleDocumentsFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a VehicleDocuments.
   * @param {VehicleDocumentsCreateArgs} args - Arguments to create a VehicleDocuments.
   * @example
   * // Create one VehicleDocuments
   * const VehicleDocuments = await prisma.vehicleDocuments.create({
   *   data: {
   *     // ... data to create a VehicleDocuments
   *   }
   * })
   *
   */
  create<T extends VehicleDocumentsCreateArgs>(
    args: Prisma.SelectSubset<T, VehicleDocumentsCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many VehicleDocuments.
   * @param {VehicleDocumentsCreateManyArgs} args - Arguments to create many VehicleDocuments.
   * @example
   * // Create many VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends VehicleDocumentsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, VehicleDocumentsCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many VehicleDocuments and returns the data saved in the database.
   * @param {VehicleDocumentsCreateManyAndReturnArgs} args - Arguments to create many VehicleDocuments.
   * @example
   * // Create many VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many VehicleDocuments and only return the `id`
   * const vehicleDocumentsWithIdOnly = await prisma.vehicleDocuments.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends VehicleDocumentsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      VehicleDocumentsCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a VehicleDocuments.
   * @param {VehicleDocumentsDeleteArgs} args - Arguments to delete one VehicleDocuments.
   * @example
   * // Delete one VehicleDocuments
   * const VehicleDocuments = await prisma.vehicleDocuments.delete({
   *   where: {
   *     // ... filter to delete one VehicleDocuments
   *   }
   * })
   *
   */
  delete<T extends VehicleDocumentsDeleteArgs>(
    args: Prisma.SelectSubset<T, VehicleDocumentsDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one VehicleDocuments.
   * @param {VehicleDocumentsUpdateArgs} args - Arguments to update one VehicleDocuments.
   * @example
   * // Update one VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends VehicleDocumentsUpdateArgs>(
    args: Prisma.SelectSubset<T, VehicleDocumentsUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more VehicleDocuments.
   * @param {VehicleDocumentsDeleteManyArgs} args - Arguments to filter VehicleDocuments to delete.
   * @example
   * // Delete a few VehicleDocuments
   * const { count } = await prisma.vehicleDocuments.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends VehicleDocumentsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, VehicleDocumentsDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more VehicleDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleDocumentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends VehicleDocumentsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, VehicleDocumentsUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more VehicleDocuments and returns the data updated in the database.
   * @param {VehicleDocumentsUpdateManyAndReturnArgs} args - Arguments to update many VehicleDocuments.
   * @example
   * // Update many VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more VehicleDocuments and only return the `id`
   * const vehicleDocumentsWithIdOnly = await prisma.vehicleDocuments.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends VehicleDocumentsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      VehicleDocumentsUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one VehicleDocuments.
   * @param {VehicleDocumentsUpsertArgs} args - Arguments to update or create a VehicleDocuments.
   * @example
   * // Update or create a VehicleDocuments
   * const vehicleDocuments = await prisma.vehicleDocuments.upsert({
   *   create: {
   *     // ... data to create a VehicleDocuments
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VehicleDocuments we want to update
   *   }
   * })
   */
  upsert<T extends VehicleDocumentsUpsertArgs>(
    args: Prisma.SelectSubset<T, VehicleDocumentsUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleDocumentsClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleDocumentsPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of VehicleDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleDocumentsCountArgs} args - Arguments to filter VehicleDocuments to count.
   * @example
   * // Count the number of VehicleDocuments
   * const count = await prisma.vehicleDocuments.count({
   *   where: {
   *     // ... the filter for the VehicleDocuments we want to count
   *   }
   * })
   **/
  count<T extends VehicleDocumentsCountArgs>(
    args?: Prisma.Subset<T, VehicleDocumentsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            VehicleDocumentsCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a VehicleDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleDocumentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends VehicleDocumentsAggregateArgs>(
    args: Prisma.Subset<T, VehicleDocumentsAggregateArgs>,
  ): Prisma.PrismaPromise<GetVehicleDocumentsAggregateType<T>>;

  /**
   * Group by VehicleDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleDocumentsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends VehicleDocumentsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VehicleDocumentsGroupByArgs['orderBy'] }
      : { orderBy?: VehicleDocumentsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      VehicleDocumentsGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetVehicleDocumentsGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the VehicleDocuments model
   */
  readonly fields: VehicleDocumentsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VehicleDocuments.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VehicleDocumentsClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  vehicleModel<T extends Prisma.VehicleModelsDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.VehicleModelsDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleModelsClient<
    | runtime.Types.Result.GetResult<
        Prisma.$VehicleModelsPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the VehicleDocuments model
 */
export interface VehicleDocumentsFieldRefs {
  readonly id: Prisma.FieldRef<'VehicleDocuments', 'String'>;
  readonly documentationType: Prisma.FieldRef<
    'VehicleDocuments',
    'VehicleVideoType'
  >;
  readonly documentationUrl: Prisma.FieldRef<'VehicleDocuments', 'String'>;
  readonly description: Prisma.FieldRef<'VehicleDocuments', 'String'>;
  readonly vehicleModelId: Prisma.FieldRef<'VehicleDocuments', 'String'>;
  readonly createdAt: Prisma.FieldRef<'VehicleDocuments', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'VehicleDocuments', 'DateTime'>;
}

// Custom InputTypes
/**
 * VehicleDocuments findUnique
 */
export type VehicleDocumentsFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleDocuments to fetch.
   */
  where: Prisma.VehicleDocumentsWhereUniqueInput;
};

/**
 * VehicleDocuments findUniqueOrThrow
 */
export type VehicleDocumentsFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleDocuments to fetch.
   */
  where: Prisma.VehicleDocumentsWhereUniqueInput;
};

/**
 * VehicleDocuments findFirst
 */
export type VehicleDocumentsFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleDocuments to fetch.
   */
  where?: Prisma.VehicleDocumentsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VehicleDocuments to fetch.
   */
  orderBy?:
    | Prisma.VehicleDocumentsOrderByWithRelationInput
    | Prisma.VehicleDocumentsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for VehicleDocuments.
   */
  cursor?: Prisma.VehicleDocumentsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VehicleDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VehicleDocuments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of VehicleDocuments.
   */
  distinct?:
    | Prisma.VehicleDocumentsScalarFieldEnum
    | Prisma.VehicleDocumentsScalarFieldEnum[];
};

/**
 * VehicleDocuments findFirstOrThrow
 */
export type VehicleDocumentsFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleDocuments to fetch.
   */
  where?: Prisma.VehicleDocumentsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VehicleDocuments to fetch.
   */
  orderBy?:
    | Prisma.VehicleDocumentsOrderByWithRelationInput
    | Prisma.VehicleDocumentsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for VehicleDocuments.
   */
  cursor?: Prisma.VehicleDocumentsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VehicleDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VehicleDocuments.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of VehicleDocuments.
   */
  distinct?:
    | Prisma.VehicleDocumentsScalarFieldEnum
    | Prisma.VehicleDocumentsScalarFieldEnum[];
};

/**
 * VehicleDocuments findMany
 */
export type VehicleDocumentsFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleDocuments to fetch.
   */
  where?: Prisma.VehicleDocumentsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VehicleDocuments to fetch.
   */
  orderBy?:
    | Prisma.VehicleDocumentsOrderByWithRelationInput
    | Prisma.VehicleDocumentsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing VehicleDocuments.
   */
  cursor?: Prisma.VehicleDocumentsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VehicleDocuments from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VehicleDocuments.
   */
  skip?: number;
  distinct?:
    | Prisma.VehicleDocumentsScalarFieldEnum
    | Prisma.VehicleDocumentsScalarFieldEnum[];
};

/**
 * VehicleDocuments create
 */
export type VehicleDocumentsCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
  /**
   * The data needed to create a VehicleDocuments.
   */
  data: Prisma.XOR<
    Prisma.VehicleDocumentsCreateInput,
    Prisma.VehicleDocumentsUncheckedCreateInput
  >;
};

/**
 * VehicleDocuments createMany
 */
export type VehicleDocumentsCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many VehicleDocuments.
   */
  data:
    | Prisma.VehicleDocumentsCreateManyInput
    | Prisma.VehicleDocumentsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * VehicleDocuments createManyAndReturn
 */
export type VehicleDocumentsCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * The data used to create many VehicleDocuments.
   */
  data:
    | Prisma.VehicleDocumentsCreateManyInput
    | Prisma.VehicleDocumentsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * VehicleDocuments update
 */
export type VehicleDocumentsUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
  /**
   * The data needed to update a VehicleDocuments.
   */
  data: Prisma.XOR<
    Prisma.VehicleDocumentsUpdateInput,
    Prisma.VehicleDocumentsUncheckedUpdateInput
  >;
  /**
   * Choose, which VehicleDocuments to update.
   */
  where: Prisma.VehicleDocumentsWhereUniqueInput;
};

/**
 * VehicleDocuments updateMany
 */
export type VehicleDocumentsUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update VehicleDocuments.
   */
  data: Prisma.XOR<
    Prisma.VehicleDocumentsUpdateManyMutationInput,
    Prisma.VehicleDocumentsUncheckedUpdateManyInput
  >;
  /**
   * Filter which VehicleDocuments to update
   */
  where?: Prisma.VehicleDocumentsWhereInput;
  /**
   * Limit how many VehicleDocuments to update.
   */
  limit?: number;
};

/**
 * VehicleDocuments updateManyAndReturn
 */
export type VehicleDocumentsUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * The data used to update VehicleDocuments.
   */
  data: Prisma.XOR<
    Prisma.VehicleDocumentsUpdateManyMutationInput,
    Prisma.VehicleDocumentsUncheckedUpdateManyInput
  >;
  /**
   * Filter which VehicleDocuments to update
   */
  where?: Prisma.VehicleDocumentsWhereInput;
  /**
   * Limit how many VehicleDocuments to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * VehicleDocuments upsert
 */
export type VehicleDocumentsUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
  /**
   * The filter to search for the VehicleDocuments to update in case it exists.
   */
  where: Prisma.VehicleDocumentsWhereUniqueInput;
  /**
   * In case the VehicleDocuments found by the `where` argument doesn't exist, create a new VehicleDocuments with this data.
   */
  create: Prisma.XOR<
    Prisma.VehicleDocumentsCreateInput,
    Prisma.VehicleDocumentsUncheckedCreateInput
  >;
  /**
   * In case the VehicleDocuments was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.VehicleDocumentsUpdateInput,
    Prisma.VehicleDocumentsUncheckedUpdateInput
  >;
};

/**
 * VehicleDocuments delete
 */
export type VehicleDocumentsDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
  /**
   * Filter which VehicleDocuments to delete.
   */
  where: Prisma.VehicleDocumentsWhereUniqueInput;
};

/**
 * VehicleDocuments deleteMany
 */
export type VehicleDocumentsDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which VehicleDocuments to delete
   */
  where?: Prisma.VehicleDocumentsWhereInput;
  /**
   * Limit how many VehicleDocuments to delete.
   */
  limit?: number;
};

/**
 * VehicleDocuments without action
 */
export type VehicleDocumentsDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleDocuments
   */
  select?: Prisma.VehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleDocuments
   */
  omit?: Prisma.VehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleDocumentsInclude<ExtArgs> | null;
};
