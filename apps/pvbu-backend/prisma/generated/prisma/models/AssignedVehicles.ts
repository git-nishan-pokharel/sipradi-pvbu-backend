/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AssignedVehicles` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model AssignedVehicles
 *
 */
export type AssignedVehiclesModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AssignedVehiclesPayload>;

export type AggregateAssignedVehicles = {
  _count: AssignedVehiclesCountAggregateOutputType | null;
  _min: AssignedVehiclesMinAggregateOutputType | null;
  _max: AssignedVehiclesMaxAggregateOutputType | null;
};

export type AssignedVehiclesMinAggregateOutputType = {
  id: string | null;
  chasisNumber: string | null;
  purchaseDate: Date | null;
  registrationNumber: string | null;
  vehicleColor: string | null;
  ownerId: string | null;
  vehicleModelId: string | null;
};

export type AssignedVehiclesMaxAggregateOutputType = {
  id: string | null;
  chasisNumber: string | null;
  purchaseDate: Date | null;
  registrationNumber: string | null;
  vehicleColor: string | null;
  ownerId: string | null;
  vehicleModelId: string | null;
};

export type AssignedVehiclesCountAggregateOutputType = {
  id: number;
  chasisNumber: number;
  purchaseDate: number;
  registrationNumber: number;
  vehicleColor: number;
  ownerId: number;
  vehicleModelId: number;
  _all: number;
};

export type AssignedVehiclesMinAggregateInputType = {
  id?: true;
  chasisNumber?: true;
  purchaseDate?: true;
  registrationNumber?: true;
  vehicleColor?: true;
  ownerId?: true;
  vehicleModelId?: true;
};

export type AssignedVehiclesMaxAggregateInputType = {
  id?: true;
  chasisNumber?: true;
  purchaseDate?: true;
  registrationNumber?: true;
  vehicleColor?: true;
  ownerId?: true;
  vehicleModelId?: true;
};

export type AssignedVehiclesCountAggregateInputType = {
  id?: true;
  chasisNumber?: true;
  purchaseDate?: true;
  registrationNumber?: true;
  vehicleColor?: true;
  ownerId?: true;
  vehicleModelId?: true;
  _all?: true;
};

export type AssignedVehiclesAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AssignedVehicles to aggregate.
   */
  where?: Prisma.AssignedVehiclesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignedVehicles to fetch.
   */
  orderBy?:
    | Prisma.AssignedVehiclesOrderByWithRelationInput
    | Prisma.AssignedVehiclesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AssignedVehiclesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignedVehicles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignedVehicles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AssignedVehicles
   **/
  _count?: true | AssignedVehiclesCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AssignedVehiclesMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AssignedVehiclesMaxAggregateInputType;
};

export type GetAssignedVehiclesAggregateType<
  T extends AssignedVehiclesAggregateArgs,
> = {
  [P in keyof T & keyof AggregateAssignedVehicles]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssignedVehicles[P]>
    : Prisma.GetScalarType<T[P], AggregateAssignedVehicles[P]>;
};

export type AssignedVehiclesGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AssignedVehiclesWhereInput;
  orderBy?:
    | Prisma.AssignedVehiclesOrderByWithAggregationInput
    | Prisma.AssignedVehiclesOrderByWithAggregationInput[];
  by:
    | Prisma.AssignedVehiclesScalarFieldEnum[]
    | Prisma.AssignedVehiclesScalarFieldEnum;
  having?: Prisma.AssignedVehiclesScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AssignedVehiclesCountAggregateInputType | true;
  _min?: AssignedVehiclesMinAggregateInputType;
  _max?: AssignedVehiclesMaxAggregateInputType;
};

export type AssignedVehiclesGroupByOutputType = {
  id: string;
  chasisNumber: string;
  purchaseDate: Date;
  registrationNumber: string;
  vehicleColor: string;
  ownerId: string;
  vehicleModelId: string;
  _count: AssignedVehiclesCountAggregateOutputType | null;
  _min: AssignedVehiclesMinAggregateOutputType | null;
  _max: AssignedVehiclesMaxAggregateOutputType | null;
};

type GetAssignedVehiclesGroupByPayload<T extends AssignedVehiclesGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AssignedVehiclesGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof AssignedVehiclesGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssignedVehiclesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssignedVehiclesGroupByOutputType[P]>;
      }
    >
  >;

export type AssignedVehiclesWhereInput = {
  AND?: Prisma.AssignedVehiclesWhereInput | Prisma.AssignedVehiclesWhereInput[];
  OR?: Prisma.AssignedVehiclesWhereInput[];
  NOT?: Prisma.AssignedVehiclesWhereInput | Prisma.AssignedVehiclesWhereInput[];
  id?: Prisma.UuidFilter<'AssignedVehicles'> | string;
  chasisNumber?: Prisma.StringFilter<'AssignedVehicles'> | string;
  purchaseDate?: Prisma.DateTimeFilter<'AssignedVehicles'> | Date | string;
  registrationNumber?: Prisma.StringFilter<'AssignedVehicles'> | string;
  vehicleColor?: Prisma.StringFilter<'AssignedVehicles'> | string;
  ownerId?: Prisma.UuidFilter<'AssignedVehicles'> | string;
  vehicleModelId?: Prisma.UuidFilter<'AssignedVehicles'> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  vehicleModel?: Prisma.XOR<
    Prisma.VehicleModelsScalarRelationFilter,
    Prisma.VehicleModelsWhereInput
  >;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsListRelationFilter;
};

export type AssignedVehiclesOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  chasisNumber?: Prisma.SortOrder;
  purchaseDate?: Prisma.SortOrder;
  registrationNumber?: Prisma.SortOrder;
  vehicleColor?: Prisma.SortOrder;
  ownerId?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  vehicleModel?: Prisma.VehicleModelsOrderByWithRelationInput;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsOrderByRelationAggregateInput;
};

export type AssignedVehiclesWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    chasisNumber?: string;
    registrationNumber?: string;
    AND?:
      | Prisma.AssignedVehiclesWhereInput
      | Prisma.AssignedVehiclesWhereInput[];
    OR?: Prisma.AssignedVehiclesWhereInput[];
    NOT?:
      | Prisma.AssignedVehiclesWhereInput
      | Prisma.AssignedVehiclesWhereInput[];
    purchaseDate?: Prisma.DateTimeFilter<'AssignedVehicles'> | Date | string;
    vehicleColor?: Prisma.StringFilter<'AssignedVehicles'> | string;
    ownerId?: Prisma.UuidFilter<'AssignedVehicles'> | string;
    vehicleModelId?: Prisma.UuidFilter<'AssignedVehicles'> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    vehicleModel?: Prisma.XOR<
      Prisma.VehicleModelsScalarRelationFilter,
      Prisma.VehicleModelsWhereInput
    >;
    customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsListRelationFilter;
  },
  'id' | 'chasisNumber' | 'registrationNumber'
>;

export type AssignedVehiclesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  chasisNumber?: Prisma.SortOrder;
  purchaseDate?: Prisma.SortOrder;
  registrationNumber?: Prisma.SortOrder;
  vehicleColor?: Prisma.SortOrder;
  ownerId?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  _count?: Prisma.AssignedVehiclesCountOrderByAggregateInput;
  _max?: Prisma.AssignedVehiclesMaxOrderByAggregateInput;
  _min?: Prisma.AssignedVehiclesMinOrderByAggregateInput;
};

export type AssignedVehiclesScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AssignedVehiclesScalarWhereWithAggregatesInput
    | Prisma.AssignedVehiclesScalarWhereWithAggregatesInput[];
  OR?: Prisma.AssignedVehiclesScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AssignedVehiclesScalarWhereWithAggregatesInput
    | Prisma.AssignedVehiclesScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'AssignedVehicles'> | string;
  chasisNumber?: Prisma.StringWithAggregatesFilter<'AssignedVehicles'> | string;
  purchaseDate?:
    | Prisma.DateTimeWithAggregatesFilter<'AssignedVehicles'>
    | Date
    | string;
  registrationNumber?:
    | Prisma.StringWithAggregatesFilter<'AssignedVehicles'>
    | string;
  vehicleColor?: Prisma.StringWithAggregatesFilter<'AssignedVehicles'> | string;
  ownerId?: Prisma.UuidWithAggregatesFilter<'AssignedVehicles'> | string;
  vehicleModelId?: Prisma.UuidWithAggregatesFilter<'AssignedVehicles'> | string;
};

export type AssignedVehiclesCreateInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  user: Prisma.UserCreateNestedOneWithoutAssignedVehiclesInput;
  vehicleModel: Prisma.VehicleModelsCreateNestedOneWithoutAssignedVehiclesInput;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsCreateNestedManyWithoutAssignedVehiclesInput;
};

export type AssignedVehiclesUncheckedCreateInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  ownerId: string;
  vehicleModelId: string;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsUncheckedCreateNestedManyWithoutAssignedVehiclesInput;
};

export type AssignedVehiclesUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneRequiredWithoutAssignedVehiclesNestedInput;
  vehicleModel?: Prisma.VehicleModelsUpdateOneRequiredWithoutAssignedVehiclesNestedInput;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsUpdateManyWithoutAssignedVehiclesNestedInput;
};

export type AssignedVehiclesUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleModelId?: Prisma.StringFieldUpdateOperationsInput | string;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsUncheckedUpdateManyWithoutAssignedVehiclesNestedInput;
};

export type AssignedVehiclesCreateManyInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  ownerId: string;
  vehicleModelId: string;
};

export type AssignedVehiclesUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AssignedVehiclesUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleModelId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AssignedVehiclesListRelationFilter = {
  every?: Prisma.AssignedVehiclesWhereInput;
  some?: Prisma.AssignedVehiclesWhereInput;
  none?: Prisma.AssignedVehiclesWhereInput;
};

export type AssignedVehiclesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AssignedVehiclesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chasisNumber?: Prisma.SortOrder;
  purchaseDate?: Prisma.SortOrder;
  registrationNumber?: Prisma.SortOrder;
  vehicleColor?: Prisma.SortOrder;
  ownerId?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
};

export type AssignedVehiclesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chasisNumber?: Prisma.SortOrder;
  purchaseDate?: Prisma.SortOrder;
  registrationNumber?: Prisma.SortOrder;
  vehicleColor?: Prisma.SortOrder;
  ownerId?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
};

export type AssignedVehiclesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chasisNumber?: Prisma.SortOrder;
  purchaseDate?: Prisma.SortOrder;
  registrationNumber?: Prisma.SortOrder;
  vehicleColor?: Prisma.SortOrder;
  ownerId?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
};

export type AssignedVehiclesScalarRelationFilter = {
  is?: Prisma.AssignedVehiclesWhereInput;
  isNot?: Prisma.AssignedVehiclesWhereInput;
};

export type AssignedVehiclesCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignedVehiclesCreateWithoutUserInput,
        Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput
      >
    | Prisma.AssignedVehiclesCreateWithoutUserInput[]
    | Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AssignedVehiclesCreateOrConnectWithoutUserInput
    | Prisma.AssignedVehiclesCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AssignedVehiclesCreateManyUserInputEnvelope;
  connect?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
};

export type AssignedVehiclesUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignedVehiclesCreateWithoutUserInput,
        Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput
      >
    | Prisma.AssignedVehiclesCreateWithoutUserInput[]
    | Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AssignedVehiclesCreateOrConnectWithoutUserInput
    | Prisma.AssignedVehiclesCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.AssignedVehiclesCreateManyUserInputEnvelope;
  connect?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
};

export type AssignedVehiclesUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignedVehiclesCreateWithoutUserInput,
        Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput
      >
    | Prisma.AssignedVehiclesCreateWithoutUserInput[]
    | Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AssignedVehiclesCreateOrConnectWithoutUserInput
    | Prisma.AssignedVehiclesCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AssignedVehiclesUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AssignedVehiclesUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AssignedVehiclesCreateManyUserInputEnvelope;
  set?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  disconnect?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  delete?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  connect?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  update?:
    | Prisma.AssignedVehiclesUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AssignedVehiclesUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AssignedVehiclesUpdateManyWithWhereWithoutUserInput
    | Prisma.AssignedVehiclesUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.AssignedVehiclesScalarWhereInput
    | Prisma.AssignedVehiclesScalarWhereInput[];
};

export type AssignedVehiclesUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignedVehiclesCreateWithoutUserInput,
        Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput
      >
    | Prisma.AssignedVehiclesCreateWithoutUserInput[]
    | Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.AssignedVehiclesCreateOrConnectWithoutUserInput
    | Prisma.AssignedVehiclesCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.AssignedVehiclesUpsertWithWhereUniqueWithoutUserInput
    | Prisma.AssignedVehiclesUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.AssignedVehiclesCreateManyUserInputEnvelope;
  set?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  disconnect?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  delete?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  connect?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  update?:
    | Prisma.AssignedVehiclesUpdateWithWhereUniqueWithoutUserInput
    | Prisma.AssignedVehiclesUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.AssignedVehiclesUpdateManyWithWhereWithoutUserInput
    | Prisma.AssignedVehiclesUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.AssignedVehiclesScalarWhereInput
    | Prisma.AssignedVehiclesScalarWhereInput[];
};

export type AssignedVehiclesCreateNestedManyWithoutVehicleModelInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignedVehiclesCreateWithoutVehicleModelInput,
        Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput
      >
    | Prisma.AssignedVehiclesCreateWithoutVehicleModelInput[]
    | Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput[];
  connectOrCreate?:
    | Prisma.AssignedVehiclesCreateOrConnectWithoutVehicleModelInput
    | Prisma.AssignedVehiclesCreateOrConnectWithoutVehicleModelInput[];
  createMany?: Prisma.AssignedVehiclesCreateManyVehicleModelInputEnvelope;
  connect?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
};

export type AssignedVehiclesUncheckedCreateNestedManyWithoutVehicleModelInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.AssignedVehiclesCreateWithoutVehicleModelInput,
          Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput
        >
      | Prisma.AssignedVehiclesCreateWithoutVehicleModelInput[]
      | Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput[];
    connectOrCreate?:
      | Prisma.AssignedVehiclesCreateOrConnectWithoutVehicleModelInput
      | Prisma.AssignedVehiclesCreateOrConnectWithoutVehicleModelInput[];
    createMany?: Prisma.AssignedVehiclesCreateManyVehicleModelInputEnvelope;
    connect?:
      | Prisma.AssignedVehiclesWhereUniqueInput
      | Prisma.AssignedVehiclesWhereUniqueInput[];
  };

export type AssignedVehiclesUpdateManyWithoutVehicleModelNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AssignedVehiclesCreateWithoutVehicleModelInput,
        Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput
      >
    | Prisma.AssignedVehiclesCreateWithoutVehicleModelInput[]
    | Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput[];
  connectOrCreate?:
    | Prisma.AssignedVehiclesCreateOrConnectWithoutVehicleModelInput
    | Prisma.AssignedVehiclesCreateOrConnectWithoutVehicleModelInput[];
  upsert?:
    | Prisma.AssignedVehiclesUpsertWithWhereUniqueWithoutVehicleModelInput
    | Prisma.AssignedVehiclesUpsertWithWhereUniqueWithoutVehicleModelInput[];
  createMany?: Prisma.AssignedVehiclesCreateManyVehicleModelInputEnvelope;
  set?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  disconnect?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  delete?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  connect?:
    | Prisma.AssignedVehiclesWhereUniqueInput
    | Prisma.AssignedVehiclesWhereUniqueInput[];
  update?:
    | Prisma.AssignedVehiclesUpdateWithWhereUniqueWithoutVehicleModelInput
    | Prisma.AssignedVehiclesUpdateWithWhereUniqueWithoutVehicleModelInput[];
  updateMany?:
    | Prisma.AssignedVehiclesUpdateManyWithWhereWithoutVehicleModelInput
    | Prisma.AssignedVehiclesUpdateManyWithWhereWithoutVehicleModelInput[];
  deleteMany?:
    | Prisma.AssignedVehiclesScalarWhereInput
    | Prisma.AssignedVehiclesScalarWhereInput[];
};

export type AssignedVehiclesUncheckedUpdateManyWithoutVehicleModelNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.AssignedVehiclesCreateWithoutVehicleModelInput,
          Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput
        >
      | Prisma.AssignedVehiclesCreateWithoutVehicleModelInput[]
      | Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput[];
    connectOrCreate?:
      | Prisma.AssignedVehiclesCreateOrConnectWithoutVehicleModelInput
      | Prisma.AssignedVehiclesCreateOrConnectWithoutVehicleModelInput[];
    upsert?:
      | Prisma.AssignedVehiclesUpsertWithWhereUniqueWithoutVehicleModelInput
      | Prisma.AssignedVehiclesUpsertWithWhereUniqueWithoutVehicleModelInput[];
    createMany?: Prisma.AssignedVehiclesCreateManyVehicleModelInputEnvelope;
    set?:
      | Prisma.AssignedVehiclesWhereUniqueInput
      | Prisma.AssignedVehiclesWhereUniqueInput[];
    disconnect?:
      | Prisma.AssignedVehiclesWhereUniqueInput
      | Prisma.AssignedVehiclesWhereUniqueInput[];
    delete?:
      | Prisma.AssignedVehiclesWhereUniqueInput
      | Prisma.AssignedVehiclesWhereUniqueInput[];
    connect?:
      | Prisma.AssignedVehiclesWhereUniqueInput
      | Prisma.AssignedVehiclesWhereUniqueInput[];
    update?:
      | Prisma.AssignedVehiclesUpdateWithWhereUniqueWithoutVehicleModelInput
      | Prisma.AssignedVehiclesUpdateWithWhereUniqueWithoutVehicleModelInput[];
    updateMany?:
      | Prisma.AssignedVehiclesUpdateManyWithWhereWithoutVehicleModelInput
      | Prisma.AssignedVehiclesUpdateManyWithWhereWithoutVehicleModelInput[];
    deleteMany?:
      | Prisma.AssignedVehiclesScalarWhereInput
      | Prisma.AssignedVehiclesScalarWhereInput[];
  };

export type AssignedVehiclesCreateNestedOneWithoutCustomerVehicleDocumentsInput =
  {
    create?: Prisma.XOR<
      Prisma.AssignedVehiclesCreateWithoutCustomerVehicleDocumentsInput,
      Prisma.AssignedVehiclesUncheckedCreateWithoutCustomerVehicleDocumentsInput
    >;
    connectOrCreate?: Prisma.AssignedVehiclesCreateOrConnectWithoutCustomerVehicleDocumentsInput;
    connect?: Prisma.AssignedVehiclesWhereUniqueInput;
  };

export type AssignedVehiclesUpdateOneRequiredWithoutCustomerVehicleDocumentsNestedInput =
  {
    create?: Prisma.XOR<
      Prisma.AssignedVehiclesCreateWithoutCustomerVehicleDocumentsInput,
      Prisma.AssignedVehiclesUncheckedCreateWithoutCustomerVehicleDocumentsInput
    >;
    connectOrCreate?: Prisma.AssignedVehiclesCreateOrConnectWithoutCustomerVehicleDocumentsInput;
    upsert?: Prisma.AssignedVehiclesUpsertWithoutCustomerVehicleDocumentsInput;
    connect?: Prisma.AssignedVehiclesWhereUniqueInput;
    update?: Prisma.XOR<
      Prisma.XOR<
        Prisma.AssignedVehiclesUpdateToOneWithWhereWithoutCustomerVehicleDocumentsInput,
        Prisma.AssignedVehiclesUpdateWithoutCustomerVehicleDocumentsInput
      >,
      Prisma.AssignedVehiclesUncheckedUpdateWithoutCustomerVehicleDocumentsInput
    >;
  };

export type AssignedVehiclesCreateWithoutUserInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  vehicleModel: Prisma.VehicleModelsCreateNestedOneWithoutAssignedVehiclesInput;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsCreateNestedManyWithoutAssignedVehiclesInput;
};

export type AssignedVehiclesUncheckedCreateWithoutUserInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  vehicleModelId: string;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsUncheckedCreateNestedManyWithoutAssignedVehiclesInput;
};

export type AssignedVehiclesCreateOrConnectWithoutUserInput = {
  where: Prisma.AssignedVehiclesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AssignedVehiclesCreateWithoutUserInput,
    Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput
  >;
};

export type AssignedVehiclesCreateManyUserInputEnvelope = {
  data:
    | Prisma.AssignedVehiclesCreateManyUserInput
    | Prisma.AssignedVehiclesCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type AssignedVehiclesUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AssignedVehiclesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateWithoutUserInput,
    Prisma.AssignedVehiclesUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.AssignedVehiclesCreateWithoutUserInput,
    Prisma.AssignedVehiclesUncheckedCreateWithoutUserInput
  >;
};

export type AssignedVehiclesUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AssignedVehiclesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateWithoutUserInput,
    Prisma.AssignedVehiclesUncheckedUpdateWithoutUserInput
  >;
};

export type AssignedVehiclesUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AssignedVehiclesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateManyMutationInput,
    Prisma.AssignedVehiclesUncheckedUpdateManyWithoutUserInput
  >;
};

export type AssignedVehiclesScalarWhereInput = {
  AND?:
    | Prisma.AssignedVehiclesScalarWhereInput
    | Prisma.AssignedVehiclesScalarWhereInput[];
  OR?: Prisma.AssignedVehiclesScalarWhereInput[];
  NOT?:
    | Prisma.AssignedVehiclesScalarWhereInput
    | Prisma.AssignedVehiclesScalarWhereInput[];
  id?: Prisma.UuidFilter<'AssignedVehicles'> | string;
  chasisNumber?: Prisma.StringFilter<'AssignedVehicles'> | string;
  purchaseDate?: Prisma.DateTimeFilter<'AssignedVehicles'> | Date | string;
  registrationNumber?: Prisma.StringFilter<'AssignedVehicles'> | string;
  vehicleColor?: Prisma.StringFilter<'AssignedVehicles'> | string;
  ownerId?: Prisma.UuidFilter<'AssignedVehicles'> | string;
  vehicleModelId?: Prisma.UuidFilter<'AssignedVehicles'> | string;
};

export type AssignedVehiclesCreateWithoutVehicleModelInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  user: Prisma.UserCreateNestedOneWithoutAssignedVehiclesInput;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsCreateNestedManyWithoutAssignedVehiclesInput;
};

export type AssignedVehiclesUncheckedCreateWithoutVehicleModelInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  ownerId: string;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsUncheckedCreateNestedManyWithoutAssignedVehiclesInput;
};

export type AssignedVehiclesCreateOrConnectWithoutVehicleModelInput = {
  where: Prisma.AssignedVehiclesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AssignedVehiclesCreateWithoutVehicleModelInput,
    Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput
  >;
};

export type AssignedVehiclesCreateManyVehicleModelInputEnvelope = {
  data:
    | Prisma.AssignedVehiclesCreateManyVehicleModelInput
    | Prisma.AssignedVehiclesCreateManyVehicleModelInput[];
  skipDuplicates?: boolean;
};

export type AssignedVehiclesUpsertWithWhereUniqueWithoutVehicleModelInput = {
  where: Prisma.AssignedVehiclesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateWithoutVehicleModelInput,
    Prisma.AssignedVehiclesUncheckedUpdateWithoutVehicleModelInput
  >;
  create: Prisma.XOR<
    Prisma.AssignedVehiclesCreateWithoutVehicleModelInput,
    Prisma.AssignedVehiclesUncheckedCreateWithoutVehicleModelInput
  >;
};

export type AssignedVehiclesUpdateWithWhereUniqueWithoutVehicleModelInput = {
  where: Prisma.AssignedVehiclesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateWithoutVehicleModelInput,
    Prisma.AssignedVehiclesUncheckedUpdateWithoutVehicleModelInput
  >;
};

export type AssignedVehiclesUpdateManyWithWhereWithoutVehicleModelInput = {
  where: Prisma.AssignedVehiclesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateManyMutationInput,
    Prisma.AssignedVehiclesUncheckedUpdateManyWithoutVehicleModelInput
  >;
};

export type AssignedVehiclesCreateWithoutCustomerVehicleDocumentsInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  user: Prisma.UserCreateNestedOneWithoutAssignedVehiclesInput;
  vehicleModel: Prisma.VehicleModelsCreateNestedOneWithoutAssignedVehiclesInput;
};

export type AssignedVehiclesUncheckedCreateWithoutCustomerVehicleDocumentsInput =
  {
    id?: string;
    chasisNumber: string;
    purchaseDate: Date | string;
    registrationNumber: string;
    vehicleColor: string;
    ownerId: string;
    vehicleModelId: string;
  };

export type AssignedVehiclesCreateOrConnectWithoutCustomerVehicleDocumentsInput =
  {
    where: Prisma.AssignedVehiclesWhereUniqueInput;
    create: Prisma.XOR<
      Prisma.AssignedVehiclesCreateWithoutCustomerVehicleDocumentsInput,
      Prisma.AssignedVehiclesUncheckedCreateWithoutCustomerVehicleDocumentsInput
    >;
  };

export type AssignedVehiclesUpsertWithoutCustomerVehicleDocumentsInput = {
  update: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateWithoutCustomerVehicleDocumentsInput,
    Prisma.AssignedVehiclesUncheckedUpdateWithoutCustomerVehicleDocumentsInput
  >;
  create: Prisma.XOR<
    Prisma.AssignedVehiclesCreateWithoutCustomerVehicleDocumentsInput,
    Prisma.AssignedVehiclesUncheckedCreateWithoutCustomerVehicleDocumentsInput
  >;
  where?: Prisma.AssignedVehiclesWhereInput;
};

export type AssignedVehiclesUpdateToOneWithWhereWithoutCustomerVehicleDocumentsInput =
  {
    where?: Prisma.AssignedVehiclesWhereInput;
    data: Prisma.XOR<
      Prisma.AssignedVehiclesUpdateWithoutCustomerVehicleDocumentsInput,
      Prisma.AssignedVehiclesUncheckedUpdateWithoutCustomerVehicleDocumentsInput
    >;
  };

export type AssignedVehiclesUpdateWithoutCustomerVehicleDocumentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneRequiredWithoutAssignedVehiclesNestedInput;
  vehicleModel?: Prisma.VehicleModelsUpdateOneRequiredWithoutAssignedVehiclesNestedInput;
};

export type AssignedVehiclesUncheckedUpdateWithoutCustomerVehicleDocumentsInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string;
    chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
    purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
    registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
    vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
    ownerId?: Prisma.StringFieldUpdateOperationsInput | string;
    vehicleModelId?: Prisma.StringFieldUpdateOperationsInput | string;
  };

export type AssignedVehiclesCreateManyUserInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  vehicleModelId: string;
};

export type AssignedVehiclesUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleModel?: Prisma.VehicleModelsUpdateOneRequiredWithoutAssignedVehiclesNestedInput;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsUpdateManyWithoutAssignedVehiclesNestedInput;
};

export type AssignedVehiclesUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleModelId?: Prisma.StringFieldUpdateOperationsInput | string;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsUncheckedUpdateManyWithoutAssignedVehiclesNestedInput;
};

export type AssignedVehiclesUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleModelId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type AssignedVehiclesCreateManyVehicleModelInput = {
  id?: string;
  chasisNumber: string;
  purchaseDate: Date | string;
  registrationNumber: string;
  vehicleColor: string;
  ownerId: string;
};

export type AssignedVehiclesUpdateWithoutVehicleModelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  user?: Prisma.UserUpdateOneRequiredWithoutAssignedVehiclesNestedInput;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsUpdateManyWithoutAssignedVehiclesNestedInput;
};

export type AssignedVehiclesUncheckedUpdateWithoutVehicleModelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string;
  customerVehicleDocuments?: Prisma.CustomerVehicleDocumentsUncheckedUpdateManyWithoutAssignedVehiclesNestedInput;
};

export type AssignedVehiclesUncheckedUpdateManyWithoutVehicleModelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  chasisNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  purchaseDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  registrationNumber?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleColor?: Prisma.StringFieldUpdateOperationsInput | string;
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string;
};

/**
 * Count Type AssignedVehiclesCountOutputType
 */

export type AssignedVehiclesCountOutputType = {
  customerVehicleDocuments: number;
};

export type AssignedVehiclesCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  customerVehicleDocuments?:
    | boolean
    | AssignedVehiclesCountOutputTypeCountCustomerVehicleDocumentsArgs;
};

/**
 * AssignedVehiclesCountOutputType without action
 */
export type AssignedVehiclesCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehiclesCountOutputType
   */
  select?: Prisma.AssignedVehiclesCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * AssignedVehiclesCountOutputType without action
 */
export type AssignedVehiclesCountOutputTypeCountCustomerVehicleDocumentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
};

export type AssignedVehiclesSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chasisNumber?: boolean;
    purchaseDate?: boolean;
    registrationNumber?: boolean;
    vehicleColor?: boolean;
    ownerId?: boolean;
    vehicleModelId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
    customerVehicleDocuments?:
      | boolean
      | Prisma.AssignedVehicles$customerVehicleDocumentsArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.AssignedVehiclesCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['assignedVehicles']
>;

export type AssignedVehiclesSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chasisNumber?: boolean;
    purchaseDate?: boolean;
    registrationNumber?: boolean;
    vehicleColor?: boolean;
    ownerId?: boolean;
    vehicleModelId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['assignedVehicles']
>;

export type AssignedVehiclesSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chasisNumber?: boolean;
    purchaseDate?: boolean;
    registrationNumber?: boolean;
    vehicleColor?: boolean;
    ownerId?: boolean;
    vehicleModelId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['assignedVehicles']
>;

export type AssignedVehiclesSelectScalar = {
  id?: boolean;
  chasisNumber?: boolean;
  purchaseDate?: boolean;
  registrationNumber?: boolean;
  vehicleColor?: boolean;
  ownerId?: boolean;
  vehicleModelId?: boolean;
};

export type AssignedVehiclesOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'chasisNumber'
  | 'purchaseDate'
  | 'registrationNumber'
  | 'vehicleColor'
  | 'ownerId'
  | 'vehicleModelId',
  ExtArgs['result']['assignedVehicles']
>;
export type AssignedVehiclesInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
  customerVehicleDocuments?:
    | boolean
    | Prisma.AssignedVehicles$customerVehicleDocumentsArgs<ExtArgs>;
  _count?: boolean | Prisma.AssignedVehiclesCountOutputTypeDefaultArgs<ExtArgs>;
};
export type AssignedVehiclesIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
};
export type AssignedVehiclesIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
};

export type $AssignedVehiclesPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'AssignedVehicles';
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    vehicleModel: Prisma.$VehicleModelsPayload<ExtArgs>;
    customerVehicleDocuments: Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      chasisNumber: string;
      purchaseDate: Date;
      registrationNumber: string;
      vehicleColor: string;
      ownerId: string;
      vehicleModelId: string;
    },
    ExtArgs['result']['assignedVehicles']
  >;
  composites: {};
};

export type AssignedVehiclesGetPayload<
  S extends boolean | null | undefined | AssignedVehiclesDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AssignedVehiclesPayload, S>;

export type AssignedVehiclesCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AssignedVehiclesFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: AssignedVehiclesCountAggregateInputType | true;
};

export interface AssignedVehiclesDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['AssignedVehicles'];
    meta: { name: 'AssignedVehicles' };
  };
  /**
   * Find zero or one AssignedVehicles that matches the filter.
   * @param {AssignedVehiclesFindUniqueArgs} args - Arguments to find a AssignedVehicles
   * @example
   * // Get one AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssignedVehiclesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AssignedVehiclesFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignedVehiclesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AssignedVehicles that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssignedVehiclesFindUniqueOrThrowArgs} args - Arguments to find a AssignedVehicles
   * @example
   * // Get one AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssignedVehiclesFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      AssignedVehiclesFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AssignedVehiclesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AssignedVehicles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignedVehiclesFindFirstArgs} args - Arguments to find a AssignedVehicles
   * @example
   * // Get one AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssignedVehiclesFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AssignedVehiclesFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignedVehiclesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AssignedVehicles that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignedVehiclesFindFirstOrThrowArgs} args - Arguments to find a AssignedVehicles
   * @example
   * // Get one AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssignedVehiclesFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      AssignedVehiclesFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__AssignedVehiclesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AssignedVehicles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignedVehiclesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.findMany()
   *
   * // Get first 10 AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const assignedVehiclesWithIdOnly = await prisma.assignedVehicles.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AssignedVehiclesFindManyArgs>(
    args?: Prisma.SelectSubset<T, AssignedVehiclesFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AssignedVehicles.
   * @param {AssignedVehiclesCreateArgs} args - Arguments to create a AssignedVehicles.
   * @example
   * // Create one AssignedVehicles
   * const AssignedVehicles = await prisma.assignedVehicles.create({
   *   data: {
   *     // ... data to create a AssignedVehicles
   *   }
   * })
   *
   */
  create<T extends AssignedVehiclesCreateArgs>(
    args: Prisma.SelectSubset<T, AssignedVehiclesCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignedVehiclesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AssignedVehicles.
   * @param {AssignedVehiclesCreateManyArgs} args - Arguments to create many AssignedVehicles.
   * @example
   * // Create many AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AssignedVehiclesCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AssignedVehiclesCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AssignedVehicles and returns the data saved in the database.
   * @param {AssignedVehiclesCreateManyAndReturnArgs} args - Arguments to create many AssignedVehicles.
   * @example
   * // Create many AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AssignedVehicles and only return the `id`
   * const assignedVehiclesWithIdOnly = await prisma.assignedVehicles.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AssignedVehiclesCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      AssignedVehiclesCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AssignedVehicles.
   * @param {AssignedVehiclesDeleteArgs} args - Arguments to delete one AssignedVehicles.
   * @example
   * // Delete one AssignedVehicles
   * const AssignedVehicles = await prisma.assignedVehicles.delete({
   *   where: {
   *     // ... filter to delete one AssignedVehicles
   *   }
   * })
   *
   */
  delete<T extends AssignedVehiclesDeleteArgs>(
    args: Prisma.SelectSubset<T, AssignedVehiclesDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignedVehiclesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AssignedVehicles.
   * @param {AssignedVehiclesUpdateArgs} args - Arguments to update one AssignedVehicles.
   * @example
   * // Update one AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AssignedVehiclesUpdateArgs>(
    args: Prisma.SelectSubset<T, AssignedVehiclesUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignedVehiclesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AssignedVehicles.
   * @param {AssignedVehiclesDeleteManyArgs} args - Arguments to filter AssignedVehicles to delete.
   * @example
   * // Delete a few AssignedVehicles
   * const { count } = await prisma.assignedVehicles.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AssignedVehiclesDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AssignedVehiclesDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AssignedVehicles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignedVehiclesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AssignedVehiclesUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AssignedVehiclesUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AssignedVehicles and returns the data updated in the database.
   * @param {AssignedVehiclesUpdateManyAndReturnArgs} args - Arguments to update many AssignedVehicles.
   * @example
   * // Update many AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AssignedVehicles and only return the `id`
   * const assignedVehiclesWithIdOnly = await prisma.assignedVehicles.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AssignedVehiclesUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      AssignedVehiclesUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AssignedVehicles.
   * @param {AssignedVehiclesUpsertArgs} args - Arguments to update or create a AssignedVehicles.
   * @example
   * // Update or create a AssignedVehicles
   * const assignedVehicles = await prisma.assignedVehicles.upsert({
   *   create: {
   *     // ... data to create a AssignedVehicles
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AssignedVehicles we want to update
   *   }
   * })
   */
  upsert<T extends AssignedVehiclesUpsertArgs>(
    args: Prisma.SelectSubset<T, AssignedVehiclesUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AssignedVehiclesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AssignedVehiclesPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AssignedVehicles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignedVehiclesCountArgs} args - Arguments to filter AssignedVehicles to count.
   * @example
   * // Count the number of AssignedVehicles
   * const count = await prisma.assignedVehicles.count({
   *   where: {
   *     // ... the filter for the AssignedVehicles we want to count
   *   }
   * })
   **/
  count<T extends AssignedVehiclesCountArgs>(
    args?: Prisma.Subset<T, AssignedVehiclesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            AssignedVehiclesCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AssignedVehicles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignedVehiclesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AssignedVehiclesAggregateArgs>(
    args: Prisma.Subset<T, AssignedVehiclesAggregateArgs>,
  ): Prisma.PrismaPromise<GetAssignedVehiclesAggregateType<T>>;

  /**
   * Group by AssignedVehicles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssignedVehiclesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AssignedVehiclesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssignedVehiclesGroupByArgs['orderBy'] }
      : { orderBy?: AssignedVehiclesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      AssignedVehiclesGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetAssignedVehiclesGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AssignedVehicles model
   */
  readonly fields: AssignedVehiclesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AssignedVehicles.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssignedVehiclesClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  vehicleModel<T extends Prisma.VehicleModelsDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.VehicleModelsDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleModelsClient<
    | runtime.Types.Result.GetResult<
        Prisma.$VehicleModelsPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  customerVehicleDocuments<
    T extends
      Prisma.AssignedVehicles$customerVehicleDocumentsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<
      T,
      Prisma.AssignedVehicles$customerVehicleDocumentsArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$CustomerVehicleDocumentsPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AssignedVehicles model
 */
export interface AssignedVehiclesFieldRefs {
  readonly id: Prisma.FieldRef<'AssignedVehicles', 'String'>;
  readonly chasisNumber: Prisma.FieldRef<'AssignedVehicles', 'String'>;
  readonly purchaseDate: Prisma.FieldRef<'AssignedVehicles', 'DateTime'>;
  readonly registrationNumber: Prisma.FieldRef<'AssignedVehicles', 'String'>;
  readonly vehicleColor: Prisma.FieldRef<'AssignedVehicles', 'String'>;
  readonly ownerId: Prisma.FieldRef<'AssignedVehicles', 'String'>;
  readonly vehicleModelId: Prisma.FieldRef<'AssignedVehicles', 'String'>;
}

// Custom InputTypes
/**
 * AssignedVehicles findUnique
 */
export type AssignedVehiclesFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
  /**
   * Filter, which AssignedVehicles to fetch.
   */
  where: Prisma.AssignedVehiclesWhereUniqueInput;
};

/**
 * AssignedVehicles findUniqueOrThrow
 */
export type AssignedVehiclesFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
  /**
   * Filter, which AssignedVehicles to fetch.
   */
  where: Prisma.AssignedVehiclesWhereUniqueInput;
};

/**
 * AssignedVehicles findFirst
 */
export type AssignedVehiclesFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
  /**
   * Filter, which AssignedVehicles to fetch.
   */
  where?: Prisma.AssignedVehiclesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignedVehicles to fetch.
   */
  orderBy?:
    | Prisma.AssignedVehiclesOrderByWithRelationInput
    | Prisma.AssignedVehiclesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AssignedVehicles.
   */
  cursor?: Prisma.AssignedVehiclesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignedVehicles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignedVehicles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AssignedVehicles.
   */
  distinct?:
    | Prisma.AssignedVehiclesScalarFieldEnum
    | Prisma.AssignedVehiclesScalarFieldEnum[];
};

/**
 * AssignedVehicles findFirstOrThrow
 */
export type AssignedVehiclesFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
  /**
   * Filter, which AssignedVehicles to fetch.
   */
  where?: Prisma.AssignedVehiclesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignedVehicles to fetch.
   */
  orderBy?:
    | Prisma.AssignedVehiclesOrderByWithRelationInput
    | Prisma.AssignedVehiclesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AssignedVehicles.
   */
  cursor?: Prisma.AssignedVehiclesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignedVehicles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignedVehicles.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AssignedVehicles.
   */
  distinct?:
    | Prisma.AssignedVehiclesScalarFieldEnum
    | Prisma.AssignedVehiclesScalarFieldEnum[];
};

/**
 * AssignedVehicles findMany
 */
export type AssignedVehiclesFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
  /**
   * Filter, which AssignedVehicles to fetch.
   */
  where?: Prisma.AssignedVehiclesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AssignedVehicles to fetch.
   */
  orderBy?:
    | Prisma.AssignedVehiclesOrderByWithRelationInput
    | Prisma.AssignedVehiclesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AssignedVehicles.
   */
  cursor?: Prisma.AssignedVehiclesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AssignedVehicles from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AssignedVehicles.
   */
  skip?: number;
  distinct?:
    | Prisma.AssignedVehiclesScalarFieldEnum
    | Prisma.AssignedVehiclesScalarFieldEnum[];
};

/**
 * AssignedVehicles create
 */
export type AssignedVehiclesCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
  /**
   * The data needed to create a AssignedVehicles.
   */
  data: Prisma.XOR<
    Prisma.AssignedVehiclesCreateInput,
    Prisma.AssignedVehiclesUncheckedCreateInput
  >;
};

/**
 * AssignedVehicles createMany
 */
export type AssignedVehiclesCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AssignedVehicles.
   */
  data:
    | Prisma.AssignedVehiclesCreateManyInput
    | Prisma.AssignedVehiclesCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AssignedVehicles createManyAndReturn
 */
export type AssignedVehiclesCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * The data used to create many AssignedVehicles.
   */
  data:
    | Prisma.AssignedVehiclesCreateManyInput
    | Prisma.AssignedVehiclesCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AssignedVehicles update
 */
export type AssignedVehiclesUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
  /**
   * The data needed to update a AssignedVehicles.
   */
  data: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateInput,
    Prisma.AssignedVehiclesUncheckedUpdateInput
  >;
  /**
   * Choose, which AssignedVehicles to update.
   */
  where: Prisma.AssignedVehiclesWhereUniqueInput;
};

/**
 * AssignedVehicles updateMany
 */
export type AssignedVehiclesUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AssignedVehicles.
   */
  data: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateManyMutationInput,
    Prisma.AssignedVehiclesUncheckedUpdateManyInput
  >;
  /**
   * Filter which AssignedVehicles to update
   */
  where?: Prisma.AssignedVehiclesWhereInput;
  /**
   * Limit how many AssignedVehicles to update.
   */
  limit?: number;
};

/**
 * AssignedVehicles updateManyAndReturn
 */
export type AssignedVehiclesUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * The data used to update AssignedVehicles.
   */
  data: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateManyMutationInput,
    Prisma.AssignedVehiclesUncheckedUpdateManyInput
  >;
  /**
   * Filter which AssignedVehicles to update
   */
  where?: Prisma.AssignedVehiclesWhereInput;
  /**
   * Limit how many AssignedVehicles to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AssignedVehicles upsert
 */
export type AssignedVehiclesUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
  /**
   * The filter to search for the AssignedVehicles to update in case it exists.
   */
  where: Prisma.AssignedVehiclesWhereUniqueInput;
  /**
   * In case the AssignedVehicles found by the `where` argument doesn't exist, create a new AssignedVehicles with this data.
   */
  create: Prisma.XOR<
    Prisma.AssignedVehiclesCreateInput,
    Prisma.AssignedVehiclesUncheckedCreateInput
  >;
  /**
   * In case the AssignedVehicles was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AssignedVehiclesUpdateInput,
    Prisma.AssignedVehiclesUncheckedUpdateInput
  >;
};

/**
 * AssignedVehicles delete
 */
export type AssignedVehiclesDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
  /**
   * Filter which AssignedVehicles to delete.
   */
  where: Prisma.AssignedVehiclesWhereUniqueInput;
};

/**
 * AssignedVehicles deleteMany
 */
export type AssignedVehiclesDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AssignedVehicles to delete
   */
  where?: Prisma.AssignedVehiclesWhereInput;
  /**
   * Limit how many AssignedVehicles to delete.
   */
  limit?: number;
};

/**
 * AssignedVehicles.customerVehicleDocuments
 */
export type AssignedVehicles$customerVehicleDocumentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerVehicleDocuments
   */
  select?: Prisma.CustomerVehicleDocumentsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerVehicleDocuments
   */
  omit?: Prisma.CustomerVehicleDocumentsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerVehicleDocumentsInclude<ExtArgs> | null;
  where?: Prisma.CustomerVehicleDocumentsWhereInput;
  orderBy?:
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput
    | Prisma.CustomerVehicleDocumentsOrderByWithRelationInput[];
  cursor?: Prisma.CustomerVehicleDocumentsWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum
    | Prisma.CustomerVehicleDocumentsScalarFieldEnum[];
};

/**
 * AssignedVehicles without action
 */
export type AssignedVehiclesDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AssignedVehicles
   */
  select?: Prisma.AssignedVehiclesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AssignedVehicles
   */
  omit?: Prisma.AssignedVehiclesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssignedVehiclesInclude<ExtArgs> | null;
};
