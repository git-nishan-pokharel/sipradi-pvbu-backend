/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `VehicleVideos` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model VehicleVideos
 *
 */
export type VehicleVideosModel =
  runtime.Types.Result.DefaultSelection<Prisma.$VehicleVideosPayload>;

export type AggregateVehicleVideos = {
  _count: VehicleVideosCountAggregateOutputType | null;
  _min: VehicleVideosMinAggregateOutputType | null;
  _max: VehicleVideosMaxAggregateOutputType | null;
};

export type VehicleVideosMinAggregateOutputType = {
  id: string | null;
  videoType: $Enums.VehicleVideoType | null;
  videoUrl: string | null;
  vehicleModelId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type VehicleVideosMaxAggregateOutputType = {
  id: string | null;
  videoType: $Enums.VehicleVideoType | null;
  videoUrl: string | null;
  vehicleModelId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type VehicleVideosCountAggregateOutputType = {
  id: number;
  videoType: number;
  videoUrl: number;
  vehicleModelId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type VehicleVideosMinAggregateInputType = {
  id?: true;
  videoType?: true;
  videoUrl?: true;
  vehicleModelId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type VehicleVideosMaxAggregateInputType = {
  id?: true;
  videoType?: true;
  videoUrl?: true;
  vehicleModelId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type VehicleVideosCountAggregateInputType = {
  id?: true;
  videoType?: true;
  videoUrl?: true;
  vehicleModelId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type VehicleVideosAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which VehicleVideos to aggregate.
   */
  where?: Prisma.VehicleVideosWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VehicleVideos to fetch.
   */
  orderBy?:
    | Prisma.VehicleVideosOrderByWithRelationInput
    | Prisma.VehicleVideosOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.VehicleVideosWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VehicleVideos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VehicleVideos.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned VehicleVideos
   **/
  _count?: true | VehicleVideosCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: VehicleVideosMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: VehicleVideosMaxAggregateInputType;
};

export type GetVehicleVideosAggregateType<
  T extends VehicleVideosAggregateArgs,
> = {
  [P in keyof T & keyof AggregateVehicleVideos]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVehicleVideos[P]>
    : Prisma.GetScalarType<T[P], AggregateVehicleVideos[P]>;
};

export type VehicleVideosGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.VehicleVideosWhereInput;
  orderBy?:
    | Prisma.VehicleVideosOrderByWithAggregationInput
    | Prisma.VehicleVideosOrderByWithAggregationInput[];
  by:
    | Prisma.VehicleVideosScalarFieldEnum[]
    | Prisma.VehicleVideosScalarFieldEnum;
  having?: Prisma.VehicleVideosScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: VehicleVideosCountAggregateInputType | true;
  _min?: VehicleVideosMinAggregateInputType;
  _max?: VehicleVideosMaxAggregateInputType;
};

export type VehicleVideosGroupByOutputType = {
  id: string;
  videoType: $Enums.VehicleVideoType;
  videoUrl: string;
  vehicleModelId: string;
  createdAt: Date;
  updatedAt: Date;
  _count: VehicleVideosCountAggregateOutputType | null;
  _min: VehicleVideosMinAggregateOutputType | null;
  _max: VehicleVideosMaxAggregateOutputType | null;
};

type GetVehicleVideosGroupByPayload<T extends VehicleVideosGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<VehicleVideosGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof VehicleVideosGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VehicleVideosGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VehicleVideosGroupByOutputType[P]>;
      }
    >
  >;

export type VehicleVideosWhereInput = {
  AND?: Prisma.VehicleVideosWhereInput | Prisma.VehicleVideosWhereInput[];
  OR?: Prisma.VehicleVideosWhereInput[];
  NOT?: Prisma.VehicleVideosWhereInput | Prisma.VehicleVideosWhereInput[];
  id?: Prisma.UuidFilter<'VehicleVideos'> | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeFilter<'VehicleVideos'>
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringFilter<'VehicleVideos'> | string;
  vehicleModelId?: Prisma.UuidFilter<'VehicleVideos'> | string;
  createdAt?: Prisma.DateTimeFilter<'VehicleVideos'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'VehicleVideos'> | Date | string;
  vehicleModel?: Prisma.XOR<
    Prisma.VehicleModelsScalarRelationFilter,
    Prisma.VehicleModelsWhereInput
  >;
};

export type VehicleVideosOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  videoType?: Prisma.SortOrder;
  videoUrl?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  vehicleModel?: Prisma.VehicleModelsOrderByWithRelationInput;
};

export type VehicleVideosWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.VehicleVideosWhereInput | Prisma.VehicleVideosWhereInput[];
    OR?: Prisma.VehicleVideosWhereInput[];
    NOT?: Prisma.VehicleVideosWhereInput | Prisma.VehicleVideosWhereInput[];
    videoType?:
      | Prisma.EnumVehicleVideoTypeFilter<'VehicleVideos'>
      | $Enums.VehicleVideoType;
    videoUrl?: Prisma.StringFilter<'VehicleVideos'> | string;
    vehicleModelId?: Prisma.UuidFilter<'VehicleVideos'> | string;
    createdAt?: Prisma.DateTimeFilter<'VehicleVideos'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'VehicleVideos'> | Date | string;
    vehicleModel?: Prisma.XOR<
      Prisma.VehicleModelsScalarRelationFilter,
      Prisma.VehicleModelsWhereInput
    >;
  },
  'id'
>;

export type VehicleVideosOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  videoType?: Prisma.SortOrder;
  videoUrl?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.VehicleVideosCountOrderByAggregateInput;
  _max?: Prisma.VehicleVideosMaxOrderByAggregateInput;
  _min?: Prisma.VehicleVideosMinOrderByAggregateInput;
};

export type VehicleVideosScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.VehicleVideosScalarWhereWithAggregatesInput
    | Prisma.VehicleVideosScalarWhereWithAggregatesInput[];
  OR?: Prisma.VehicleVideosScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.VehicleVideosScalarWhereWithAggregatesInput
    | Prisma.VehicleVideosScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'VehicleVideos'> | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeWithAggregatesFilter<'VehicleVideos'>
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringWithAggregatesFilter<'VehicleVideos'> | string;
  vehicleModelId?: Prisma.UuidWithAggregatesFilter<'VehicleVideos'> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'VehicleVideos'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'VehicleVideos'>
    | Date
    | string;
};

export type VehicleVideosCreateInput = {
  id?: string;
  videoType: $Enums.VehicleVideoType;
  videoUrl: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  vehicleModel: Prisma.VehicleModelsCreateNestedOneWithoutVehicleVideosInput;
};

export type VehicleVideosUncheckedCreateInput = {
  id?: string;
  videoType: $Enums.VehicleVideoType;
  videoUrl: string;
  vehicleModelId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleVideosUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  vehicleModel?: Prisma.VehicleModelsUpdateOneRequiredWithoutVehicleVideosNestedInput;
};

export type VehicleVideosUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleModelId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleVideosCreateManyInput = {
  id?: string;
  videoType: $Enums.VehicleVideoType;
  videoUrl: string;
  vehicleModelId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleVideosUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleVideosUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  vehicleModelId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleVideosListRelationFilter = {
  every?: Prisma.VehicleVideosWhereInput;
  some?: Prisma.VehicleVideosWhereInput;
  none?: Prisma.VehicleVideosWhereInput;
};

export type VehicleVideosOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type VehicleVideosCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  videoType?: Prisma.SortOrder;
  videoUrl?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type VehicleVideosMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  videoType?: Prisma.SortOrder;
  videoUrl?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type VehicleVideosMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  videoType?: Prisma.SortOrder;
  videoUrl?: Prisma.SortOrder;
  vehicleModelId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type VehicleVideosCreateNestedManyWithoutVehicleModelInput = {
  create?:
    | Prisma.XOR<
        Prisma.VehicleVideosCreateWithoutVehicleModelInput,
        Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput
      >
    | Prisma.VehicleVideosCreateWithoutVehicleModelInput[]
    | Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput[];
  connectOrCreate?:
    | Prisma.VehicleVideosCreateOrConnectWithoutVehicleModelInput
    | Prisma.VehicleVideosCreateOrConnectWithoutVehicleModelInput[];
  createMany?: Prisma.VehicleVideosCreateManyVehicleModelInputEnvelope;
  connect?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
};

export type VehicleVideosUncheckedCreateNestedManyWithoutVehicleModelInput = {
  create?:
    | Prisma.XOR<
        Prisma.VehicleVideosCreateWithoutVehicleModelInput,
        Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput
      >
    | Prisma.VehicleVideosCreateWithoutVehicleModelInput[]
    | Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput[];
  connectOrCreate?:
    | Prisma.VehicleVideosCreateOrConnectWithoutVehicleModelInput
    | Prisma.VehicleVideosCreateOrConnectWithoutVehicleModelInput[];
  createMany?: Prisma.VehicleVideosCreateManyVehicleModelInputEnvelope;
  connect?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
};

export type VehicleVideosUpdateManyWithoutVehicleModelNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VehicleVideosCreateWithoutVehicleModelInput,
        Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput
      >
    | Prisma.VehicleVideosCreateWithoutVehicleModelInput[]
    | Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput[];
  connectOrCreate?:
    | Prisma.VehicleVideosCreateOrConnectWithoutVehicleModelInput
    | Prisma.VehicleVideosCreateOrConnectWithoutVehicleModelInput[];
  upsert?:
    | Prisma.VehicleVideosUpsertWithWhereUniqueWithoutVehicleModelInput
    | Prisma.VehicleVideosUpsertWithWhereUniqueWithoutVehicleModelInput[];
  createMany?: Prisma.VehicleVideosCreateManyVehicleModelInputEnvelope;
  set?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
  disconnect?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
  delete?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
  connect?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
  update?:
    | Prisma.VehicleVideosUpdateWithWhereUniqueWithoutVehicleModelInput
    | Prisma.VehicleVideosUpdateWithWhereUniqueWithoutVehicleModelInput[];
  updateMany?:
    | Prisma.VehicleVideosUpdateManyWithWhereWithoutVehicleModelInput
    | Prisma.VehicleVideosUpdateManyWithWhereWithoutVehicleModelInput[];
  deleteMany?:
    | Prisma.VehicleVideosScalarWhereInput
    | Prisma.VehicleVideosScalarWhereInput[];
};

export type VehicleVideosUncheckedUpdateManyWithoutVehicleModelNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.VehicleVideosCreateWithoutVehicleModelInput,
        Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput
      >
    | Prisma.VehicleVideosCreateWithoutVehicleModelInput[]
    | Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput[];
  connectOrCreate?:
    | Prisma.VehicleVideosCreateOrConnectWithoutVehicleModelInput
    | Prisma.VehicleVideosCreateOrConnectWithoutVehicleModelInput[];
  upsert?:
    | Prisma.VehicleVideosUpsertWithWhereUniqueWithoutVehicleModelInput
    | Prisma.VehicleVideosUpsertWithWhereUniqueWithoutVehicleModelInput[];
  createMany?: Prisma.VehicleVideosCreateManyVehicleModelInputEnvelope;
  set?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
  disconnect?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
  delete?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
  connect?:
    | Prisma.VehicleVideosWhereUniqueInput
    | Prisma.VehicleVideosWhereUniqueInput[];
  update?:
    | Prisma.VehicleVideosUpdateWithWhereUniqueWithoutVehicleModelInput
    | Prisma.VehicleVideosUpdateWithWhereUniqueWithoutVehicleModelInput[];
  updateMany?:
    | Prisma.VehicleVideosUpdateManyWithWhereWithoutVehicleModelInput
    | Prisma.VehicleVideosUpdateManyWithWhereWithoutVehicleModelInput[];
  deleteMany?:
    | Prisma.VehicleVideosScalarWhereInput
    | Prisma.VehicleVideosScalarWhereInput[];
};

export type EnumVehicleVideoTypeFieldUpdateOperationsInput = {
  set?: $Enums.VehicleVideoType;
};

export type VehicleVideosCreateWithoutVehicleModelInput = {
  id?: string;
  videoType: $Enums.VehicleVideoType;
  videoUrl: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleVideosUncheckedCreateWithoutVehicleModelInput = {
  id?: string;
  videoType: $Enums.VehicleVideoType;
  videoUrl: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleVideosCreateOrConnectWithoutVehicleModelInput = {
  where: Prisma.VehicleVideosWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.VehicleVideosCreateWithoutVehicleModelInput,
    Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput
  >;
};

export type VehicleVideosCreateManyVehicleModelInputEnvelope = {
  data:
    | Prisma.VehicleVideosCreateManyVehicleModelInput
    | Prisma.VehicleVideosCreateManyVehicleModelInput[];
  skipDuplicates?: boolean;
};

export type VehicleVideosUpsertWithWhereUniqueWithoutVehicleModelInput = {
  where: Prisma.VehicleVideosWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.VehicleVideosUpdateWithoutVehicleModelInput,
    Prisma.VehicleVideosUncheckedUpdateWithoutVehicleModelInput
  >;
  create: Prisma.XOR<
    Prisma.VehicleVideosCreateWithoutVehicleModelInput,
    Prisma.VehicleVideosUncheckedCreateWithoutVehicleModelInput
  >;
};

export type VehicleVideosUpdateWithWhereUniqueWithoutVehicleModelInput = {
  where: Prisma.VehicleVideosWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.VehicleVideosUpdateWithoutVehicleModelInput,
    Prisma.VehicleVideosUncheckedUpdateWithoutVehicleModelInput
  >;
};

export type VehicleVideosUpdateManyWithWhereWithoutVehicleModelInput = {
  where: Prisma.VehicleVideosScalarWhereInput;
  data: Prisma.XOR<
    Prisma.VehicleVideosUpdateManyMutationInput,
    Prisma.VehicleVideosUncheckedUpdateManyWithoutVehicleModelInput
  >;
};

export type VehicleVideosScalarWhereInput = {
  AND?:
    | Prisma.VehicleVideosScalarWhereInput
    | Prisma.VehicleVideosScalarWhereInput[];
  OR?: Prisma.VehicleVideosScalarWhereInput[];
  NOT?:
    | Prisma.VehicleVideosScalarWhereInput
    | Prisma.VehicleVideosScalarWhereInput[];
  id?: Prisma.UuidFilter<'VehicleVideos'> | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeFilter<'VehicleVideos'>
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringFilter<'VehicleVideos'> | string;
  vehicleModelId?: Prisma.UuidFilter<'VehicleVideos'> | string;
  createdAt?: Prisma.DateTimeFilter<'VehicleVideos'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'VehicleVideos'> | Date | string;
};

export type VehicleVideosCreateManyVehicleModelInput = {
  id?: string;
  videoType: $Enums.VehicleVideoType;
  videoUrl: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type VehicleVideosUpdateWithoutVehicleModelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleVideosUncheckedUpdateWithoutVehicleModelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleVideosUncheckedUpdateManyWithoutVehicleModelInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  videoType?:
    | Prisma.EnumVehicleVideoTypeFieldUpdateOperationsInput
    | $Enums.VehicleVideoType;
  videoUrl?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type VehicleVideosSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    videoType?: boolean;
    videoUrl?: boolean;
    vehicleModelId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['vehicleVideos']
>;

export type VehicleVideosSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    videoType?: boolean;
    videoUrl?: boolean;
    vehicleModelId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['vehicleVideos']
>;

export type VehicleVideosSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    videoType?: boolean;
    videoUrl?: boolean;
    vehicleModelId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['vehicleVideos']
>;

export type VehicleVideosSelectScalar = {
  id?: boolean;
  videoType?: boolean;
  videoUrl?: boolean;
  vehicleModelId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type VehicleVideosOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'videoType'
  | 'videoUrl'
  | 'vehicleModelId'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['vehicleVideos']
>;
export type VehicleVideosInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
};
export type VehicleVideosIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
};
export type VehicleVideosIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  vehicleModel?: boolean | Prisma.VehicleModelsDefaultArgs<ExtArgs>;
};

export type $VehicleVideosPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'VehicleVideos';
  objects: {
    vehicleModel: Prisma.$VehicleModelsPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      videoType: $Enums.VehicleVideoType;
      videoUrl: string;
      vehicleModelId: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['vehicleVideos']
  >;
  composites: {};
};

export type VehicleVideosGetPayload<
  S extends boolean | null | undefined | VehicleVideosDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$VehicleVideosPayload, S>;

export type VehicleVideosCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  VehicleVideosFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: VehicleVideosCountAggregateInputType | true;
};

export interface VehicleVideosDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['VehicleVideos'];
    meta: { name: 'VehicleVideos' };
  };
  /**
   * Find zero or one VehicleVideos that matches the filter.
   * @param {VehicleVideosFindUniqueArgs} args - Arguments to find a VehicleVideos
   * @example
   * // Get one VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VehicleVideosFindUniqueArgs>(
    args: Prisma.SelectSubset<T, VehicleVideosFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleVideosClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one VehicleVideos that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VehicleVideosFindUniqueOrThrowArgs} args - Arguments to find a VehicleVideos
   * @example
   * // Get one VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VehicleVideosFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, VehicleVideosFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleVideosClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first VehicleVideos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleVideosFindFirstArgs} args - Arguments to find a VehicleVideos
   * @example
   * // Get one VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VehicleVideosFindFirstArgs>(
    args?: Prisma.SelectSubset<T, VehicleVideosFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleVideosClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first VehicleVideos that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleVideosFindFirstOrThrowArgs} args - Arguments to find a VehicleVideos
   * @example
   * // Get one VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VehicleVideosFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, VehicleVideosFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleVideosClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more VehicleVideos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleVideosFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.findMany()
   *
   * // Get first 10 VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const vehicleVideosWithIdOnly = await prisma.vehicleVideos.findMany({ select: { id: true } })
   *
   */
  findMany<T extends VehicleVideosFindManyArgs>(
    args?: Prisma.SelectSubset<T, VehicleVideosFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a VehicleVideos.
   * @param {VehicleVideosCreateArgs} args - Arguments to create a VehicleVideos.
   * @example
   * // Create one VehicleVideos
   * const VehicleVideos = await prisma.vehicleVideos.create({
   *   data: {
   *     // ... data to create a VehicleVideos
   *   }
   * })
   *
   */
  create<T extends VehicleVideosCreateArgs>(
    args: Prisma.SelectSubset<T, VehicleVideosCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleVideosClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many VehicleVideos.
   * @param {VehicleVideosCreateManyArgs} args - Arguments to create many VehicleVideos.
   * @example
   * // Create many VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends VehicleVideosCreateManyArgs>(
    args?: Prisma.SelectSubset<T, VehicleVideosCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many VehicleVideos and returns the data saved in the database.
   * @param {VehicleVideosCreateManyAndReturnArgs} args - Arguments to create many VehicleVideos.
   * @example
   * // Create many VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many VehicleVideos and only return the `id`
   * const vehicleVideosWithIdOnly = await prisma.vehicleVideos.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends VehicleVideosCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      VehicleVideosCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a VehicleVideos.
   * @param {VehicleVideosDeleteArgs} args - Arguments to delete one VehicleVideos.
   * @example
   * // Delete one VehicleVideos
   * const VehicleVideos = await prisma.vehicleVideos.delete({
   *   where: {
   *     // ... filter to delete one VehicleVideos
   *   }
   * })
   *
   */
  delete<T extends VehicleVideosDeleteArgs>(
    args: Prisma.SelectSubset<T, VehicleVideosDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleVideosClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one VehicleVideos.
   * @param {VehicleVideosUpdateArgs} args - Arguments to update one VehicleVideos.
   * @example
   * // Update one VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends VehicleVideosUpdateArgs>(
    args: Prisma.SelectSubset<T, VehicleVideosUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleVideosClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more VehicleVideos.
   * @param {VehicleVideosDeleteManyArgs} args - Arguments to filter VehicleVideos to delete.
   * @example
   * // Delete a few VehicleVideos
   * const { count } = await prisma.vehicleVideos.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends VehicleVideosDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, VehicleVideosDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more VehicleVideos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleVideosUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends VehicleVideosUpdateManyArgs>(
    args: Prisma.SelectSubset<T, VehicleVideosUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more VehicleVideos and returns the data updated in the database.
   * @param {VehicleVideosUpdateManyAndReturnArgs} args - Arguments to update many VehicleVideos.
   * @example
   * // Update many VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more VehicleVideos and only return the `id`
   * const vehicleVideosWithIdOnly = await prisma.vehicleVideos.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends VehicleVideosUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, VehicleVideosUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one VehicleVideos.
   * @param {VehicleVideosUpsertArgs} args - Arguments to update or create a VehicleVideos.
   * @example
   * // Update or create a VehicleVideos
   * const vehicleVideos = await prisma.vehicleVideos.upsert({
   *   create: {
   *     // ... data to create a VehicleVideos
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the VehicleVideos we want to update
   *   }
   * })
   */
  upsert<T extends VehicleVideosUpsertArgs>(
    args: Prisma.SelectSubset<T, VehicleVideosUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleVideosClient<
    runtime.Types.Result.GetResult<
      Prisma.$VehicleVideosPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of VehicleVideos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleVideosCountArgs} args - Arguments to filter VehicleVideos to count.
   * @example
   * // Count the number of VehicleVideos
   * const count = await prisma.vehicleVideos.count({
   *   where: {
   *     // ... the filter for the VehicleVideos we want to count
   *   }
   * })
   **/
  count<T extends VehicleVideosCountArgs>(
    args?: Prisma.Subset<T, VehicleVideosCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            VehicleVideosCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a VehicleVideos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleVideosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends VehicleVideosAggregateArgs>(
    args: Prisma.Subset<T, VehicleVideosAggregateArgs>,
  ): Prisma.PrismaPromise<GetVehicleVideosAggregateType<T>>;

  /**
   * Group by VehicleVideos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VehicleVideosGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends VehicleVideosGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VehicleVideosGroupByArgs['orderBy'] }
      : { orderBy?: VehicleVideosGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, VehicleVideosGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetVehicleVideosGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the VehicleVideos model
   */
  readonly fields: VehicleVideosFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for VehicleVideos.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VehicleVideosClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  vehicleModel<T extends Prisma.VehicleModelsDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.VehicleModelsDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__VehicleModelsClient<
    | runtime.Types.Result.GetResult<
        Prisma.$VehicleModelsPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the VehicleVideos model
 */
export interface VehicleVideosFieldRefs {
  readonly id: Prisma.FieldRef<'VehicleVideos', 'String'>;
  readonly videoType: Prisma.FieldRef<'VehicleVideos', 'VehicleVideoType'>;
  readonly videoUrl: Prisma.FieldRef<'VehicleVideos', 'String'>;
  readonly vehicleModelId: Prisma.FieldRef<'VehicleVideos', 'String'>;
  readonly createdAt: Prisma.FieldRef<'VehicleVideos', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'VehicleVideos', 'DateTime'>;
}

// Custom InputTypes
/**
 * VehicleVideos findUnique
 */
export type VehicleVideosFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleVideos to fetch.
   */
  where: Prisma.VehicleVideosWhereUniqueInput;
};

/**
 * VehicleVideos findUniqueOrThrow
 */
export type VehicleVideosFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleVideos to fetch.
   */
  where: Prisma.VehicleVideosWhereUniqueInput;
};

/**
 * VehicleVideos findFirst
 */
export type VehicleVideosFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleVideos to fetch.
   */
  where?: Prisma.VehicleVideosWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VehicleVideos to fetch.
   */
  orderBy?:
    | Prisma.VehicleVideosOrderByWithRelationInput
    | Prisma.VehicleVideosOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for VehicleVideos.
   */
  cursor?: Prisma.VehicleVideosWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VehicleVideos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VehicleVideos.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of VehicleVideos.
   */
  distinct?:
    | Prisma.VehicleVideosScalarFieldEnum
    | Prisma.VehicleVideosScalarFieldEnum[];
};

/**
 * VehicleVideos findFirstOrThrow
 */
export type VehicleVideosFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleVideos to fetch.
   */
  where?: Prisma.VehicleVideosWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VehicleVideos to fetch.
   */
  orderBy?:
    | Prisma.VehicleVideosOrderByWithRelationInput
    | Prisma.VehicleVideosOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for VehicleVideos.
   */
  cursor?: Prisma.VehicleVideosWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VehicleVideos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VehicleVideos.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of VehicleVideos.
   */
  distinct?:
    | Prisma.VehicleVideosScalarFieldEnum
    | Prisma.VehicleVideosScalarFieldEnum[];
};

/**
 * VehicleVideos findMany
 */
export type VehicleVideosFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
  /**
   * Filter, which VehicleVideos to fetch.
   */
  where?: Prisma.VehicleVideosWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of VehicleVideos to fetch.
   */
  orderBy?:
    | Prisma.VehicleVideosOrderByWithRelationInput
    | Prisma.VehicleVideosOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing VehicleVideos.
   */
  cursor?: Prisma.VehicleVideosWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` VehicleVideos from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` VehicleVideos.
   */
  skip?: number;
  distinct?:
    | Prisma.VehicleVideosScalarFieldEnum
    | Prisma.VehicleVideosScalarFieldEnum[];
};

/**
 * VehicleVideos create
 */
export type VehicleVideosCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
  /**
   * The data needed to create a VehicleVideos.
   */
  data: Prisma.XOR<
    Prisma.VehicleVideosCreateInput,
    Prisma.VehicleVideosUncheckedCreateInput
  >;
};

/**
 * VehicleVideos createMany
 */
export type VehicleVideosCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many VehicleVideos.
   */
  data:
    | Prisma.VehicleVideosCreateManyInput
    | Prisma.VehicleVideosCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * VehicleVideos createManyAndReturn
 */
export type VehicleVideosCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * The data used to create many VehicleVideos.
   */
  data:
    | Prisma.VehicleVideosCreateManyInput
    | Prisma.VehicleVideosCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * VehicleVideos update
 */
export type VehicleVideosUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
  /**
   * The data needed to update a VehicleVideos.
   */
  data: Prisma.XOR<
    Prisma.VehicleVideosUpdateInput,
    Prisma.VehicleVideosUncheckedUpdateInput
  >;
  /**
   * Choose, which VehicleVideos to update.
   */
  where: Prisma.VehicleVideosWhereUniqueInput;
};

/**
 * VehicleVideos updateMany
 */
export type VehicleVideosUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update VehicleVideos.
   */
  data: Prisma.XOR<
    Prisma.VehicleVideosUpdateManyMutationInput,
    Prisma.VehicleVideosUncheckedUpdateManyInput
  >;
  /**
   * Filter which VehicleVideos to update
   */
  where?: Prisma.VehicleVideosWhereInput;
  /**
   * Limit how many VehicleVideos to update.
   */
  limit?: number;
};

/**
 * VehicleVideos updateManyAndReturn
 */
export type VehicleVideosUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * The data used to update VehicleVideos.
   */
  data: Prisma.XOR<
    Prisma.VehicleVideosUpdateManyMutationInput,
    Prisma.VehicleVideosUncheckedUpdateManyInput
  >;
  /**
   * Filter which VehicleVideos to update
   */
  where?: Prisma.VehicleVideosWhereInput;
  /**
   * Limit how many VehicleVideos to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * VehicleVideos upsert
 */
export type VehicleVideosUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
  /**
   * The filter to search for the VehicleVideos to update in case it exists.
   */
  where: Prisma.VehicleVideosWhereUniqueInput;
  /**
   * In case the VehicleVideos found by the `where` argument doesn't exist, create a new VehicleVideos with this data.
   */
  create: Prisma.XOR<
    Prisma.VehicleVideosCreateInput,
    Prisma.VehicleVideosUncheckedCreateInput
  >;
  /**
   * In case the VehicleVideos was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.VehicleVideosUpdateInput,
    Prisma.VehicleVideosUncheckedUpdateInput
  >;
};

/**
 * VehicleVideos delete
 */
export type VehicleVideosDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
  /**
   * Filter which VehicleVideos to delete.
   */
  where: Prisma.VehicleVideosWhereUniqueInput;
};

/**
 * VehicleVideos deleteMany
 */
export type VehicleVideosDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which VehicleVideos to delete
   */
  where?: Prisma.VehicleVideosWhereInput;
  /**
   * Limit how many VehicleVideos to delete.
   */
  limit?: number;
};

/**
 * VehicleVideos without action
 */
export type VehicleVideosDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the VehicleVideos
   */
  select?: Prisma.VehicleVideosSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the VehicleVideos
   */
  omit?: Prisma.VehicleVideosOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VehicleVideosInclude<ExtArgs> | null;
};
