/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `CustomerProfileAnswers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model CustomerProfileAnswers
 *
 */
export type CustomerProfileAnswersModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CustomerProfileAnswersPayload>;

export type AggregateCustomerProfileAnswers = {
  _count: CustomerProfileAnswersCountAggregateOutputType | null;
  _min: CustomerProfileAnswersMinAggregateOutputType | null;
  _max: CustomerProfileAnswersMaxAggregateOutputType | null;
};

export type CustomerProfileAnswersMinAggregateOutputType = {
  id: string | null;
  answerText: string | null;
  questionId: string | null;
  optionId: string | null;
  userId: string | null;
  submittedAt: Date | null;
};

export type CustomerProfileAnswersMaxAggregateOutputType = {
  id: string | null;
  answerText: string | null;
  questionId: string | null;
  optionId: string | null;
  userId: string | null;
  submittedAt: Date | null;
};

export type CustomerProfileAnswersCountAggregateOutputType = {
  id: number;
  answerText: number;
  questionId: number;
  optionId: number;
  userId: number;
  submittedAt: number;
  _all: number;
};

export type CustomerProfileAnswersMinAggregateInputType = {
  id?: true;
  answerText?: true;
  questionId?: true;
  optionId?: true;
  userId?: true;
  submittedAt?: true;
};

export type CustomerProfileAnswersMaxAggregateInputType = {
  id?: true;
  answerText?: true;
  questionId?: true;
  optionId?: true;
  userId?: true;
  submittedAt?: true;
};

export type CustomerProfileAnswersCountAggregateInputType = {
  id?: true;
  answerText?: true;
  questionId?: true;
  optionId?: true;
  userId?: true;
  submittedAt?: true;
  _all?: true;
};

export type CustomerProfileAnswersAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CustomerProfileAnswers to aggregate.
   */
  where?: Prisma.CustomerProfileAnswersWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerProfileAnswers to fetch.
   */
  orderBy?:
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CustomerProfileAnswersWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerProfileAnswers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerProfileAnswers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CustomerProfileAnswers
   **/
  _count?: true | CustomerProfileAnswersCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CustomerProfileAnswersMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CustomerProfileAnswersMaxAggregateInputType;
};

export type GetCustomerProfileAnswersAggregateType<
  T extends CustomerProfileAnswersAggregateArgs,
> = {
  [P in keyof T & keyof AggregateCustomerProfileAnswers]: P extends
    | '_count'
    | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCustomerProfileAnswers[P]>
    : Prisma.GetScalarType<T[P], AggregateCustomerProfileAnswers[P]>;
};

export type CustomerProfileAnswersGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CustomerProfileAnswersWhereInput;
  orderBy?:
    | Prisma.CustomerProfileAnswersOrderByWithAggregationInput
    | Prisma.CustomerProfileAnswersOrderByWithAggregationInput[];
  by:
    | Prisma.CustomerProfileAnswersScalarFieldEnum[]
    | Prisma.CustomerProfileAnswersScalarFieldEnum;
  having?: Prisma.CustomerProfileAnswersScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: CustomerProfileAnswersCountAggregateInputType | true;
  _min?: CustomerProfileAnswersMinAggregateInputType;
  _max?: CustomerProfileAnswersMaxAggregateInputType;
};

export type CustomerProfileAnswersGroupByOutputType = {
  id: string;
  answerText: string;
  questionId: string;
  optionId: string | null;
  userId: string;
  submittedAt: Date;
  _count: CustomerProfileAnswersCountAggregateOutputType | null;
  _min: CustomerProfileAnswersMinAggregateOutputType | null;
  _max: CustomerProfileAnswersMaxAggregateOutputType | null;
};

type GetCustomerProfileAnswersGroupByPayload<
  T extends CustomerProfileAnswersGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CustomerProfileAnswersGroupByOutputType, T['by']> & {
      [P in keyof T &
        keyof CustomerProfileAnswersGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              CustomerProfileAnswersGroupByOutputType[P]
            >
        : Prisma.GetScalarType<
            T[P],
            CustomerProfileAnswersGroupByOutputType[P]
          >;
    }
  >
>;

export type CustomerProfileAnswersWhereInput = {
  AND?:
    | Prisma.CustomerProfileAnswersWhereInput
    | Prisma.CustomerProfileAnswersWhereInput[];
  OR?: Prisma.CustomerProfileAnswersWhereInput[];
  NOT?:
    | Prisma.CustomerProfileAnswersWhereInput
    | Prisma.CustomerProfileAnswersWhereInput[];
  id?: Prisma.UuidFilter<'CustomerProfileAnswers'> | string;
  answerText?: Prisma.StringFilter<'CustomerProfileAnswers'> | string;
  questionId?: Prisma.UuidFilter<'CustomerProfileAnswers'> | string;
  optionId?:
    | Prisma.UuidNullableFilter<'CustomerProfileAnswers'>
    | string
    | null;
  userId?: Prisma.UuidFilter<'CustomerProfileAnswers'> | string;
  submittedAt?: Prisma.DateTimeFilter<'CustomerProfileAnswers'> | Date | string;
  question?: Prisma.XOR<
    Prisma.CustomerProfileQuestionScalarRelationFilter,
    Prisma.CustomerProfileQuestionWhereInput
  >;
  option?: Prisma.XOR<
    Prisma.CustomerProfileQuestionOptionsNullableScalarRelationFilter,
    Prisma.CustomerProfileQuestionOptionsWhereInput
  > | null;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
};

export type CustomerProfileAnswersOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  questionId?: Prisma.SortOrder;
  optionId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  submittedAt?: Prisma.SortOrder;
  question?: Prisma.CustomerProfileQuestionOrderByWithRelationInput;
  option?: Prisma.CustomerProfileQuestionOptionsOrderByWithRelationInput;
  user?: Prisma.UserOrderByWithRelationInput;
};

export type CustomerProfileAnswersWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.CustomerProfileAnswersWhereInput
      | Prisma.CustomerProfileAnswersWhereInput[];
    OR?: Prisma.CustomerProfileAnswersWhereInput[];
    NOT?:
      | Prisma.CustomerProfileAnswersWhereInput
      | Prisma.CustomerProfileAnswersWhereInput[];
    answerText?: Prisma.StringFilter<'CustomerProfileAnswers'> | string;
    questionId?: Prisma.UuidFilter<'CustomerProfileAnswers'> | string;
    optionId?:
      | Prisma.UuidNullableFilter<'CustomerProfileAnswers'>
      | string
      | null;
    userId?: Prisma.UuidFilter<'CustomerProfileAnswers'> | string;
    submittedAt?:
      | Prisma.DateTimeFilter<'CustomerProfileAnswers'>
      | Date
      | string;
    question?: Prisma.XOR<
      Prisma.CustomerProfileQuestionScalarRelationFilter,
      Prisma.CustomerProfileQuestionWhereInput
    >;
    option?: Prisma.XOR<
      Prisma.CustomerProfileQuestionOptionsNullableScalarRelationFilter,
      Prisma.CustomerProfileQuestionOptionsWhereInput
    > | null;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  },
  'id'
>;

export type CustomerProfileAnswersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  questionId?: Prisma.SortOrder;
  optionId?: Prisma.SortOrderInput | Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  submittedAt?: Prisma.SortOrder;
  _count?: Prisma.CustomerProfileAnswersCountOrderByAggregateInput;
  _max?: Prisma.CustomerProfileAnswersMaxOrderByAggregateInput;
  _min?: Prisma.CustomerProfileAnswersMinOrderByAggregateInput;
};

export type CustomerProfileAnswersScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CustomerProfileAnswersScalarWhereWithAggregatesInput
    | Prisma.CustomerProfileAnswersScalarWhereWithAggregatesInput[];
  OR?: Prisma.CustomerProfileAnswersScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.CustomerProfileAnswersScalarWhereWithAggregatesInput
    | Prisma.CustomerProfileAnswersScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'CustomerProfileAnswers'> | string;
  answerText?:
    | Prisma.StringWithAggregatesFilter<'CustomerProfileAnswers'>
    | string;
  questionId?:
    | Prisma.UuidWithAggregatesFilter<'CustomerProfileAnswers'>
    | string;
  optionId?:
    | Prisma.UuidNullableWithAggregatesFilter<'CustomerProfileAnswers'>
    | string
    | null;
  userId?: Prisma.UuidWithAggregatesFilter<'CustomerProfileAnswers'> | string;
  submittedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CustomerProfileAnswers'>
    | Date
    | string;
};

export type CustomerProfileAnswersCreateInput = {
  id?: string;
  answerText: string;
  submittedAt?: Date | string;
  question: Prisma.CustomerProfileQuestionCreateNestedOneWithoutAnswersInput;
  option?: Prisma.CustomerProfileQuestionOptionsCreateNestedOneWithoutAnswersInput;
  user: Prisma.UserCreateNestedOneWithoutCustomerProfileAnswersInput;
};

export type CustomerProfileAnswersUncheckedCreateInput = {
  id?: string;
  answerText: string;
  questionId: string;
  optionId?: string | null;
  userId: string;
  submittedAt?: Date | string;
};

export type CustomerProfileAnswersUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  question?: Prisma.CustomerProfileQuestionUpdateOneRequiredWithoutAnswersNestedInput;
  option?: Prisma.CustomerProfileQuestionOptionsUpdateOneWithoutAnswersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutCustomerProfileAnswersNestedInput;
};

export type CustomerProfileAnswersUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionId?: Prisma.StringFieldUpdateOperationsInput | string;
  optionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileAnswersCreateManyInput = {
  id?: string;
  answerText: string;
  questionId: string;
  optionId?: string | null;
  userId: string;
  submittedAt?: Date | string;
};

export type CustomerProfileAnswersUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileAnswersUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionId?: Prisma.StringFieldUpdateOperationsInput | string;
  optionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileAnswersListRelationFilter = {
  every?: Prisma.CustomerProfileAnswersWhereInput;
  some?: Prisma.CustomerProfileAnswersWhereInput;
  none?: Prisma.CustomerProfileAnswersWhereInput;
};

export type CustomerProfileAnswersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type CustomerProfileAnswersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  questionId?: Prisma.SortOrder;
  optionId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  submittedAt?: Prisma.SortOrder;
};

export type CustomerProfileAnswersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  questionId?: Prisma.SortOrder;
  optionId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  submittedAt?: Prisma.SortOrder;
};

export type CustomerProfileAnswersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  answerText?: Prisma.SortOrder;
  questionId?: Prisma.SortOrder;
  optionId?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  submittedAt?: Prisma.SortOrder;
};

export type CustomerProfileAnswersCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.CustomerProfileAnswersCreateWithoutUserInput,
        Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput
      >
    | Prisma.CustomerProfileAnswersCreateWithoutUserInput[]
    | Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutUserInput
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.CustomerProfileAnswersCreateManyUserInputEnvelope;
  connect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
};

export type CustomerProfileAnswersUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.CustomerProfileAnswersCreateWithoutUserInput,
        Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput
      >
    | Prisma.CustomerProfileAnswersCreateWithoutUserInput[]
    | Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutUserInput
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.CustomerProfileAnswersCreateManyUserInputEnvelope;
  connect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
};

export type CustomerProfileAnswersUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CustomerProfileAnswersCreateWithoutUserInput,
        Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput
      >
    | Prisma.CustomerProfileAnswersCreateWithoutUserInput[]
    | Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutUserInput
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutUserInput
    | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.CustomerProfileAnswersCreateManyUserInputEnvelope;
  set?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  disconnect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  delete?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  connect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  update?:
    | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutUserInput
    | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutUserInput
    | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.CustomerProfileAnswersScalarWhereInput
    | Prisma.CustomerProfileAnswersScalarWhereInput[];
};

export type CustomerProfileAnswersUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CustomerProfileAnswersCreateWithoutUserInput,
        Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput
      >
    | Prisma.CustomerProfileAnswersCreateWithoutUserInput[]
    | Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutUserInput
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutUserInput
    | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.CustomerProfileAnswersCreateManyUserInputEnvelope;
  set?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  disconnect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  delete?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  connect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  update?:
    | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutUserInput
    | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutUserInput
    | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutUserInput[];
  deleteMany?:
    | Prisma.CustomerProfileAnswersScalarWhereInput
    | Prisma.CustomerProfileAnswersScalarWhereInput[];
};

export type CustomerProfileAnswersCreateNestedManyWithoutQuestionInput = {
  create?:
    | Prisma.XOR<
        Prisma.CustomerProfileAnswersCreateWithoutQuestionInput,
        Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput
      >
    | Prisma.CustomerProfileAnswersCreateWithoutQuestionInput[]
    | Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput[];
  connectOrCreate?:
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutQuestionInput
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutQuestionInput[];
  createMany?: Prisma.CustomerProfileAnswersCreateManyQuestionInputEnvelope;
  connect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
};

export type CustomerProfileAnswersUncheckedCreateNestedManyWithoutQuestionInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CustomerProfileAnswersCreateWithoutQuestionInput,
          Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput
        >
      | Prisma.CustomerProfileAnswersCreateWithoutQuestionInput[]
      | Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput[];
    connectOrCreate?:
      | Prisma.CustomerProfileAnswersCreateOrConnectWithoutQuestionInput
      | Prisma.CustomerProfileAnswersCreateOrConnectWithoutQuestionInput[];
    createMany?: Prisma.CustomerProfileAnswersCreateManyQuestionInputEnvelope;
    connect?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  };

export type CustomerProfileAnswersUpdateManyWithoutQuestionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CustomerProfileAnswersCreateWithoutQuestionInput,
        Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput
      >
    | Prisma.CustomerProfileAnswersCreateWithoutQuestionInput[]
    | Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput[];
  connectOrCreate?:
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutQuestionInput
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutQuestionInput[];
  upsert?:
    | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutQuestionInput
    | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutQuestionInput[];
  createMany?: Prisma.CustomerProfileAnswersCreateManyQuestionInputEnvelope;
  set?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  disconnect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  delete?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  connect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  update?:
    | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutQuestionInput
    | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutQuestionInput[];
  updateMany?:
    | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutQuestionInput
    | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutQuestionInput[];
  deleteMany?:
    | Prisma.CustomerProfileAnswersScalarWhereInput
    | Prisma.CustomerProfileAnswersScalarWhereInput[];
};

export type CustomerProfileAnswersUncheckedUpdateManyWithoutQuestionNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CustomerProfileAnswersCreateWithoutQuestionInput,
          Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput
        >
      | Prisma.CustomerProfileAnswersCreateWithoutQuestionInput[]
      | Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput[];
    connectOrCreate?:
      | Prisma.CustomerProfileAnswersCreateOrConnectWithoutQuestionInput
      | Prisma.CustomerProfileAnswersCreateOrConnectWithoutQuestionInput[];
    upsert?:
      | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutQuestionInput
      | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutQuestionInput[];
    createMany?: Prisma.CustomerProfileAnswersCreateManyQuestionInputEnvelope;
    set?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
    disconnect?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
    delete?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
    connect?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
    update?:
      | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutQuestionInput
      | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutQuestionInput[];
    updateMany?:
      | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutQuestionInput
      | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutQuestionInput[];
    deleteMany?:
      | Prisma.CustomerProfileAnswersScalarWhereInput
      | Prisma.CustomerProfileAnswersScalarWhereInput[];
  };

export type CustomerProfileAnswersCreateNestedManyWithoutOptionInput = {
  create?:
    | Prisma.XOR<
        Prisma.CustomerProfileAnswersCreateWithoutOptionInput,
        Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput
      >
    | Prisma.CustomerProfileAnswersCreateWithoutOptionInput[]
    | Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput[];
  connectOrCreate?:
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutOptionInput
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutOptionInput[];
  createMany?: Prisma.CustomerProfileAnswersCreateManyOptionInputEnvelope;
  connect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
};

export type CustomerProfileAnswersUncheckedCreateNestedManyWithoutOptionInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CustomerProfileAnswersCreateWithoutOptionInput,
          Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput
        >
      | Prisma.CustomerProfileAnswersCreateWithoutOptionInput[]
      | Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput[];
    connectOrCreate?:
      | Prisma.CustomerProfileAnswersCreateOrConnectWithoutOptionInput
      | Prisma.CustomerProfileAnswersCreateOrConnectWithoutOptionInput[];
    createMany?: Prisma.CustomerProfileAnswersCreateManyOptionInputEnvelope;
    connect?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  };

export type CustomerProfileAnswersUpdateManyWithoutOptionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CustomerProfileAnswersCreateWithoutOptionInput,
        Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput
      >
    | Prisma.CustomerProfileAnswersCreateWithoutOptionInput[]
    | Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput[];
  connectOrCreate?:
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutOptionInput
    | Prisma.CustomerProfileAnswersCreateOrConnectWithoutOptionInput[];
  upsert?:
    | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutOptionInput
    | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutOptionInput[];
  createMany?: Prisma.CustomerProfileAnswersCreateManyOptionInputEnvelope;
  set?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  disconnect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  delete?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  connect?:
    | Prisma.CustomerProfileAnswersWhereUniqueInput
    | Prisma.CustomerProfileAnswersWhereUniqueInput[];
  update?:
    | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutOptionInput
    | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutOptionInput[];
  updateMany?:
    | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutOptionInput
    | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutOptionInput[];
  deleteMany?:
    | Prisma.CustomerProfileAnswersScalarWhereInput
    | Prisma.CustomerProfileAnswersScalarWhereInput[];
};

export type CustomerProfileAnswersUncheckedUpdateManyWithoutOptionNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CustomerProfileAnswersCreateWithoutOptionInput,
          Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput
        >
      | Prisma.CustomerProfileAnswersCreateWithoutOptionInput[]
      | Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput[];
    connectOrCreate?:
      | Prisma.CustomerProfileAnswersCreateOrConnectWithoutOptionInput
      | Prisma.CustomerProfileAnswersCreateOrConnectWithoutOptionInput[];
    upsert?:
      | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutOptionInput
      | Prisma.CustomerProfileAnswersUpsertWithWhereUniqueWithoutOptionInput[];
    createMany?: Prisma.CustomerProfileAnswersCreateManyOptionInputEnvelope;
    set?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
    disconnect?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
    delete?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
    connect?:
      | Prisma.CustomerProfileAnswersWhereUniqueInput
      | Prisma.CustomerProfileAnswersWhereUniqueInput[];
    update?:
      | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutOptionInput
      | Prisma.CustomerProfileAnswersUpdateWithWhereUniqueWithoutOptionInput[];
    updateMany?:
      | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutOptionInput
      | Prisma.CustomerProfileAnswersUpdateManyWithWhereWithoutOptionInput[];
    deleteMany?:
      | Prisma.CustomerProfileAnswersScalarWhereInput
      | Prisma.CustomerProfileAnswersScalarWhereInput[];
  };

export type CustomerProfileAnswersCreateWithoutUserInput = {
  id?: string;
  answerText: string;
  submittedAt?: Date | string;
  question: Prisma.CustomerProfileQuestionCreateNestedOneWithoutAnswersInput;
  option?: Prisma.CustomerProfileQuestionOptionsCreateNestedOneWithoutAnswersInput;
};

export type CustomerProfileAnswersUncheckedCreateWithoutUserInput = {
  id?: string;
  answerText: string;
  questionId: string;
  optionId?: string | null;
  submittedAt?: Date | string;
};

export type CustomerProfileAnswersCreateOrConnectWithoutUserInput = {
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CustomerProfileAnswersCreateWithoutUserInput,
    Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput
  >;
};

export type CustomerProfileAnswersCreateManyUserInputEnvelope = {
  data:
    | Prisma.CustomerProfileAnswersCreateManyUserInput
    | Prisma.CustomerProfileAnswersCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type CustomerProfileAnswersUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateWithoutUserInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.CustomerProfileAnswersCreateWithoutUserInput,
    Prisma.CustomerProfileAnswersUncheckedCreateWithoutUserInput
  >;
};

export type CustomerProfileAnswersUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateWithoutUserInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateWithoutUserInput
  >;
};

export type CustomerProfileAnswersUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CustomerProfileAnswersScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateManyMutationInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateManyWithoutUserInput
  >;
};

export type CustomerProfileAnswersScalarWhereInput = {
  AND?:
    | Prisma.CustomerProfileAnswersScalarWhereInput
    | Prisma.CustomerProfileAnswersScalarWhereInput[];
  OR?: Prisma.CustomerProfileAnswersScalarWhereInput[];
  NOT?:
    | Prisma.CustomerProfileAnswersScalarWhereInput
    | Prisma.CustomerProfileAnswersScalarWhereInput[];
  id?: Prisma.UuidFilter<'CustomerProfileAnswers'> | string;
  answerText?: Prisma.StringFilter<'CustomerProfileAnswers'> | string;
  questionId?: Prisma.UuidFilter<'CustomerProfileAnswers'> | string;
  optionId?:
    | Prisma.UuidNullableFilter<'CustomerProfileAnswers'>
    | string
    | null;
  userId?: Prisma.UuidFilter<'CustomerProfileAnswers'> | string;
  submittedAt?: Prisma.DateTimeFilter<'CustomerProfileAnswers'> | Date | string;
};

export type CustomerProfileAnswersCreateWithoutQuestionInput = {
  id?: string;
  answerText: string;
  submittedAt?: Date | string;
  option?: Prisma.CustomerProfileQuestionOptionsCreateNestedOneWithoutAnswersInput;
  user: Prisma.UserCreateNestedOneWithoutCustomerProfileAnswersInput;
};

export type CustomerProfileAnswersUncheckedCreateWithoutQuestionInput = {
  id?: string;
  answerText: string;
  optionId?: string | null;
  userId: string;
  submittedAt?: Date | string;
};

export type CustomerProfileAnswersCreateOrConnectWithoutQuestionInput = {
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CustomerProfileAnswersCreateWithoutQuestionInput,
    Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput
  >;
};

export type CustomerProfileAnswersCreateManyQuestionInputEnvelope = {
  data:
    | Prisma.CustomerProfileAnswersCreateManyQuestionInput
    | Prisma.CustomerProfileAnswersCreateManyQuestionInput[];
  skipDuplicates?: boolean;
};

export type CustomerProfileAnswersUpsertWithWhereUniqueWithoutQuestionInput = {
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateWithoutQuestionInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateWithoutQuestionInput
  >;
  create: Prisma.XOR<
    Prisma.CustomerProfileAnswersCreateWithoutQuestionInput,
    Prisma.CustomerProfileAnswersUncheckedCreateWithoutQuestionInput
  >;
};

export type CustomerProfileAnswersUpdateWithWhereUniqueWithoutQuestionInput = {
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateWithoutQuestionInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateWithoutQuestionInput
  >;
};

export type CustomerProfileAnswersUpdateManyWithWhereWithoutQuestionInput = {
  where: Prisma.CustomerProfileAnswersScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateManyMutationInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateManyWithoutQuestionInput
  >;
};

export type CustomerProfileAnswersCreateWithoutOptionInput = {
  id?: string;
  answerText: string;
  submittedAt?: Date | string;
  question: Prisma.CustomerProfileQuestionCreateNestedOneWithoutAnswersInput;
  user: Prisma.UserCreateNestedOneWithoutCustomerProfileAnswersInput;
};

export type CustomerProfileAnswersUncheckedCreateWithoutOptionInput = {
  id?: string;
  answerText: string;
  questionId: string;
  userId: string;
  submittedAt?: Date | string;
};

export type CustomerProfileAnswersCreateOrConnectWithoutOptionInput = {
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.CustomerProfileAnswersCreateWithoutOptionInput,
    Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput
  >;
};

export type CustomerProfileAnswersCreateManyOptionInputEnvelope = {
  data:
    | Prisma.CustomerProfileAnswersCreateManyOptionInput
    | Prisma.CustomerProfileAnswersCreateManyOptionInput[];
  skipDuplicates?: boolean;
};

export type CustomerProfileAnswersUpsertWithWhereUniqueWithoutOptionInput = {
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateWithoutOptionInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateWithoutOptionInput
  >;
  create: Prisma.XOR<
    Prisma.CustomerProfileAnswersCreateWithoutOptionInput,
    Prisma.CustomerProfileAnswersUncheckedCreateWithoutOptionInput
  >;
};

export type CustomerProfileAnswersUpdateWithWhereUniqueWithoutOptionInput = {
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateWithoutOptionInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateWithoutOptionInput
  >;
};

export type CustomerProfileAnswersUpdateManyWithWhereWithoutOptionInput = {
  where: Prisma.CustomerProfileAnswersScalarWhereInput;
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateManyMutationInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateManyWithoutOptionInput
  >;
};

export type CustomerProfileAnswersCreateManyUserInput = {
  id?: string;
  answerText: string;
  questionId: string;
  optionId?: string | null;
  submittedAt?: Date | string;
};

export type CustomerProfileAnswersUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  question?: Prisma.CustomerProfileQuestionUpdateOneRequiredWithoutAnswersNestedInput;
  option?: Prisma.CustomerProfileQuestionOptionsUpdateOneWithoutAnswersNestedInput;
};

export type CustomerProfileAnswersUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionId?: Prisma.StringFieldUpdateOperationsInput | string;
  optionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileAnswersUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionId?: Prisma.StringFieldUpdateOperationsInput | string;
  optionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileAnswersCreateManyQuestionInput = {
  id?: string;
  answerText: string;
  optionId?: string | null;
  userId: string;
  submittedAt?: Date | string;
};

export type CustomerProfileAnswersUpdateWithoutQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  option?: Prisma.CustomerProfileQuestionOptionsUpdateOneWithoutAnswersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutCustomerProfileAnswersNestedInput;
};

export type CustomerProfileAnswersUncheckedUpdateWithoutQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  optionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileAnswersUncheckedUpdateManyWithoutQuestionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  optionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileAnswersCreateManyOptionInput = {
  id?: string;
  answerText: string;
  questionId: string;
  userId: string;
  submittedAt?: Date | string;
};

export type CustomerProfileAnswersUpdateWithoutOptionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  question?: Prisma.CustomerProfileQuestionUpdateOneRequiredWithoutAnswersNestedInput;
  user?: Prisma.UserUpdateOneRequiredWithoutCustomerProfileAnswersNestedInput;
};

export type CustomerProfileAnswersUncheckedUpdateWithoutOptionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileAnswersUncheckedUpdateManyWithoutOptionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  answerText?: Prisma.StringFieldUpdateOperationsInput | string;
  questionId?: Prisma.StringFieldUpdateOperationsInput | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type CustomerProfileAnswersSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    answerText?: boolean;
    questionId?: boolean;
    optionId?: boolean;
    userId?: boolean;
    submittedAt?: boolean;
    question?: boolean | Prisma.CustomerProfileQuestionDefaultArgs<ExtArgs>;
    option?: boolean | Prisma.CustomerProfileAnswers$optionArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['customerProfileAnswers']
>;

export type CustomerProfileAnswersSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    answerText?: boolean;
    questionId?: boolean;
    optionId?: boolean;
    userId?: boolean;
    submittedAt?: boolean;
    question?: boolean | Prisma.CustomerProfileQuestionDefaultArgs<ExtArgs>;
    option?: boolean | Prisma.CustomerProfileAnswers$optionArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['customerProfileAnswers']
>;

export type CustomerProfileAnswersSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    answerText?: boolean;
    questionId?: boolean;
    optionId?: boolean;
    userId?: boolean;
    submittedAt?: boolean;
    question?: boolean | Prisma.CustomerProfileQuestionDefaultArgs<ExtArgs>;
    option?: boolean | Prisma.CustomerProfileAnswers$optionArgs<ExtArgs>;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['customerProfileAnswers']
>;

export type CustomerProfileAnswersSelectScalar = {
  id?: boolean;
  answerText?: boolean;
  questionId?: boolean;
  optionId?: boolean;
  userId?: boolean;
  submittedAt?: boolean;
};

export type CustomerProfileAnswersOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'answerText' | 'questionId' | 'optionId' | 'userId' | 'submittedAt',
  ExtArgs['result']['customerProfileAnswers']
>;
export type CustomerProfileAnswersInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  question?: boolean | Prisma.CustomerProfileQuestionDefaultArgs<ExtArgs>;
  option?: boolean | Prisma.CustomerProfileAnswers$optionArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type CustomerProfileAnswersIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  question?: boolean | Prisma.CustomerProfileQuestionDefaultArgs<ExtArgs>;
  option?: boolean | Prisma.CustomerProfileAnswers$optionArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type CustomerProfileAnswersIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  question?: boolean | Prisma.CustomerProfileQuestionDefaultArgs<ExtArgs>;
  option?: boolean | Prisma.CustomerProfileAnswers$optionArgs<ExtArgs>;
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $CustomerProfileAnswersPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'CustomerProfileAnswers';
  objects: {
    question: Prisma.$CustomerProfileQuestionPayload<ExtArgs>;
    option: Prisma.$CustomerProfileQuestionOptionsPayload<ExtArgs> | null;
    user: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      answerText: string;
      questionId: string;
      optionId: string | null;
      userId: string;
      submittedAt: Date;
    },
    ExtArgs['result']['customerProfileAnswers']
  >;
  composites: {};
};

export type CustomerProfileAnswersGetPayload<
  S extends boolean | null | undefined | CustomerProfileAnswersDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CustomerProfileAnswersPayload, S>;

export type CustomerProfileAnswersCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  CustomerProfileAnswersFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: CustomerProfileAnswersCountAggregateInputType | true;
};

export interface CustomerProfileAnswersDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['CustomerProfileAnswers'];
    meta: { name: 'CustomerProfileAnswers' };
  };
  /**
   * Find zero or one CustomerProfileAnswers that matches the filter.
   * @param {CustomerProfileAnswersFindUniqueArgs} args - Arguments to find a CustomerProfileAnswers
   * @example
   * // Get one CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CustomerProfileAnswersFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileAnswersFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileAnswersClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one CustomerProfileAnswers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CustomerProfileAnswersFindUniqueOrThrowArgs} args - Arguments to find a CustomerProfileAnswers
   * @example
   * // Get one CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CustomerProfileAnswersFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      CustomerProfileAnswersFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerProfileAnswersClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CustomerProfileAnswers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileAnswersFindFirstArgs} args - Arguments to find a CustomerProfileAnswers
   * @example
   * // Get one CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CustomerProfileAnswersFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CustomerProfileAnswersFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileAnswersClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first CustomerProfileAnswers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileAnswersFindFirstOrThrowArgs} args - Arguments to find a CustomerProfileAnswers
   * @example
   * // Get one CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CustomerProfileAnswersFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerProfileAnswersFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__CustomerProfileAnswersClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more CustomerProfileAnswers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileAnswersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.findMany()
   *
   * // Get first 10 CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const customerProfileAnswersWithIdOnly = await prisma.customerProfileAnswers.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CustomerProfileAnswersFindManyArgs>(
    args?: Prisma.SelectSubset<T, CustomerProfileAnswersFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a CustomerProfileAnswers.
   * @param {CustomerProfileAnswersCreateArgs} args - Arguments to create a CustomerProfileAnswers.
   * @example
   * // Create one CustomerProfileAnswers
   * const CustomerProfileAnswers = await prisma.customerProfileAnswers.create({
   *   data: {
   *     // ... data to create a CustomerProfileAnswers
   *   }
   * })
   *
   */
  create<T extends CustomerProfileAnswersCreateArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileAnswersCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileAnswersClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many CustomerProfileAnswers.
   * @param {CustomerProfileAnswersCreateManyArgs} args - Arguments to create many CustomerProfileAnswers.
   * @example
   * // Create many CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CustomerProfileAnswersCreateManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerProfileAnswersCreateManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many CustomerProfileAnswers and returns the data saved in the database.
   * @param {CustomerProfileAnswersCreateManyAndReturnArgs} args - Arguments to create many CustomerProfileAnswers.
   * @example
   * // Create many CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CustomerProfileAnswers and only return the `id`
   * const customerProfileAnswersWithIdOnly = await prisma.customerProfileAnswers.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CustomerProfileAnswersCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerProfileAnswersCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a CustomerProfileAnswers.
   * @param {CustomerProfileAnswersDeleteArgs} args - Arguments to delete one CustomerProfileAnswers.
   * @example
   * // Delete one CustomerProfileAnswers
   * const CustomerProfileAnswers = await prisma.customerProfileAnswers.delete({
   *   where: {
   *     // ... filter to delete one CustomerProfileAnswers
   *   }
   * })
   *
   */
  delete<T extends CustomerProfileAnswersDeleteArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileAnswersDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileAnswersClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one CustomerProfileAnswers.
   * @param {CustomerProfileAnswersUpdateArgs} args - Arguments to update one CustomerProfileAnswers.
   * @example
   * // Update one CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CustomerProfileAnswersUpdateArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileAnswersUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileAnswersClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more CustomerProfileAnswers.
   * @param {CustomerProfileAnswersDeleteManyArgs} args - Arguments to filter CustomerProfileAnswers to delete.
   * @example
   * // Delete a few CustomerProfileAnswers
   * const { count } = await prisma.customerProfileAnswers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CustomerProfileAnswersDeleteManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      CustomerProfileAnswersDeleteManyArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CustomerProfileAnswers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileAnswersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CustomerProfileAnswersUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileAnswersUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more CustomerProfileAnswers and returns the data updated in the database.
   * @param {CustomerProfileAnswersUpdateManyAndReturnArgs} args - Arguments to update many CustomerProfileAnswers.
   * @example
   * // Update many CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CustomerProfileAnswers and only return the `id`
   * const customerProfileAnswersWithIdOnly = await prisma.customerProfileAnswers.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CustomerProfileAnswersUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      CustomerProfileAnswersUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one CustomerProfileAnswers.
   * @param {CustomerProfileAnswersUpsertArgs} args - Arguments to update or create a CustomerProfileAnswers.
   * @example
   * // Update or create a CustomerProfileAnswers
   * const customerProfileAnswers = await prisma.customerProfileAnswers.upsert({
   *   create: {
   *     // ... data to create a CustomerProfileAnswers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CustomerProfileAnswers we want to update
   *   }
   * })
   */
  upsert<T extends CustomerProfileAnswersUpsertArgs>(
    args: Prisma.SelectSubset<T, CustomerProfileAnswersUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileAnswersClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileAnswersPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of CustomerProfileAnswers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileAnswersCountArgs} args - Arguments to filter CustomerProfileAnswers to count.
   * @example
   * // Count the number of CustomerProfileAnswers
   * const count = await prisma.customerProfileAnswers.count({
   *   where: {
   *     // ... the filter for the CustomerProfileAnswers we want to count
   *   }
   * })
   **/
  count<T extends CustomerProfileAnswersCountArgs>(
    args?: Prisma.Subset<T, CustomerProfileAnswersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            CustomerProfileAnswersCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a CustomerProfileAnswers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileAnswersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CustomerProfileAnswersAggregateArgs>(
    args: Prisma.Subset<T, CustomerProfileAnswersAggregateArgs>,
  ): Prisma.PrismaPromise<GetCustomerProfileAnswersAggregateType<T>>;

  /**
   * Group by CustomerProfileAnswers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CustomerProfileAnswersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CustomerProfileAnswersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CustomerProfileAnswersGroupByArgs['orderBy'] }
      : { orderBy?: CustomerProfileAnswersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      CustomerProfileAnswersGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetCustomerProfileAnswersGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the CustomerProfileAnswers model
   */
  readonly fields: CustomerProfileAnswersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CustomerProfileAnswers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CustomerProfileAnswersClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  question<T extends Prisma.CustomerProfileQuestionDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CustomerProfileQuestionDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileQuestionClient<
    | runtime.Types.Result.GetResult<
        Prisma.$CustomerProfileQuestionPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  option<T extends Prisma.CustomerProfileAnswers$optionArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.CustomerProfileAnswers$optionArgs<ExtArgs>>,
  ): Prisma.Prisma__CustomerProfileQuestionOptionsClient<
    runtime.Types.Result.GetResult<
      Prisma.$CustomerProfileQuestionOptionsPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the CustomerProfileAnswers model
 */
export interface CustomerProfileAnswersFieldRefs {
  readonly id: Prisma.FieldRef<'CustomerProfileAnswers', 'String'>;
  readonly answerText: Prisma.FieldRef<'CustomerProfileAnswers', 'String'>;
  readonly questionId: Prisma.FieldRef<'CustomerProfileAnswers', 'String'>;
  readonly optionId: Prisma.FieldRef<'CustomerProfileAnswers', 'String'>;
  readonly userId: Prisma.FieldRef<'CustomerProfileAnswers', 'String'>;
  readonly submittedAt: Prisma.FieldRef<'CustomerProfileAnswers', 'DateTime'>;
}

// Custom InputTypes
/**
 * CustomerProfileAnswers findUnique
 */
export type CustomerProfileAnswersFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileAnswers to fetch.
   */
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
};

/**
 * CustomerProfileAnswers findUniqueOrThrow
 */
export type CustomerProfileAnswersFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileAnswers to fetch.
   */
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
};

/**
 * CustomerProfileAnswers findFirst
 */
export type CustomerProfileAnswersFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileAnswers to fetch.
   */
  where?: Prisma.CustomerProfileAnswersWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerProfileAnswers to fetch.
   */
  orderBy?:
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CustomerProfileAnswers.
   */
  cursor?: Prisma.CustomerProfileAnswersWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerProfileAnswers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerProfileAnswers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CustomerProfileAnswers.
   */
  distinct?:
    | Prisma.CustomerProfileAnswersScalarFieldEnum
    | Prisma.CustomerProfileAnswersScalarFieldEnum[];
};

/**
 * CustomerProfileAnswers findFirstOrThrow
 */
export type CustomerProfileAnswersFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileAnswers to fetch.
   */
  where?: Prisma.CustomerProfileAnswersWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerProfileAnswers to fetch.
   */
  orderBy?:
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CustomerProfileAnswers.
   */
  cursor?: Prisma.CustomerProfileAnswersWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerProfileAnswers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerProfileAnswers.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CustomerProfileAnswers.
   */
  distinct?:
    | Prisma.CustomerProfileAnswersScalarFieldEnum
    | Prisma.CustomerProfileAnswersScalarFieldEnum[];
};

/**
 * CustomerProfileAnswers findMany
 */
export type CustomerProfileAnswersFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  /**
   * Filter, which CustomerProfileAnswers to fetch.
   */
  where?: Prisma.CustomerProfileAnswersWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CustomerProfileAnswers to fetch.
   */
  orderBy?:
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput
    | Prisma.CustomerProfileAnswersOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CustomerProfileAnswers.
   */
  cursor?: Prisma.CustomerProfileAnswersWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CustomerProfileAnswers from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CustomerProfileAnswers.
   */
  skip?: number;
  distinct?:
    | Prisma.CustomerProfileAnswersScalarFieldEnum
    | Prisma.CustomerProfileAnswersScalarFieldEnum[];
};

/**
 * CustomerProfileAnswers create
 */
export type CustomerProfileAnswersCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  /**
   * The data needed to create a CustomerProfileAnswers.
   */
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersCreateInput,
    Prisma.CustomerProfileAnswersUncheckedCreateInput
  >;
};

/**
 * CustomerProfileAnswers createMany
 */
export type CustomerProfileAnswersCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many CustomerProfileAnswers.
   */
  data:
    | Prisma.CustomerProfileAnswersCreateManyInput
    | Prisma.CustomerProfileAnswersCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * CustomerProfileAnswers createManyAndReturn
 */
export type CustomerProfileAnswersCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * The data used to create many CustomerProfileAnswers.
   */
  data:
    | Prisma.CustomerProfileAnswersCreateManyInput
    | Prisma.CustomerProfileAnswersCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * CustomerProfileAnswers update
 */
export type CustomerProfileAnswersUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  /**
   * The data needed to update a CustomerProfileAnswers.
   */
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateInput
  >;
  /**
   * Choose, which CustomerProfileAnswers to update.
   */
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
};

/**
 * CustomerProfileAnswers updateMany
 */
export type CustomerProfileAnswersUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update CustomerProfileAnswers.
   */
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateManyMutationInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateManyInput
  >;
  /**
   * Filter which CustomerProfileAnswers to update
   */
  where?: Prisma.CustomerProfileAnswersWhereInput;
  /**
   * Limit how many CustomerProfileAnswers to update.
   */
  limit?: number;
};

/**
 * CustomerProfileAnswers updateManyAndReturn
 */
export type CustomerProfileAnswersUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * The data used to update CustomerProfileAnswers.
   */
  data: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateManyMutationInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateManyInput
  >;
  /**
   * Filter which CustomerProfileAnswers to update
   */
  where?: Prisma.CustomerProfileAnswersWhereInput;
  /**
   * Limit how many CustomerProfileAnswers to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * CustomerProfileAnswers upsert
 */
export type CustomerProfileAnswersUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  /**
   * The filter to search for the CustomerProfileAnswers to update in case it exists.
   */
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
  /**
   * In case the CustomerProfileAnswers found by the `where` argument doesn't exist, create a new CustomerProfileAnswers with this data.
   */
  create: Prisma.XOR<
    Prisma.CustomerProfileAnswersCreateInput,
    Prisma.CustomerProfileAnswersUncheckedCreateInput
  >;
  /**
   * In case the CustomerProfileAnswers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CustomerProfileAnswersUpdateInput,
    Prisma.CustomerProfileAnswersUncheckedUpdateInput
  >;
};

/**
 * CustomerProfileAnswers delete
 */
export type CustomerProfileAnswersDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
  /**
   * Filter which CustomerProfileAnswers to delete.
   */
  where: Prisma.CustomerProfileAnswersWhereUniqueInput;
};

/**
 * CustomerProfileAnswers deleteMany
 */
export type CustomerProfileAnswersDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CustomerProfileAnswers to delete
   */
  where?: Prisma.CustomerProfileAnswersWhereInput;
  /**
   * Limit how many CustomerProfileAnswers to delete.
   */
  limit?: number;
};

/**
 * CustomerProfileAnswers.option
 */
export type CustomerProfileAnswers$optionArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileQuestionOptions
   */
  select?: Prisma.CustomerProfileQuestionOptionsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileQuestionOptions
   */
  omit?: Prisma.CustomerProfileQuestionOptionsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileQuestionOptionsInclude<ExtArgs> | null;
  where?: Prisma.CustomerProfileQuestionOptionsWhereInput;
};

/**
 * CustomerProfileAnswers without action
 */
export type CustomerProfileAnswersDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CustomerProfileAnswers
   */
  select?: Prisma.CustomerProfileAnswersSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the CustomerProfileAnswers
   */
  omit?: Prisma.CustomerProfileAnswersOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CustomerProfileAnswersInclude<ExtArgs> | null;
};
