/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Designation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Designation
 *
 */
export type DesignationModel =
  runtime.Types.Result.DefaultSelection<Prisma.$DesignationPayload>;

export type AggregateDesignation = {
  _count: DesignationCountAggregateOutputType | null;
  _min: DesignationMinAggregateOutputType | null;
  _max: DesignationMaxAggregateOutputType | null;
};

export type DesignationMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  description: string | null;
};

export type DesignationMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  description: string | null;
};

export type DesignationCountAggregateOutputType = {
  id: number;
  name: number;
  description: number;
  _all: number;
};

export type DesignationMinAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
};

export type DesignationMaxAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
};

export type DesignationCountAggregateInputType = {
  id?: true;
  name?: true;
  description?: true;
  _all?: true;
};

export type DesignationAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Designation to aggregate.
   */
  where?: Prisma.DesignationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Designations to fetch.
   */
  orderBy?:
    | Prisma.DesignationOrderByWithRelationInput
    | Prisma.DesignationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.DesignationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Designations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Designations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Designations
   **/
  _count?: true | DesignationCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: DesignationMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: DesignationMaxAggregateInputType;
};

export type GetDesignationAggregateType<T extends DesignationAggregateArgs> = {
  [P in keyof T & keyof AggregateDesignation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDesignation[P]>
    : Prisma.GetScalarType<T[P], AggregateDesignation[P]>;
};

export type DesignationGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.DesignationWhereInput;
  orderBy?:
    | Prisma.DesignationOrderByWithAggregationInput
    | Prisma.DesignationOrderByWithAggregationInput[];
  by: Prisma.DesignationScalarFieldEnum[] | Prisma.DesignationScalarFieldEnum;
  having?: Prisma.DesignationScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: DesignationCountAggregateInputType | true;
  _min?: DesignationMinAggregateInputType;
  _max?: DesignationMaxAggregateInputType;
};

export type DesignationGroupByOutputType = {
  id: string;
  name: string;
  description: string | null;
  _count: DesignationCountAggregateOutputType | null;
  _min: DesignationMinAggregateOutputType | null;
  _max: DesignationMaxAggregateOutputType | null;
};

type GetDesignationGroupByPayload<T extends DesignationGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<DesignationGroupByOutputType, T['by']> & {
        [P in keyof T & keyof DesignationGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DesignationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DesignationGroupByOutputType[P]>;
      }
    >
  >;

export type DesignationWhereInput = {
  AND?: Prisma.DesignationWhereInput | Prisma.DesignationWhereInput[];
  OR?: Prisma.DesignationWhereInput[];
  NOT?: Prisma.DesignationWhereInput | Prisma.DesignationWhereInput[];
  id?: Prisma.UuidFilter<'Designation'> | string;
  name?: Prisma.StringFilter<'Designation'> | string;
  description?: Prisma.StringNullableFilter<'Designation'> | string | null;
  users?: Prisma.UserListRelationFilter;
};

export type DesignationOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  users?: Prisma.UserOrderByRelationAggregateInput;
};

export type DesignationWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    name?: string;
    AND?: Prisma.DesignationWhereInput | Prisma.DesignationWhereInput[];
    OR?: Prisma.DesignationWhereInput[];
    NOT?: Prisma.DesignationWhereInput | Prisma.DesignationWhereInput[];
    description?: Prisma.StringNullableFilter<'Designation'> | string | null;
    users?: Prisma.UserListRelationFilter;
  },
  'id' | 'name'
>;

export type DesignationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.DesignationCountOrderByAggregateInput;
  _max?: Prisma.DesignationMaxOrderByAggregateInput;
  _min?: Prisma.DesignationMinOrderByAggregateInput;
};

export type DesignationScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.DesignationScalarWhereWithAggregatesInput
    | Prisma.DesignationScalarWhereWithAggregatesInput[];
  OR?: Prisma.DesignationScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.DesignationScalarWhereWithAggregatesInput
    | Prisma.DesignationScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'Designation'> | string;
  name?: Prisma.StringWithAggregatesFilter<'Designation'> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'Designation'>
    | string
    | null;
};

export type DesignationCreateInput = {
  id?: string;
  name: string;
  description?: string | null;
  users?: Prisma.UserCreateNestedManyWithoutDesignationInput;
};

export type DesignationUncheckedCreateInput = {
  id?: string;
  name: string;
  description?: string | null;
  users?: Prisma.UserUncheckedCreateNestedManyWithoutDesignationInput;
};

export type DesignationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  users?: Prisma.UserUpdateManyWithoutDesignationNestedInput;
};

export type DesignationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  users?: Prisma.UserUncheckedUpdateManyWithoutDesignationNestedInput;
};

export type DesignationCreateManyInput = {
  id?: string;
  name: string;
  description?: string | null;
};

export type DesignationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type DesignationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type DesignationNullableScalarRelationFilter = {
  is?: Prisma.DesignationWhereInput | null;
  isNot?: Prisma.DesignationWhereInput | null;
};

export type DesignationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
};

export type DesignationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
};

export type DesignationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
};

export type DesignationCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<
    Prisma.DesignationCreateWithoutUsersInput,
    Prisma.DesignationUncheckedCreateWithoutUsersInput
  >;
  connectOrCreate?: Prisma.DesignationCreateOrConnectWithoutUsersInput;
  connect?: Prisma.DesignationWhereUniqueInput;
};

export type DesignationUpdateOneWithoutUsersNestedInput = {
  create?: Prisma.XOR<
    Prisma.DesignationCreateWithoutUsersInput,
    Prisma.DesignationUncheckedCreateWithoutUsersInput
  >;
  connectOrCreate?: Prisma.DesignationCreateOrConnectWithoutUsersInput;
  upsert?: Prisma.DesignationUpsertWithoutUsersInput;
  disconnect?: Prisma.DesignationWhereInput | boolean;
  delete?: Prisma.DesignationWhereInput | boolean;
  connect?: Prisma.DesignationWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.DesignationUpdateToOneWithWhereWithoutUsersInput,
      Prisma.DesignationUpdateWithoutUsersInput
    >,
    Prisma.DesignationUncheckedUpdateWithoutUsersInput
  >;
};

export type DesignationCreateWithoutUsersInput = {
  id?: string;
  name: string;
  description?: string | null;
};

export type DesignationUncheckedCreateWithoutUsersInput = {
  id?: string;
  name: string;
  description?: string | null;
};

export type DesignationCreateOrConnectWithoutUsersInput = {
  where: Prisma.DesignationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DesignationCreateWithoutUsersInput,
    Prisma.DesignationUncheckedCreateWithoutUsersInput
  >;
};

export type DesignationUpsertWithoutUsersInput = {
  update: Prisma.XOR<
    Prisma.DesignationUpdateWithoutUsersInput,
    Prisma.DesignationUncheckedUpdateWithoutUsersInput
  >;
  create: Prisma.XOR<
    Prisma.DesignationCreateWithoutUsersInput,
    Prisma.DesignationUncheckedCreateWithoutUsersInput
  >;
  where?: Prisma.DesignationWhereInput;
};

export type DesignationUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.DesignationWhereInput;
  data: Prisma.XOR<
    Prisma.DesignationUpdateWithoutUsersInput,
    Prisma.DesignationUncheckedUpdateWithoutUsersInput
  >;
};

export type DesignationUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

export type DesignationUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
};

/**
 * Count Type DesignationCountOutputType
 */

export type DesignationCountOutputType = {
  users: number;
};

export type DesignationCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  users?: boolean | DesignationCountOutputTypeCountUsersArgs;
};

/**
 * DesignationCountOutputType without action
 */
export type DesignationCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the DesignationCountOutputType
   */
  select?: Prisma.DesignationCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * DesignationCountOutputType without action
 */
export type DesignationCountOutputTypeCountUsersArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.UserWhereInput;
};

export type DesignationSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
    users?: boolean | Prisma.Designation$usersArgs<ExtArgs>;
    _count?: boolean | Prisma.DesignationCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['designation']
>;

export type DesignationSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
  },
  ExtArgs['result']['designation']
>;

export type DesignationSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    description?: boolean;
  },
  ExtArgs['result']['designation']
>;

export type DesignationSelectScalar = {
  id?: boolean;
  name?: boolean;
  description?: boolean;
};

export type DesignationOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'description',
  ExtArgs['result']['designation']
>;
export type DesignationInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  users?: boolean | Prisma.Designation$usersArgs<ExtArgs>;
  _count?: boolean | Prisma.DesignationCountOutputTypeDefaultArgs<ExtArgs>;
};
export type DesignationIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};
export type DesignationIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {};

export type $DesignationPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Designation';
  objects: {
    users: Prisma.$UserPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      description: string | null;
    },
    ExtArgs['result']['designation']
  >;
  composites: {};
};

export type DesignationGetPayload<
  S extends boolean | null | undefined | DesignationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$DesignationPayload, S>;

export type DesignationCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  DesignationFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: DesignationCountAggregateInputType | true;
};

export interface DesignationDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Designation'];
    meta: { name: 'Designation' };
  };
  /**
   * Find zero or one Designation that matches the filter.
   * @param {DesignationFindUniqueArgs} args - Arguments to find a Designation
   * @example
   * // Get one Designation
   * const designation = await prisma.designation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DesignationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, DesignationFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__DesignationClient<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Designation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DesignationFindUniqueOrThrowArgs} args - Arguments to find a Designation
   * @example
   * // Get one Designation
   * const designation = await prisma.designation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DesignationFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, DesignationFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__DesignationClient<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Designation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DesignationFindFirstArgs} args - Arguments to find a Designation
   * @example
   * // Get one Designation
   * const designation = await prisma.designation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DesignationFindFirstArgs>(
    args?: Prisma.SelectSubset<T, DesignationFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__DesignationClient<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Designation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DesignationFindFirstOrThrowArgs} args - Arguments to find a Designation
   * @example
   * // Get one Designation
   * const designation = await prisma.designation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DesignationFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, DesignationFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__DesignationClient<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Designations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DesignationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Designations
   * const designations = await prisma.designation.findMany()
   *
   * // Get first 10 Designations
   * const designations = await prisma.designation.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const designationWithIdOnly = await prisma.designation.findMany({ select: { id: true } })
   *
   */
  findMany<T extends DesignationFindManyArgs>(
    args?: Prisma.SelectSubset<T, DesignationFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Designation.
   * @param {DesignationCreateArgs} args - Arguments to create a Designation.
   * @example
   * // Create one Designation
   * const Designation = await prisma.designation.create({
   *   data: {
   *     // ... data to create a Designation
   *   }
   * })
   *
   */
  create<T extends DesignationCreateArgs>(
    args: Prisma.SelectSubset<T, DesignationCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__DesignationClient<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Designations.
   * @param {DesignationCreateManyArgs} args - Arguments to create many Designations.
   * @example
   * // Create many Designations
   * const designation = await prisma.designation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends DesignationCreateManyArgs>(
    args?: Prisma.SelectSubset<T, DesignationCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Designations and returns the data saved in the database.
   * @param {DesignationCreateManyAndReturnArgs} args - Arguments to create many Designations.
   * @example
   * // Create many Designations
   * const designation = await prisma.designation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Designations and only return the `id`
   * const designationWithIdOnly = await prisma.designation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends DesignationCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, DesignationCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Designation.
   * @param {DesignationDeleteArgs} args - Arguments to delete one Designation.
   * @example
   * // Delete one Designation
   * const Designation = await prisma.designation.delete({
   *   where: {
   *     // ... filter to delete one Designation
   *   }
   * })
   *
   */
  delete<T extends DesignationDeleteArgs>(
    args: Prisma.SelectSubset<T, DesignationDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__DesignationClient<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Designation.
   * @param {DesignationUpdateArgs} args - Arguments to update one Designation.
   * @example
   * // Update one Designation
   * const designation = await prisma.designation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends DesignationUpdateArgs>(
    args: Prisma.SelectSubset<T, DesignationUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__DesignationClient<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Designations.
   * @param {DesignationDeleteManyArgs} args - Arguments to filter Designations to delete.
   * @example
   * // Delete a few Designations
   * const { count } = await prisma.designation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends DesignationDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, DesignationDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Designations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DesignationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Designations
   * const designation = await prisma.designation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends DesignationUpdateManyArgs>(
    args: Prisma.SelectSubset<T, DesignationUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Designations and returns the data updated in the database.
   * @param {DesignationUpdateManyAndReturnArgs} args - Arguments to update many Designations.
   * @example
   * // Update many Designations
   * const designation = await prisma.designation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Designations and only return the `id`
   * const designationWithIdOnly = await prisma.designation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends DesignationUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, DesignationUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Designation.
   * @param {DesignationUpsertArgs} args - Arguments to update or create a Designation.
   * @example
   * // Update or create a Designation
   * const designation = await prisma.designation.upsert({
   *   create: {
   *     // ... data to create a Designation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Designation we want to update
   *   }
   * })
   */
  upsert<T extends DesignationUpsertArgs>(
    args: Prisma.SelectSubset<T, DesignationUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__DesignationClient<
    runtime.Types.Result.GetResult<
      Prisma.$DesignationPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Designations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DesignationCountArgs} args - Arguments to filter Designations to count.
   * @example
   * // Count the number of Designations
   * const count = await prisma.designation.count({
   *   where: {
   *     // ... the filter for the Designations we want to count
   *   }
   * })
   **/
  count<T extends DesignationCountArgs>(
    args?: Prisma.Subset<T, DesignationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DesignationCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Designation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DesignationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends DesignationAggregateArgs>(
    args: Prisma.Subset<T, DesignationAggregateArgs>,
  ): Prisma.PrismaPromise<GetDesignationAggregateType<T>>;

  /**
   * Group by Designation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DesignationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends DesignationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DesignationGroupByArgs['orderBy'] }
      : { orderBy?: DesignationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, DesignationGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetDesignationGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Designation model
   */
  readonly fields: DesignationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Designation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DesignationClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  users<T extends Prisma.Designation$usersArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Designation$usersArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Designation model
 */
export interface DesignationFieldRefs {
  readonly id: Prisma.FieldRef<'Designation', 'String'>;
  readonly name: Prisma.FieldRef<'Designation', 'String'>;
  readonly description: Prisma.FieldRef<'Designation', 'String'>;
}

// Custom InputTypes
/**
 * Designation findUnique
 */
export type DesignationFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
  /**
   * Filter, which Designation to fetch.
   */
  where: Prisma.DesignationWhereUniqueInput;
};

/**
 * Designation findUniqueOrThrow
 */
export type DesignationFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
  /**
   * Filter, which Designation to fetch.
   */
  where: Prisma.DesignationWhereUniqueInput;
};

/**
 * Designation findFirst
 */
export type DesignationFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
  /**
   * Filter, which Designation to fetch.
   */
  where?: Prisma.DesignationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Designations to fetch.
   */
  orderBy?:
    | Prisma.DesignationOrderByWithRelationInput
    | Prisma.DesignationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Designations.
   */
  cursor?: Prisma.DesignationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Designations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Designations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Designations.
   */
  distinct?:
    | Prisma.DesignationScalarFieldEnum
    | Prisma.DesignationScalarFieldEnum[];
};

/**
 * Designation findFirstOrThrow
 */
export type DesignationFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
  /**
   * Filter, which Designation to fetch.
   */
  where?: Prisma.DesignationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Designations to fetch.
   */
  orderBy?:
    | Prisma.DesignationOrderByWithRelationInput
    | Prisma.DesignationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Designations.
   */
  cursor?: Prisma.DesignationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Designations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Designations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Designations.
   */
  distinct?:
    | Prisma.DesignationScalarFieldEnum
    | Prisma.DesignationScalarFieldEnum[];
};

/**
 * Designation findMany
 */
export type DesignationFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
  /**
   * Filter, which Designations to fetch.
   */
  where?: Prisma.DesignationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Designations to fetch.
   */
  orderBy?:
    | Prisma.DesignationOrderByWithRelationInput
    | Prisma.DesignationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Designations.
   */
  cursor?: Prisma.DesignationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Designations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Designations.
   */
  skip?: number;
  distinct?:
    | Prisma.DesignationScalarFieldEnum
    | Prisma.DesignationScalarFieldEnum[];
};

/**
 * Designation create
 */
export type DesignationCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
  /**
   * The data needed to create a Designation.
   */
  data: Prisma.XOR<
    Prisma.DesignationCreateInput,
    Prisma.DesignationUncheckedCreateInput
  >;
};

/**
 * Designation createMany
 */
export type DesignationCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Designations.
   */
  data: Prisma.DesignationCreateManyInput | Prisma.DesignationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Designation createManyAndReturn
 */
export type DesignationCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * The data used to create many Designations.
   */
  data: Prisma.DesignationCreateManyInput | Prisma.DesignationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Designation update
 */
export type DesignationUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
  /**
   * The data needed to update a Designation.
   */
  data: Prisma.XOR<
    Prisma.DesignationUpdateInput,
    Prisma.DesignationUncheckedUpdateInput
  >;
  /**
   * Choose, which Designation to update.
   */
  where: Prisma.DesignationWhereUniqueInput;
};

/**
 * Designation updateMany
 */
export type DesignationUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Designations.
   */
  data: Prisma.XOR<
    Prisma.DesignationUpdateManyMutationInput,
    Prisma.DesignationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Designations to update
   */
  where?: Prisma.DesignationWhereInput;
  /**
   * Limit how many Designations to update.
   */
  limit?: number;
};

/**
 * Designation updateManyAndReturn
 */
export type DesignationUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * The data used to update Designations.
   */
  data: Prisma.XOR<
    Prisma.DesignationUpdateManyMutationInput,
    Prisma.DesignationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Designations to update
   */
  where?: Prisma.DesignationWhereInput;
  /**
   * Limit how many Designations to update.
   */
  limit?: number;
};

/**
 * Designation upsert
 */
export type DesignationUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
  /**
   * The filter to search for the Designation to update in case it exists.
   */
  where: Prisma.DesignationWhereUniqueInput;
  /**
   * In case the Designation found by the `where` argument doesn't exist, create a new Designation with this data.
   */
  create: Prisma.XOR<
    Prisma.DesignationCreateInput,
    Prisma.DesignationUncheckedCreateInput
  >;
  /**
   * In case the Designation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.DesignationUpdateInput,
    Prisma.DesignationUncheckedUpdateInput
  >;
};

/**
 * Designation delete
 */
export type DesignationDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
  /**
   * Filter which Designation to delete.
   */
  where: Prisma.DesignationWhereUniqueInput;
};

/**
 * Designation deleteMany
 */
export type DesignationDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Designations to delete
   */
  where?: Prisma.DesignationWhereInput;
  /**
   * Limit how many Designations to delete.
   */
  limit?: number;
};

/**
 * Designation.users
 */
export type Designation$usersArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null;
  where?: Prisma.UserWhereInput;
  orderBy?:
    | Prisma.UserOrderByWithRelationInput
    | Prisma.UserOrderByWithRelationInput[];
  cursor?: Prisma.UserWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[];
};

/**
 * Designation without action
 */
export type DesignationDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Designation
   */
  select?: Prisma.DesignationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Designation
   */
  omit?: Prisma.DesignationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DesignationInclude<ExtArgs> | null;
};
