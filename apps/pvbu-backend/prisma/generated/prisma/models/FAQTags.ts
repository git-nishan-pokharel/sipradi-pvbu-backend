/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `FAQTags` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model FAQTags
 *
 */
export type FAQTagsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$FAQTagsPayload>;

export type AggregateFAQTags = {
  _count: FAQTagsCountAggregateOutputType | null;
  _min: FAQTagsMinAggregateOutputType | null;
  _max: FAQTagsMaxAggregateOutputType | null;
};

export type FAQTagsMinAggregateOutputType = {
  id: string | null;
  faqId: string | null;
  tagId: string | null;
};

export type FAQTagsMaxAggregateOutputType = {
  id: string | null;
  faqId: string | null;
  tagId: string | null;
};

export type FAQTagsCountAggregateOutputType = {
  id: number;
  faqId: number;
  tagId: number;
  _all: number;
};

export type FAQTagsMinAggregateInputType = {
  id?: true;
  faqId?: true;
  tagId?: true;
};

export type FAQTagsMaxAggregateInputType = {
  id?: true;
  faqId?: true;
  tagId?: true;
};

export type FAQTagsCountAggregateInputType = {
  id?: true;
  faqId?: true;
  tagId?: true;
  _all?: true;
};

export type FAQTagsAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FAQTags to aggregate.
   */
  where?: Prisma.FAQTagsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FAQTags to fetch.
   */
  orderBy?:
    | Prisma.FAQTagsOrderByWithRelationInput
    | Prisma.FAQTagsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FAQTagsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FAQTags from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FAQTags.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned FAQTags
   **/
  _count?: true | FAQTagsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FAQTagsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FAQTagsMaxAggregateInputType;
};

export type GetFAQTagsAggregateType<T extends FAQTagsAggregateArgs> = {
  [P in keyof T & keyof AggregateFAQTags]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFAQTags[P]>
    : Prisma.GetScalarType<T[P], AggregateFAQTags[P]>;
};

export type FAQTagsGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FAQTagsWhereInput;
  orderBy?:
    | Prisma.FAQTagsOrderByWithAggregationInput
    | Prisma.FAQTagsOrderByWithAggregationInput[];
  by: Prisma.FAQTagsScalarFieldEnum[] | Prisma.FAQTagsScalarFieldEnum;
  having?: Prisma.FAQTagsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: FAQTagsCountAggregateInputType | true;
  _min?: FAQTagsMinAggregateInputType;
  _max?: FAQTagsMaxAggregateInputType;
};

export type FAQTagsGroupByOutputType = {
  id: string;
  faqId: string;
  tagId: string;
  _count: FAQTagsCountAggregateOutputType | null;
  _min: FAQTagsMinAggregateOutputType | null;
  _max: FAQTagsMaxAggregateOutputType | null;
};

type GetFAQTagsGroupByPayload<T extends FAQTagsGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<FAQTagsGroupByOutputType, T['by']> & {
        [P in keyof T & keyof FAQTagsGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FAQTagsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FAQTagsGroupByOutputType[P]>;
      }
    >
  >;

export type FAQTagsWhereInput = {
  AND?: Prisma.FAQTagsWhereInput | Prisma.FAQTagsWhereInput[];
  OR?: Prisma.FAQTagsWhereInput[];
  NOT?: Prisma.FAQTagsWhereInput | Prisma.FAQTagsWhereInput[];
  id?: Prisma.UuidFilter<'FAQTags'> | string;
  faqId?: Prisma.UuidFilter<'FAQTags'> | string;
  tagId?: Prisma.UuidFilter<'FAQTags'> | string;
  faqs?: Prisma.XOR<Prisma.FAQsScalarRelationFilter, Prisma.FAQsWhereInput>;
  tags?: Prisma.XOR<Prisma.TagsScalarRelationFilter, Prisma.TagsWhereInput>;
};

export type FAQTagsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  faqId?: Prisma.SortOrder;
  tagId?: Prisma.SortOrder;
  faqs?: Prisma.FAQsOrderByWithRelationInput;
  tags?: Prisma.TagsOrderByWithRelationInput;
};

export type FAQTagsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.FAQTagsWhereInput | Prisma.FAQTagsWhereInput[];
    OR?: Prisma.FAQTagsWhereInput[];
    NOT?: Prisma.FAQTagsWhereInput | Prisma.FAQTagsWhereInput[];
    faqId?: Prisma.UuidFilter<'FAQTags'> | string;
    tagId?: Prisma.UuidFilter<'FAQTags'> | string;
    faqs?: Prisma.XOR<Prisma.FAQsScalarRelationFilter, Prisma.FAQsWhereInput>;
    tags?: Prisma.XOR<Prisma.TagsScalarRelationFilter, Prisma.TagsWhereInput>;
  },
  'id'
>;

export type FAQTagsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  faqId?: Prisma.SortOrder;
  tagId?: Prisma.SortOrder;
  _count?: Prisma.FAQTagsCountOrderByAggregateInput;
  _max?: Prisma.FAQTagsMaxOrderByAggregateInput;
  _min?: Prisma.FAQTagsMinOrderByAggregateInput;
};

export type FAQTagsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.FAQTagsScalarWhereWithAggregatesInput
    | Prisma.FAQTagsScalarWhereWithAggregatesInput[];
  OR?: Prisma.FAQTagsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.FAQTagsScalarWhereWithAggregatesInput
    | Prisma.FAQTagsScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'FAQTags'> | string;
  faqId?: Prisma.UuidWithAggregatesFilter<'FAQTags'> | string;
  tagId?: Prisma.UuidWithAggregatesFilter<'FAQTags'> | string;
};

export type FAQTagsCreateInput = {
  id?: string;
  faqs: Prisma.FAQsCreateNestedOneWithoutFaqTagsInput;
  tags: Prisma.TagsCreateNestedOneWithoutFaqTagsInput;
};

export type FAQTagsUncheckedCreateInput = {
  id?: string;
  faqId: string;
  tagId: string;
};

export type FAQTagsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  faqs?: Prisma.FAQsUpdateOneRequiredWithoutFaqTagsNestedInput;
  tags?: Prisma.TagsUpdateOneRequiredWithoutFaqTagsNestedInput;
};

export type FAQTagsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  faqId?: Prisma.StringFieldUpdateOperationsInput | string;
  tagId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type FAQTagsCreateManyInput = {
  id?: string;
  faqId: string;
  tagId: string;
};

export type FAQTagsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type FAQTagsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  faqId?: Prisma.StringFieldUpdateOperationsInput | string;
  tagId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type FAQTagsListRelationFilter = {
  every?: Prisma.FAQTagsWhereInput;
  some?: Prisma.FAQTagsWhereInput;
  none?: Prisma.FAQTagsWhereInput;
};

export type FAQTagsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type FAQTagsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  faqId?: Prisma.SortOrder;
  tagId?: Prisma.SortOrder;
};

export type FAQTagsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  faqId?: Prisma.SortOrder;
  tagId?: Prisma.SortOrder;
};

export type FAQTagsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  faqId?: Prisma.SortOrder;
  tagId?: Prisma.SortOrder;
};

export type FAQTagsCreateNestedManyWithoutFaqsInput = {
  create?:
    | Prisma.XOR<
        Prisma.FAQTagsCreateWithoutFaqsInput,
        Prisma.FAQTagsUncheckedCreateWithoutFaqsInput
      >
    | Prisma.FAQTagsCreateWithoutFaqsInput[]
    | Prisma.FAQTagsUncheckedCreateWithoutFaqsInput[];
  connectOrCreate?:
    | Prisma.FAQTagsCreateOrConnectWithoutFaqsInput
    | Prisma.FAQTagsCreateOrConnectWithoutFaqsInput[];
  createMany?: Prisma.FAQTagsCreateManyFaqsInputEnvelope;
  connect?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
};

export type FAQTagsUncheckedCreateNestedManyWithoutFaqsInput = {
  create?:
    | Prisma.XOR<
        Prisma.FAQTagsCreateWithoutFaqsInput,
        Prisma.FAQTagsUncheckedCreateWithoutFaqsInput
      >
    | Prisma.FAQTagsCreateWithoutFaqsInput[]
    | Prisma.FAQTagsUncheckedCreateWithoutFaqsInput[];
  connectOrCreate?:
    | Prisma.FAQTagsCreateOrConnectWithoutFaqsInput
    | Prisma.FAQTagsCreateOrConnectWithoutFaqsInput[];
  createMany?: Prisma.FAQTagsCreateManyFaqsInputEnvelope;
  connect?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
};

export type FAQTagsUpdateManyWithoutFaqsNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FAQTagsCreateWithoutFaqsInput,
        Prisma.FAQTagsUncheckedCreateWithoutFaqsInput
      >
    | Prisma.FAQTagsCreateWithoutFaqsInput[]
    | Prisma.FAQTagsUncheckedCreateWithoutFaqsInput[];
  connectOrCreate?:
    | Prisma.FAQTagsCreateOrConnectWithoutFaqsInput
    | Prisma.FAQTagsCreateOrConnectWithoutFaqsInput[];
  upsert?:
    | Prisma.FAQTagsUpsertWithWhereUniqueWithoutFaqsInput
    | Prisma.FAQTagsUpsertWithWhereUniqueWithoutFaqsInput[];
  createMany?: Prisma.FAQTagsCreateManyFaqsInputEnvelope;
  set?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  disconnect?:
    | Prisma.FAQTagsWhereUniqueInput
    | Prisma.FAQTagsWhereUniqueInput[];
  delete?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  connect?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  update?:
    | Prisma.FAQTagsUpdateWithWhereUniqueWithoutFaqsInput
    | Prisma.FAQTagsUpdateWithWhereUniqueWithoutFaqsInput[];
  updateMany?:
    | Prisma.FAQTagsUpdateManyWithWhereWithoutFaqsInput
    | Prisma.FAQTagsUpdateManyWithWhereWithoutFaqsInput[];
  deleteMany?:
    | Prisma.FAQTagsScalarWhereInput
    | Prisma.FAQTagsScalarWhereInput[];
};

export type FAQTagsUncheckedUpdateManyWithoutFaqsNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FAQTagsCreateWithoutFaqsInput,
        Prisma.FAQTagsUncheckedCreateWithoutFaqsInput
      >
    | Prisma.FAQTagsCreateWithoutFaqsInput[]
    | Prisma.FAQTagsUncheckedCreateWithoutFaqsInput[];
  connectOrCreate?:
    | Prisma.FAQTagsCreateOrConnectWithoutFaqsInput
    | Prisma.FAQTagsCreateOrConnectWithoutFaqsInput[];
  upsert?:
    | Prisma.FAQTagsUpsertWithWhereUniqueWithoutFaqsInput
    | Prisma.FAQTagsUpsertWithWhereUniqueWithoutFaqsInput[];
  createMany?: Prisma.FAQTagsCreateManyFaqsInputEnvelope;
  set?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  disconnect?:
    | Prisma.FAQTagsWhereUniqueInput
    | Prisma.FAQTagsWhereUniqueInput[];
  delete?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  connect?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  update?:
    | Prisma.FAQTagsUpdateWithWhereUniqueWithoutFaqsInput
    | Prisma.FAQTagsUpdateWithWhereUniqueWithoutFaqsInput[];
  updateMany?:
    | Prisma.FAQTagsUpdateManyWithWhereWithoutFaqsInput
    | Prisma.FAQTagsUpdateManyWithWhereWithoutFaqsInput[];
  deleteMany?:
    | Prisma.FAQTagsScalarWhereInput
    | Prisma.FAQTagsScalarWhereInput[];
};

export type FAQTagsCreateNestedManyWithoutTagsInput = {
  create?:
    | Prisma.XOR<
        Prisma.FAQTagsCreateWithoutTagsInput,
        Prisma.FAQTagsUncheckedCreateWithoutTagsInput
      >
    | Prisma.FAQTagsCreateWithoutTagsInput[]
    | Prisma.FAQTagsUncheckedCreateWithoutTagsInput[];
  connectOrCreate?:
    | Prisma.FAQTagsCreateOrConnectWithoutTagsInput
    | Prisma.FAQTagsCreateOrConnectWithoutTagsInput[];
  createMany?: Prisma.FAQTagsCreateManyTagsInputEnvelope;
  connect?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
};

export type FAQTagsUncheckedCreateNestedManyWithoutTagsInput = {
  create?:
    | Prisma.XOR<
        Prisma.FAQTagsCreateWithoutTagsInput,
        Prisma.FAQTagsUncheckedCreateWithoutTagsInput
      >
    | Prisma.FAQTagsCreateWithoutTagsInput[]
    | Prisma.FAQTagsUncheckedCreateWithoutTagsInput[];
  connectOrCreate?:
    | Prisma.FAQTagsCreateOrConnectWithoutTagsInput
    | Prisma.FAQTagsCreateOrConnectWithoutTagsInput[];
  createMany?: Prisma.FAQTagsCreateManyTagsInputEnvelope;
  connect?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
};

export type FAQTagsUpdateManyWithoutTagsNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FAQTagsCreateWithoutTagsInput,
        Prisma.FAQTagsUncheckedCreateWithoutTagsInput
      >
    | Prisma.FAQTagsCreateWithoutTagsInput[]
    | Prisma.FAQTagsUncheckedCreateWithoutTagsInput[];
  connectOrCreate?:
    | Prisma.FAQTagsCreateOrConnectWithoutTagsInput
    | Prisma.FAQTagsCreateOrConnectWithoutTagsInput[];
  upsert?:
    | Prisma.FAQTagsUpsertWithWhereUniqueWithoutTagsInput
    | Prisma.FAQTagsUpsertWithWhereUniqueWithoutTagsInput[];
  createMany?: Prisma.FAQTagsCreateManyTagsInputEnvelope;
  set?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  disconnect?:
    | Prisma.FAQTagsWhereUniqueInput
    | Prisma.FAQTagsWhereUniqueInput[];
  delete?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  connect?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  update?:
    | Prisma.FAQTagsUpdateWithWhereUniqueWithoutTagsInput
    | Prisma.FAQTagsUpdateWithWhereUniqueWithoutTagsInput[];
  updateMany?:
    | Prisma.FAQTagsUpdateManyWithWhereWithoutTagsInput
    | Prisma.FAQTagsUpdateManyWithWhereWithoutTagsInput[];
  deleteMany?:
    | Prisma.FAQTagsScalarWhereInput
    | Prisma.FAQTagsScalarWhereInput[];
};

export type FAQTagsUncheckedUpdateManyWithoutTagsNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FAQTagsCreateWithoutTagsInput,
        Prisma.FAQTagsUncheckedCreateWithoutTagsInput
      >
    | Prisma.FAQTagsCreateWithoutTagsInput[]
    | Prisma.FAQTagsUncheckedCreateWithoutTagsInput[];
  connectOrCreate?:
    | Prisma.FAQTagsCreateOrConnectWithoutTagsInput
    | Prisma.FAQTagsCreateOrConnectWithoutTagsInput[];
  upsert?:
    | Prisma.FAQTagsUpsertWithWhereUniqueWithoutTagsInput
    | Prisma.FAQTagsUpsertWithWhereUniqueWithoutTagsInput[];
  createMany?: Prisma.FAQTagsCreateManyTagsInputEnvelope;
  set?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  disconnect?:
    | Prisma.FAQTagsWhereUniqueInput
    | Prisma.FAQTagsWhereUniqueInput[];
  delete?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  connect?: Prisma.FAQTagsWhereUniqueInput | Prisma.FAQTagsWhereUniqueInput[];
  update?:
    | Prisma.FAQTagsUpdateWithWhereUniqueWithoutTagsInput
    | Prisma.FAQTagsUpdateWithWhereUniqueWithoutTagsInput[];
  updateMany?:
    | Prisma.FAQTagsUpdateManyWithWhereWithoutTagsInput
    | Prisma.FAQTagsUpdateManyWithWhereWithoutTagsInput[];
  deleteMany?:
    | Prisma.FAQTagsScalarWhereInput
    | Prisma.FAQTagsScalarWhereInput[];
};

export type FAQTagsCreateWithoutFaqsInput = {
  id?: string;
  tags: Prisma.TagsCreateNestedOneWithoutFaqTagsInput;
};

export type FAQTagsUncheckedCreateWithoutFaqsInput = {
  id?: string;
  tagId: string;
};

export type FAQTagsCreateOrConnectWithoutFaqsInput = {
  where: Prisma.FAQTagsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FAQTagsCreateWithoutFaqsInput,
    Prisma.FAQTagsUncheckedCreateWithoutFaqsInput
  >;
};

export type FAQTagsCreateManyFaqsInputEnvelope = {
  data: Prisma.FAQTagsCreateManyFaqsInput | Prisma.FAQTagsCreateManyFaqsInput[];
  skipDuplicates?: boolean;
};

export type FAQTagsUpsertWithWhereUniqueWithoutFaqsInput = {
  where: Prisma.FAQTagsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.FAQTagsUpdateWithoutFaqsInput,
    Prisma.FAQTagsUncheckedUpdateWithoutFaqsInput
  >;
  create: Prisma.XOR<
    Prisma.FAQTagsCreateWithoutFaqsInput,
    Prisma.FAQTagsUncheckedCreateWithoutFaqsInput
  >;
};

export type FAQTagsUpdateWithWhereUniqueWithoutFaqsInput = {
  where: Prisma.FAQTagsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.FAQTagsUpdateWithoutFaqsInput,
    Prisma.FAQTagsUncheckedUpdateWithoutFaqsInput
  >;
};

export type FAQTagsUpdateManyWithWhereWithoutFaqsInput = {
  where: Prisma.FAQTagsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.FAQTagsUpdateManyMutationInput,
    Prisma.FAQTagsUncheckedUpdateManyWithoutFaqsInput
  >;
};

export type FAQTagsScalarWhereInput = {
  AND?: Prisma.FAQTagsScalarWhereInput | Prisma.FAQTagsScalarWhereInput[];
  OR?: Prisma.FAQTagsScalarWhereInput[];
  NOT?: Prisma.FAQTagsScalarWhereInput | Prisma.FAQTagsScalarWhereInput[];
  id?: Prisma.UuidFilter<'FAQTags'> | string;
  faqId?: Prisma.UuidFilter<'FAQTags'> | string;
  tagId?: Prisma.UuidFilter<'FAQTags'> | string;
};

export type FAQTagsCreateWithoutTagsInput = {
  id?: string;
  faqs: Prisma.FAQsCreateNestedOneWithoutFaqTagsInput;
};

export type FAQTagsUncheckedCreateWithoutTagsInput = {
  id?: string;
  faqId: string;
};

export type FAQTagsCreateOrConnectWithoutTagsInput = {
  where: Prisma.FAQTagsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.FAQTagsCreateWithoutTagsInput,
    Prisma.FAQTagsUncheckedCreateWithoutTagsInput
  >;
};

export type FAQTagsCreateManyTagsInputEnvelope = {
  data: Prisma.FAQTagsCreateManyTagsInput | Prisma.FAQTagsCreateManyTagsInput[];
  skipDuplicates?: boolean;
};

export type FAQTagsUpsertWithWhereUniqueWithoutTagsInput = {
  where: Prisma.FAQTagsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.FAQTagsUpdateWithoutTagsInput,
    Prisma.FAQTagsUncheckedUpdateWithoutTagsInput
  >;
  create: Prisma.XOR<
    Prisma.FAQTagsCreateWithoutTagsInput,
    Prisma.FAQTagsUncheckedCreateWithoutTagsInput
  >;
};

export type FAQTagsUpdateWithWhereUniqueWithoutTagsInput = {
  where: Prisma.FAQTagsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.FAQTagsUpdateWithoutTagsInput,
    Prisma.FAQTagsUncheckedUpdateWithoutTagsInput
  >;
};

export type FAQTagsUpdateManyWithWhereWithoutTagsInput = {
  where: Prisma.FAQTagsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.FAQTagsUpdateManyMutationInput,
    Prisma.FAQTagsUncheckedUpdateManyWithoutTagsInput
  >;
};

export type FAQTagsCreateManyFaqsInput = {
  id?: string;
  tagId: string;
};

export type FAQTagsUpdateWithoutFaqsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  tags?: Prisma.TagsUpdateOneRequiredWithoutFaqTagsNestedInput;
};

export type FAQTagsUncheckedUpdateWithoutFaqsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  tagId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type FAQTagsUncheckedUpdateManyWithoutFaqsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  tagId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type FAQTagsCreateManyTagsInput = {
  id?: string;
  faqId: string;
};

export type FAQTagsUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  faqs?: Prisma.FAQsUpdateOneRequiredWithoutFaqTagsNestedInput;
};

export type FAQTagsUncheckedUpdateWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  faqId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type FAQTagsUncheckedUpdateManyWithoutTagsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  faqId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type FAQTagsSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    faqId?: boolean;
    tagId?: boolean;
    faqs?: boolean | Prisma.FAQsDefaultArgs<ExtArgs>;
    tags?: boolean | Prisma.TagsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['fAQTags']
>;

export type FAQTagsSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    faqId?: boolean;
    tagId?: boolean;
    faqs?: boolean | Prisma.FAQsDefaultArgs<ExtArgs>;
    tags?: boolean | Prisma.TagsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['fAQTags']
>;

export type FAQTagsSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    faqId?: boolean;
    tagId?: boolean;
    faqs?: boolean | Prisma.FAQsDefaultArgs<ExtArgs>;
    tags?: boolean | Prisma.TagsDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['fAQTags']
>;

export type FAQTagsSelectScalar = {
  id?: boolean;
  faqId?: boolean;
  tagId?: boolean;
};

export type FAQTagsOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'faqId' | 'tagId',
  ExtArgs['result']['fAQTags']
>;
export type FAQTagsInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  faqs?: boolean | Prisma.FAQsDefaultArgs<ExtArgs>;
  tags?: boolean | Prisma.TagsDefaultArgs<ExtArgs>;
};
export type FAQTagsIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  faqs?: boolean | Prisma.FAQsDefaultArgs<ExtArgs>;
  tags?: boolean | Prisma.TagsDefaultArgs<ExtArgs>;
};
export type FAQTagsIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  faqs?: boolean | Prisma.FAQsDefaultArgs<ExtArgs>;
  tags?: boolean | Prisma.TagsDefaultArgs<ExtArgs>;
};

export type $FAQTagsPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'FAQTags';
  objects: {
    faqs: Prisma.$FAQsPayload<ExtArgs>;
    tags: Prisma.$TagsPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      faqId: string;
      tagId: string;
    },
    ExtArgs['result']['fAQTags']
  >;
  composites: {};
};

export type FAQTagsGetPayload<
  S extends boolean | null | undefined | FAQTagsDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$FAQTagsPayload, S>;

export type FAQTagsCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<FAQTagsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: FAQTagsCountAggregateInputType | true;
};

export interface FAQTagsDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['FAQTags'];
    meta: { name: 'FAQTags' };
  };
  /**
   * Find zero or one FAQTags that matches the filter.
   * @param {FAQTagsFindUniqueArgs} args - Arguments to find a FAQTags
   * @example
   * // Get one FAQTags
   * const fAQTags = await prisma.fAQTags.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FAQTagsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FAQTagsFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQTagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one FAQTags that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FAQTagsFindUniqueOrThrowArgs} args - Arguments to find a FAQTags
   * @example
   * // Get one FAQTags
   * const fAQTags = await prisma.fAQTags.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FAQTagsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FAQTagsFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQTagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first FAQTags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQTagsFindFirstArgs} args - Arguments to find a FAQTags
   * @example
   * // Get one FAQTags
   * const fAQTags = await prisma.fAQTags.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FAQTagsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FAQTagsFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQTagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first FAQTags that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQTagsFindFirstOrThrowArgs} args - Arguments to find a FAQTags
   * @example
   * // Get one FAQTags
   * const fAQTags = await prisma.fAQTags.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FAQTagsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FAQTagsFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQTagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more FAQTags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQTagsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FAQTags
   * const fAQTags = await prisma.fAQTags.findMany()
   *
   * // Get first 10 FAQTags
   * const fAQTags = await prisma.fAQTags.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const fAQTagsWithIdOnly = await prisma.fAQTags.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FAQTagsFindManyArgs>(
    args?: Prisma.SelectSubset<T, FAQTagsFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a FAQTags.
   * @param {FAQTagsCreateArgs} args - Arguments to create a FAQTags.
   * @example
   * // Create one FAQTags
   * const FAQTags = await prisma.fAQTags.create({
   *   data: {
   *     // ... data to create a FAQTags
   *   }
   * })
   *
   */
  create<T extends FAQTagsCreateArgs>(
    args: Prisma.SelectSubset<T, FAQTagsCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQTagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many FAQTags.
   * @param {FAQTagsCreateManyArgs} args - Arguments to create many FAQTags.
   * @example
   * // Create many FAQTags
   * const fAQTags = await prisma.fAQTags.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FAQTagsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FAQTagsCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many FAQTags and returns the data saved in the database.
   * @param {FAQTagsCreateManyAndReturnArgs} args - Arguments to create many FAQTags.
   * @example
   * // Create many FAQTags
   * const fAQTags = await prisma.fAQTags.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many FAQTags and only return the `id`
   * const fAQTagsWithIdOnly = await prisma.fAQTags.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FAQTagsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, FAQTagsCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a FAQTags.
   * @param {FAQTagsDeleteArgs} args - Arguments to delete one FAQTags.
   * @example
   * // Delete one FAQTags
   * const FAQTags = await prisma.fAQTags.delete({
   *   where: {
   *     // ... filter to delete one FAQTags
   *   }
   * })
   *
   */
  delete<T extends FAQTagsDeleteArgs>(
    args: Prisma.SelectSubset<T, FAQTagsDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQTagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one FAQTags.
   * @param {FAQTagsUpdateArgs} args - Arguments to update one FAQTags.
   * @example
   * // Update one FAQTags
   * const fAQTags = await prisma.fAQTags.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FAQTagsUpdateArgs>(
    args: Prisma.SelectSubset<T, FAQTagsUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQTagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more FAQTags.
   * @param {FAQTagsDeleteManyArgs} args - Arguments to filter FAQTags to delete.
   * @example
   * // Delete a few FAQTags
   * const { count } = await prisma.fAQTags.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FAQTagsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FAQTagsDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more FAQTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQTagsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FAQTags
   * const fAQTags = await prisma.fAQTags.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FAQTagsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FAQTagsUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more FAQTags and returns the data updated in the database.
   * @param {FAQTagsUpdateManyAndReturnArgs} args - Arguments to update many FAQTags.
   * @example
   * // Update many FAQTags
   * const fAQTags = await prisma.fAQTags.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more FAQTags and only return the `id`
   * const fAQTagsWithIdOnly = await prisma.fAQTags.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FAQTagsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, FAQTagsUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one FAQTags.
   * @param {FAQTagsUpsertArgs} args - Arguments to update or create a FAQTags.
   * @example
   * // Update or create a FAQTags
   * const fAQTags = await prisma.fAQTags.upsert({
   *   create: {
   *     // ... data to create a FAQTags
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FAQTags we want to update
   *   }
   * })
   */
  upsert<T extends FAQTagsUpsertArgs>(
    args: Prisma.SelectSubset<T, FAQTagsUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQTagsClient<
    runtime.Types.Result.GetResult<
      Prisma.$FAQTagsPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of FAQTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQTagsCountArgs} args - Arguments to filter FAQTags to count.
   * @example
   * // Count the number of FAQTags
   * const count = await prisma.fAQTags.count({
   *   where: {
   *     // ... the filter for the FAQTags we want to count
   *   }
   * })
   **/
  count<T extends FAQTagsCountArgs>(
    args?: Prisma.Subset<T, FAQTagsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FAQTagsCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a FAQTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQTagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FAQTagsAggregateArgs>(
    args: Prisma.Subset<T, FAQTagsAggregateArgs>,
  ): Prisma.PrismaPromise<GetFAQTagsAggregateType<T>>;

  /**
   * Group by FAQTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FAQTagsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FAQTagsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FAQTagsGroupByArgs['orderBy'] }
      : { orderBy?: FAQTagsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, FAQTagsGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetFAQTagsGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the FAQTags model
   */
  readonly fields: FAQTagsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FAQTags.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FAQTagsClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  faqs<T extends Prisma.FAQsDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FAQsDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__FAQsClient<
    | runtime.Types.Result.GetResult<
        Prisma.$FAQsPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  tags<T extends Prisma.TagsDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TagsDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__TagsClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TagsPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the FAQTags model
 */
export interface FAQTagsFieldRefs {
  readonly id: Prisma.FieldRef<'FAQTags', 'String'>;
  readonly faqId: Prisma.FieldRef<'FAQTags', 'String'>;
  readonly tagId: Prisma.FieldRef<'FAQTags', 'String'>;
}

// Custom InputTypes
/**
 * FAQTags findUnique
 */
export type FAQTagsFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQTags to fetch.
   */
  where: Prisma.FAQTagsWhereUniqueInput;
};

/**
 * FAQTags findUniqueOrThrow
 */
export type FAQTagsFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQTags to fetch.
   */
  where: Prisma.FAQTagsWhereUniqueInput;
};

/**
 * FAQTags findFirst
 */
export type FAQTagsFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQTags to fetch.
   */
  where?: Prisma.FAQTagsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FAQTags to fetch.
   */
  orderBy?:
    | Prisma.FAQTagsOrderByWithRelationInput
    | Prisma.FAQTagsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FAQTags.
   */
  cursor?: Prisma.FAQTagsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FAQTags from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FAQTags.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FAQTags.
   */
  distinct?: Prisma.FAQTagsScalarFieldEnum | Prisma.FAQTagsScalarFieldEnum[];
};

/**
 * FAQTags findFirstOrThrow
 */
export type FAQTagsFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQTags to fetch.
   */
  where?: Prisma.FAQTagsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FAQTags to fetch.
   */
  orderBy?:
    | Prisma.FAQTagsOrderByWithRelationInput
    | Prisma.FAQTagsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FAQTags.
   */
  cursor?: Prisma.FAQTagsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FAQTags from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FAQTags.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FAQTags.
   */
  distinct?: Prisma.FAQTagsScalarFieldEnum | Prisma.FAQTagsScalarFieldEnum[];
};

/**
 * FAQTags findMany
 */
export type FAQTagsFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  /**
   * Filter, which FAQTags to fetch.
   */
  where?: Prisma.FAQTagsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FAQTags to fetch.
   */
  orderBy?:
    | Prisma.FAQTagsOrderByWithRelationInput
    | Prisma.FAQTagsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing FAQTags.
   */
  cursor?: Prisma.FAQTagsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FAQTags from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FAQTags.
   */
  skip?: number;
  distinct?: Prisma.FAQTagsScalarFieldEnum | Prisma.FAQTagsScalarFieldEnum[];
};

/**
 * FAQTags create
 */
export type FAQTagsCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  /**
   * The data needed to create a FAQTags.
   */
  data: Prisma.XOR<
    Prisma.FAQTagsCreateInput,
    Prisma.FAQTagsUncheckedCreateInput
  >;
};

/**
 * FAQTags createMany
 */
export type FAQTagsCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many FAQTags.
   */
  data: Prisma.FAQTagsCreateManyInput | Prisma.FAQTagsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * FAQTags createManyAndReturn
 */
export type FAQTagsCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * The data used to create many FAQTags.
   */
  data: Prisma.FAQTagsCreateManyInput | Prisma.FAQTagsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * FAQTags update
 */
export type FAQTagsUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  /**
   * The data needed to update a FAQTags.
   */
  data: Prisma.XOR<
    Prisma.FAQTagsUpdateInput,
    Prisma.FAQTagsUncheckedUpdateInput
  >;
  /**
   * Choose, which FAQTags to update.
   */
  where: Prisma.FAQTagsWhereUniqueInput;
};

/**
 * FAQTags updateMany
 */
export type FAQTagsUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update FAQTags.
   */
  data: Prisma.XOR<
    Prisma.FAQTagsUpdateManyMutationInput,
    Prisma.FAQTagsUncheckedUpdateManyInput
  >;
  /**
   * Filter which FAQTags to update
   */
  where?: Prisma.FAQTagsWhereInput;
  /**
   * Limit how many FAQTags to update.
   */
  limit?: number;
};

/**
 * FAQTags updateManyAndReturn
 */
export type FAQTagsUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * The data used to update FAQTags.
   */
  data: Prisma.XOR<
    Prisma.FAQTagsUpdateManyMutationInput,
    Prisma.FAQTagsUncheckedUpdateManyInput
  >;
  /**
   * Filter which FAQTags to update
   */
  where?: Prisma.FAQTagsWhereInput;
  /**
   * Limit how many FAQTags to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * FAQTags upsert
 */
export type FAQTagsUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  /**
   * The filter to search for the FAQTags to update in case it exists.
   */
  where: Prisma.FAQTagsWhereUniqueInput;
  /**
   * In case the FAQTags found by the `where` argument doesn't exist, create a new FAQTags with this data.
   */
  create: Prisma.XOR<
    Prisma.FAQTagsCreateInput,
    Prisma.FAQTagsUncheckedCreateInput
  >;
  /**
   * In case the FAQTags was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.FAQTagsUpdateInput,
    Prisma.FAQTagsUncheckedUpdateInput
  >;
};

/**
 * FAQTags delete
 */
export type FAQTagsDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
  /**
   * Filter which FAQTags to delete.
   */
  where: Prisma.FAQTagsWhereUniqueInput;
};

/**
 * FAQTags deleteMany
 */
export type FAQTagsDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FAQTags to delete
   */
  where?: Prisma.FAQTagsWhereInput;
  /**
   * Limit how many FAQTags to delete.
   */
  limit?: number;
};

/**
 * FAQTags without action
 */
export type FAQTagsDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FAQTags
   */
  select?: Prisma.FAQTagsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the FAQTags
   */
  omit?: Prisma.FAQTagsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FAQTagsInclude<ExtArgs> | null;
};
