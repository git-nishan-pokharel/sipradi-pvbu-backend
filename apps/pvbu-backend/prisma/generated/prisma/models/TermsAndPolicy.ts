/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `TermsAndPolicy` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model TermsAndPolicy
 *
 */
export type TermsAndPolicyModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TermsAndPolicyPayload>;

export type AggregateTermsAndPolicy = {
  _count: TermsAndPolicyCountAggregateOutputType | null;
  _min: TermsAndPolicyMinAggregateOutputType | null;
  _max: TermsAndPolicyMaxAggregateOutputType | null;
};

export type TermsAndPolicyMinAggregateOutputType = {
  id: string | null;
  type: $Enums.TermsAndPolicyType | null;
  content: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TermsAndPolicyMaxAggregateOutputType = {
  id: string | null;
  type: $Enums.TermsAndPolicyType | null;
  content: string | null;
  createdBy: string | null;
  updatedBy: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TermsAndPolicyCountAggregateOutputType = {
  id: number;
  type: number;
  content: number;
  createdBy: number;
  updatedBy: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type TermsAndPolicyMinAggregateInputType = {
  id?: true;
  type?: true;
  content?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TermsAndPolicyMaxAggregateInputType = {
  id?: true;
  type?: true;
  content?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TermsAndPolicyCountAggregateInputType = {
  id?: true;
  type?: true;
  content?: true;
  createdBy?: true;
  updatedBy?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type TermsAndPolicyAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TermsAndPolicy to aggregate.
   */
  where?: Prisma.TermsAndPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TermsAndPolicies to fetch.
   */
  orderBy?:
    | Prisma.TermsAndPolicyOrderByWithRelationInput
    | Prisma.TermsAndPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TermsAndPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TermsAndPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TermsAndPolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TermsAndPolicies
   **/
  _count?: true | TermsAndPolicyCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TermsAndPolicyMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TermsAndPolicyMaxAggregateInputType;
};

export type GetTermsAndPolicyAggregateType<
  T extends TermsAndPolicyAggregateArgs,
> = {
  [P in keyof T & keyof AggregateTermsAndPolicy]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTermsAndPolicy[P]>
    : Prisma.GetScalarType<T[P], AggregateTermsAndPolicy[P]>;
};

export type TermsAndPolicyGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TermsAndPolicyWhereInput;
  orderBy?:
    | Prisma.TermsAndPolicyOrderByWithAggregationInput
    | Prisma.TermsAndPolicyOrderByWithAggregationInput[];
  by:
    | Prisma.TermsAndPolicyScalarFieldEnum[]
    | Prisma.TermsAndPolicyScalarFieldEnum;
  having?: Prisma.TermsAndPolicyScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TermsAndPolicyCountAggregateInputType | true;
  _min?: TermsAndPolicyMinAggregateInputType;
  _max?: TermsAndPolicyMaxAggregateInputType;
};

export type TermsAndPolicyGroupByOutputType = {
  id: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  createdBy: string;
  updatedBy: string;
  createdAt: Date;
  updatedAt: Date;
  _count: TermsAndPolicyCountAggregateOutputType | null;
  _min: TermsAndPolicyMinAggregateOutputType | null;
  _max: TermsAndPolicyMaxAggregateOutputType | null;
};

type GetTermsAndPolicyGroupByPayload<T extends TermsAndPolicyGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<TermsAndPolicyGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof TermsAndPolicyGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TermsAndPolicyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TermsAndPolicyGroupByOutputType[P]>;
      }
    >
  >;

export type TermsAndPolicyWhereInput = {
  AND?: Prisma.TermsAndPolicyWhereInput | Prisma.TermsAndPolicyWhereInput[];
  OR?: Prisma.TermsAndPolicyWhereInput[];
  NOT?: Prisma.TermsAndPolicyWhereInput | Prisma.TermsAndPolicyWhereInput[];
  id?: Prisma.UuidFilter<'TermsAndPolicy'> | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFilter<'TermsAndPolicy'>
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFilter<'TermsAndPolicy'> | string;
  createdBy?: Prisma.UuidFilter<'TermsAndPolicy'> | string;
  updatedBy?: Prisma.UuidFilter<'TermsAndPolicy'> | string;
  createdAt?: Prisma.DateTimeFilter<'TermsAndPolicy'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'TermsAndPolicy'> | Date | string;
  createdByUser?: Prisma.XOR<
    Prisma.UserScalarRelationFilter,
    Prisma.UserWhereInput
  >;
  updatedByUser?: Prisma.XOR<
    Prisma.UserScalarRelationFilter,
    Prisma.UserWhereInput
  >;
};

export type TermsAndPolicyOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  createdByUser?: Prisma.UserOrderByWithRelationInput;
  updatedByUser?: Prisma.UserOrderByWithRelationInput;
};

export type TermsAndPolicyWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.TermsAndPolicyWhereInput | Prisma.TermsAndPolicyWhereInput[];
    OR?: Prisma.TermsAndPolicyWhereInput[];
    NOT?: Prisma.TermsAndPolicyWhereInput | Prisma.TermsAndPolicyWhereInput[];
    type?:
      | Prisma.EnumTermsAndPolicyTypeFilter<'TermsAndPolicy'>
      | $Enums.TermsAndPolicyType;
    content?: Prisma.StringFilter<'TermsAndPolicy'> | string;
    createdBy?: Prisma.UuidFilter<'TermsAndPolicy'> | string;
    updatedBy?: Prisma.UuidFilter<'TermsAndPolicy'> | string;
    createdAt?: Prisma.DateTimeFilter<'TermsAndPolicy'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'TermsAndPolicy'> | Date | string;
    createdByUser?: Prisma.XOR<
      Prisma.UserScalarRelationFilter,
      Prisma.UserWhereInput
    >;
    updatedByUser?: Prisma.XOR<
      Prisma.UserScalarRelationFilter,
      Prisma.UserWhereInput
    >;
  },
  'id'
>;

export type TermsAndPolicyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.TermsAndPolicyCountOrderByAggregateInput;
  _max?: Prisma.TermsAndPolicyMaxOrderByAggregateInput;
  _min?: Prisma.TermsAndPolicyMinOrderByAggregateInput;
};

export type TermsAndPolicyScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TermsAndPolicyScalarWhereWithAggregatesInput
    | Prisma.TermsAndPolicyScalarWhereWithAggregatesInput[];
  OR?: Prisma.TermsAndPolicyScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TermsAndPolicyScalarWhereWithAggregatesInput
    | Prisma.TermsAndPolicyScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'TermsAndPolicy'> | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeWithAggregatesFilter<'TermsAndPolicy'>
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringWithAggregatesFilter<'TermsAndPolicy'> | string;
  createdBy?: Prisma.UuidWithAggregatesFilter<'TermsAndPolicy'> | string;
  updatedBy?: Prisma.UuidWithAggregatesFilter<'TermsAndPolicy'> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'TermsAndPolicy'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'TermsAndPolicy'>
    | Date
    | string;
};

export type TermsAndPolicyCreateInput = {
  id?: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdByUser: Prisma.UserCreateNestedOneWithoutCreatedTermsInput;
  updatedByUser: Prisma.UserCreateNestedOneWithoutUpdatedTermsInput;
};

export type TermsAndPolicyUncheckedCreateInput = {
  id?: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TermsAndPolicyUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdByUser?: Prisma.UserUpdateOneRequiredWithoutCreatedTermsNestedInput;
  updatedByUser?: Prisma.UserUpdateOneRequiredWithoutUpdatedTermsNestedInput;
};

export type TermsAndPolicyUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TermsAndPolicyCreateManyInput = {
  id?: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  createdBy: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TermsAndPolicyUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TermsAndPolicyUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TermsAndPolicyListRelationFilter = {
  every?: Prisma.TermsAndPolicyWhereInput;
  some?: Prisma.TermsAndPolicyWhereInput;
  none?: Prisma.TermsAndPolicyWhereInput;
};

export type TermsAndPolicyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type TermsAndPolicyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TermsAndPolicyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TermsAndPolicyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  type?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdBy?: Prisma.SortOrder;
  updatedBy?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TermsAndPolicyCreateNestedManyWithoutCreatedByUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput,
        Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput
      >
    | Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput[]
    | Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput[];
  connectOrCreate?:
    | Prisma.TermsAndPolicyCreateOrConnectWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyCreateOrConnectWithoutCreatedByUserInput[];
  createMany?: Prisma.TermsAndPolicyCreateManyCreatedByUserInputEnvelope;
  connect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
};

export type TermsAndPolicyCreateNestedManyWithoutUpdatedByUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput,
        Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput
      >
    | Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput[]
    | Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput[];
  connectOrCreate?:
    | Prisma.TermsAndPolicyCreateOrConnectWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyCreateOrConnectWithoutUpdatedByUserInput[];
  createMany?: Prisma.TermsAndPolicyCreateManyUpdatedByUserInputEnvelope;
  connect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
};

export type TermsAndPolicyUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput,
        Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput
      >
    | Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput[]
    | Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput[];
  connectOrCreate?:
    | Prisma.TermsAndPolicyCreateOrConnectWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyCreateOrConnectWithoutCreatedByUserInput[];
  createMany?: Prisma.TermsAndPolicyCreateManyCreatedByUserInputEnvelope;
  connect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
};

export type TermsAndPolicyUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput,
        Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput
      >
    | Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput[]
    | Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput[];
  connectOrCreate?:
    | Prisma.TermsAndPolicyCreateOrConnectWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyCreateOrConnectWithoutUpdatedByUserInput[];
  createMany?: Prisma.TermsAndPolicyCreateManyUpdatedByUserInputEnvelope;
  connect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
};

export type TermsAndPolicyUpdateManyWithoutCreatedByUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput,
        Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput
      >
    | Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput[]
    | Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput[];
  connectOrCreate?:
    | Prisma.TermsAndPolicyCreateOrConnectWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyCreateOrConnectWithoutCreatedByUserInput[];
  upsert?:
    | Prisma.TermsAndPolicyUpsertWithWhereUniqueWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyUpsertWithWhereUniqueWithoutCreatedByUserInput[];
  createMany?: Prisma.TermsAndPolicyCreateManyCreatedByUserInputEnvelope;
  set?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  delete?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  connect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  update?:
    | Prisma.TermsAndPolicyUpdateWithWhereUniqueWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyUpdateWithWhereUniqueWithoutCreatedByUserInput[];
  updateMany?:
    | Prisma.TermsAndPolicyUpdateManyWithWhereWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyUpdateManyWithWhereWithoutCreatedByUserInput[];
  deleteMany?:
    | Prisma.TermsAndPolicyScalarWhereInput
    | Prisma.TermsAndPolicyScalarWhereInput[];
};

export type TermsAndPolicyUpdateManyWithoutUpdatedByUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput,
        Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput
      >
    | Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput[]
    | Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput[];
  connectOrCreate?:
    | Prisma.TermsAndPolicyCreateOrConnectWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyCreateOrConnectWithoutUpdatedByUserInput[];
  upsert?:
    | Prisma.TermsAndPolicyUpsertWithWhereUniqueWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyUpsertWithWhereUniqueWithoutUpdatedByUserInput[];
  createMany?: Prisma.TermsAndPolicyCreateManyUpdatedByUserInputEnvelope;
  set?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  delete?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  connect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  update?:
    | Prisma.TermsAndPolicyUpdateWithWhereUniqueWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyUpdateWithWhereUniqueWithoutUpdatedByUserInput[];
  updateMany?:
    | Prisma.TermsAndPolicyUpdateManyWithWhereWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyUpdateManyWithWhereWithoutUpdatedByUserInput[];
  deleteMany?:
    | Prisma.TermsAndPolicyScalarWhereInput
    | Prisma.TermsAndPolicyScalarWhereInput[];
};

export type TermsAndPolicyUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput,
        Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput
      >
    | Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput[]
    | Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput[];
  connectOrCreate?:
    | Prisma.TermsAndPolicyCreateOrConnectWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyCreateOrConnectWithoutCreatedByUserInput[];
  upsert?:
    | Prisma.TermsAndPolicyUpsertWithWhereUniqueWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyUpsertWithWhereUniqueWithoutCreatedByUserInput[];
  createMany?: Prisma.TermsAndPolicyCreateManyCreatedByUserInputEnvelope;
  set?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  delete?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  connect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  update?:
    | Prisma.TermsAndPolicyUpdateWithWhereUniqueWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyUpdateWithWhereUniqueWithoutCreatedByUserInput[];
  updateMany?:
    | Prisma.TermsAndPolicyUpdateManyWithWhereWithoutCreatedByUserInput
    | Prisma.TermsAndPolicyUpdateManyWithWhereWithoutCreatedByUserInput[];
  deleteMany?:
    | Prisma.TermsAndPolicyScalarWhereInput
    | Prisma.TermsAndPolicyScalarWhereInput[];
};

export type TermsAndPolicyUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput,
        Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput
      >
    | Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput[]
    | Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput[];
  connectOrCreate?:
    | Prisma.TermsAndPolicyCreateOrConnectWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyCreateOrConnectWithoutUpdatedByUserInput[];
  upsert?:
    | Prisma.TermsAndPolicyUpsertWithWhereUniqueWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyUpsertWithWhereUniqueWithoutUpdatedByUserInput[];
  createMany?: Prisma.TermsAndPolicyCreateManyUpdatedByUserInputEnvelope;
  set?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  disconnect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  delete?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  connect?:
    | Prisma.TermsAndPolicyWhereUniqueInput
    | Prisma.TermsAndPolicyWhereUniqueInput[];
  update?:
    | Prisma.TermsAndPolicyUpdateWithWhereUniqueWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyUpdateWithWhereUniqueWithoutUpdatedByUserInput[];
  updateMany?:
    | Prisma.TermsAndPolicyUpdateManyWithWhereWithoutUpdatedByUserInput
    | Prisma.TermsAndPolicyUpdateManyWithWhereWithoutUpdatedByUserInput[];
  deleteMany?:
    | Prisma.TermsAndPolicyScalarWhereInput
    | Prisma.TermsAndPolicyScalarWhereInput[];
};

export type EnumTermsAndPolicyTypeFieldUpdateOperationsInput = {
  set?: $Enums.TermsAndPolicyType;
};

export type TermsAndPolicyCreateWithoutCreatedByUserInput = {
  id?: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  updatedByUser: Prisma.UserCreateNestedOneWithoutUpdatedTermsInput;
};

export type TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput = {
  id?: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TermsAndPolicyCreateOrConnectWithoutCreatedByUserInput = {
  where: Prisma.TermsAndPolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput,
    Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput
  >;
};

export type TermsAndPolicyCreateManyCreatedByUserInputEnvelope = {
  data:
    | Prisma.TermsAndPolicyCreateManyCreatedByUserInput
    | Prisma.TermsAndPolicyCreateManyCreatedByUserInput[];
  skipDuplicates?: boolean;
};

export type TermsAndPolicyCreateWithoutUpdatedByUserInput = {
  id?: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  createdByUser: Prisma.UserCreateNestedOneWithoutCreatedTermsInput;
};

export type TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput = {
  id?: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TermsAndPolicyCreateOrConnectWithoutUpdatedByUserInput = {
  where: Prisma.TermsAndPolicyWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput,
    Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput
  >;
};

export type TermsAndPolicyCreateManyUpdatedByUserInputEnvelope = {
  data:
    | Prisma.TermsAndPolicyCreateManyUpdatedByUserInput
    | Prisma.TermsAndPolicyCreateManyUpdatedByUserInput[];
  skipDuplicates?: boolean;
};

export type TermsAndPolicyUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  where: Prisma.TermsAndPolicyWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateWithoutCreatedByUserInput,
    Prisma.TermsAndPolicyUncheckedUpdateWithoutCreatedByUserInput
  >;
  create: Prisma.XOR<
    Prisma.TermsAndPolicyCreateWithoutCreatedByUserInput,
    Prisma.TermsAndPolicyUncheckedCreateWithoutCreatedByUserInput
  >;
};

export type TermsAndPolicyUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  where: Prisma.TermsAndPolicyWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateWithoutCreatedByUserInput,
    Prisma.TermsAndPolicyUncheckedUpdateWithoutCreatedByUserInput
  >;
};

export type TermsAndPolicyUpdateManyWithWhereWithoutCreatedByUserInput = {
  where: Prisma.TermsAndPolicyScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateManyMutationInput,
    Prisma.TermsAndPolicyUncheckedUpdateManyWithoutCreatedByUserInput
  >;
};

export type TermsAndPolicyScalarWhereInput = {
  AND?:
    | Prisma.TermsAndPolicyScalarWhereInput
    | Prisma.TermsAndPolicyScalarWhereInput[];
  OR?: Prisma.TermsAndPolicyScalarWhereInput[];
  NOT?:
    | Prisma.TermsAndPolicyScalarWhereInput
    | Prisma.TermsAndPolicyScalarWhereInput[];
  id?: Prisma.UuidFilter<'TermsAndPolicy'> | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFilter<'TermsAndPolicy'>
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFilter<'TermsAndPolicy'> | string;
  createdBy?: Prisma.UuidFilter<'TermsAndPolicy'> | string;
  updatedBy?: Prisma.UuidFilter<'TermsAndPolicy'> | string;
  createdAt?: Prisma.DateTimeFilter<'TermsAndPolicy'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'TermsAndPolicy'> | Date | string;
};

export type TermsAndPolicyUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
  where: Prisma.TermsAndPolicyWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateWithoutUpdatedByUserInput,
    Prisma.TermsAndPolicyUncheckedUpdateWithoutUpdatedByUserInput
  >;
  create: Prisma.XOR<
    Prisma.TermsAndPolicyCreateWithoutUpdatedByUserInput,
    Prisma.TermsAndPolicyUncheckedCreateWithoutUpdatedByUserInput
  >;
};

export type TermsAndPolicyUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
  where: Prisma.TermsAndPolicyWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateWithoutUpdatedByUserInput,
    Prisma.TermsAndPolicyUncheckedUpdateWithoutUpdatedByUserInput
  >;
};

export type TermsAndPolicyUpdateManyWithWhereWithoutUpdatedByUserInput = {
  where: Prisma.TermsAndPolicyScalarWhereInput;
  data: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateManyMutationInput,
    Prisma.TermsAndPolicyUncheckedUpdateManyWithoutUpdatedByUserInput
  >;
};

export type TermsAndPolicyCreateManyCreatedByUserInput = {
  id?: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  updatedBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TermsAndPolicyCreateManyUpdatedByUserInput = {
  id?: string;
  type: $Enums.TermsAndPolicyType;
  content: string;
  createdBy: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type TermsAndPolicyUpdateWithoutCreatedByUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedByUser?: Prisma.UserUpdateOneRequiredWithoutUpdatedTermsNestedInput;
};

export type TermsAndPolicyUncheckedUpdateWithoutCreatedByUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TermsAndPolicyUncheckedUpdateManyWithoutCreatedByUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  updatedBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TermsAndPolicyUpdateWithoutUpdatedByUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  createdByUser?: Prisma.UserUpdateOneRequiredWithoutCreatedTermsNestedInput;
};

export type TermsAndPolicyUncheckedUpdateWithoutUpdatedByUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TermsAndPolicyUncheckedUpdateManyWithoutUpdatedByUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  type?:
    | Prisma.EnumTermsAndPolicyTypeFieldUpdateOperationsInput
    | $Enums.TermsAndPolicyType;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdBy?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TermsAndPolicySelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    type?: boolean;
    content?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    updatedByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['termsAndPolicy']
>;

export type TermsAndPolicySelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    type?: boolean;
    content?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    updatedByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['termsAndPolicy']
>;

export type TermsAndPolicySelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    type?: boolean;
    content?: boolean;
    createdBy?: boolean;
    updatedBy?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    createdByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    updatedByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['termsAndPolicy']
>;

export type TermsAndPolicySelectScalar = {
  id?: boolean;
  type?: boolean;
  content?: boolean;
  createdBy?: boolean;
  updatedBy?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type TermsAndPolicyOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'type'
  | 'content'
  | 'createdBy'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['termsAndPolicy']
>;
export type TermsAndPolicyInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  createdByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  updatedByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type TermsAndPolicyIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  createdByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  updatedByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type TermsAndPolicyIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  createdByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  updatedByUser?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $TermsAndPolicyPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'TermsAndPolicy';
  objects: {
    createdByUser: Prisma.$UserPayload<ExtArgs>;
    updatedByUser: Prisma.$UserPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      type: $Enums.TermsAndPolicyType;
      content: string;
      createdBy: string;
      updatedBy: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['termsAndPolicy']
  >;
  composites: {};
};

export type TermsAndPolicyGetPayload<
  S extends boolean | null | undefined | TermsAndPolicyDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TermsAndPolicyPayload, S>;

export type TermsAndPolicyCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  TermsAndPolicyFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: TermsAndPolicyCountAggregateInputType | true;
};

export interface TermsAndPolicyDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['TermsAndPolicy'];
    meta: { name: 'TermsAndPolicy' };
  };
  /**
   * Find zero or one TermsAndPolicy that matches the filter.
   * @param {TermsAndPolicyFindUniqueArgs} args - Arguments to find a TermsAndPolicy
   * @example
   * // Get one TermsAndPolicy
   * const termsAndPolicy = await prisma.termsAndPolicy.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TermsAndPolicyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TermsAndPolicyFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__TermsAndPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one TermsAndPolicy that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TermsAndPolicyFindUniqueOrThrowArgs} args - Arguments to find a TermsAndPolicy
   * @example
   * // Get one TermsAndPolicy
   * const termsAndPolicy = await prisma.termsAndPolicy.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TermsAndPolicyFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TermsAndPolicyFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TermsAndPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TermsAndPolicy that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermsAndPolicyFindFirstArgs} args - Arguments to find a TermsAndPolicy
   * @example
   * // Get one TermsAndPolicy
   * const termsAndPolicy = await prisma.termsAndPolicy.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TermsAndPolicyFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TermsAndPolicyFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__TermsAndPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TermsAndPolicy that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermsAndPolicyFindFirstOrThrowArgs} args - Arguments to find a TermsAndPolicy
   * @example
   * // Get one TermsAndPolicy
   * const termsAndPolicy = await prisma.termsAndPolicy.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TermsAndPolicyFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TermsAndPolicyFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TermsAndPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more TermsAndPolicies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermsAndPolicyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TermsAndPolicies
   * const termsAndPolicies = await prisma.termsAndPolicy.findMany()
   *
   * // Get first 10 TermsAndPolicies
   * const termsAndPolicies = await prisma.termsAndPolicy.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const termsAndPolicyWithIdOnly = await prisma.termsAndPolicy.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TermsAndPolicyFindManyArgs>(
    args?: Prisma.SelectSubset<T, TermsAndPolicyFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a TermsAndPolicy.
   * @param {TermsAndPolicyCreateArgs} args - Arguments to create a TermsAndPolicy.
   * @example
   * // Create one TermsAndPolicy
   * const TermsAndPolicy = await prisma.termsAndPolicy.create({
   *   data: {
   *     // ... data to create a TermsAndPolicy
   *   }
   * })
   *
   */
  create<T extends TermsAndPolicyCreateArgs>(
    args: Prisma.SelectSubset<T, TermsAndPolicyCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__TermsAndPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many TermsAndPolicies.
   * @param {TermsAndPolicyCreateManyArgs} args - Arguments to create many TermsAndPolicies.
   * @example
   * // Create many TermsAndPolicies
   * const termsAndPolicy = await prisma.termsAndPolicy.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TermsAndPolicyCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TermsAndPolicyCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many TermsAndPolicies and returns the data saved in the database.
   * @param {TermsAndPolicyCreateManyAndReturnArgs} args - Arguments to create many TermsAndPolicies.
   * @example
   * // Create many TermsAndPolicies
   * const termsAndPolicy = await prisma.termsAndPolicy.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TermsAndPolicies and only return the `id`
   * const termsAndPolicyWithIdOnly = await prisma.termsAndPolicy.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TermsAndPolicyCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      TermsAndPolicyCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a TermsAndPolicy.
   * @param {TermsAndPolicyDeleteArgs} args - Arguments to delete one TermsAndPolicy.
   * @example
   * // Delete one TermsAndPolicy
   * const TermsAndPolicy = await prisma.termsAndPolicy.delete({
   *   where: {
   *     // ... filter to delete one TermsAndPolicy
   *   }
   * })
   *
   */
  delete<T extends TermsAndPolicyDeleteArgs>(
    args: Prisma.SelectSubset<T, TermsAndPolicyDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__TermsAndPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one TermsAndPolicy.
   * @param {TermsAndPolicyUpdateArgs} args - Arguments to update one TermsAndPolicy.
   * @example
   * // Update one TermsAndPolicy
   * const termsAndPolicy = await prisma.termsAndPolicy.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TermsAndPolicyUpdateArgs>(
    args: Prisma.SelectSubset<T, TermsAndPolicyUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__TermsAndPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more TermsAndPolicies.
   * @param {TermsAndPolicyDeleteManyArgs} args - Arguments to filter TermsAndPolicies to delete.
   * @example
   * // Delete a few TermsAndPolicies
   * const { count } = await prisma.termsAndPolicy.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TermsAndPolicyDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TermsAndPolicyDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TermsAndPolicies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermsAndPolicyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TermsAndPolicies
   * const termsAndPolicy = await prisma.termsAndPolicy.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TermsAndPolicyUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TermsAndPolicyUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TermsAndPolicies and returns the data updated in the database.
   * @param {TermsAndPolicyUpdateManyAndReturnArgs} args - Arguments to update many TermsAndPolicies.
   * @example
   * // Update many TermsAndPolicies
   * const termsAndPolicy = await prisma.termsAndPolicy.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TermsAndPolicies and only return the `id`
   * const termsAndPolicyWithIdOnly = await prisma.termsAndPolicy.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TermsAndPolicyUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      TermsAndPolicyUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one TermsAndPolicy.
   * @param {TermsAndPolicyUpsertArgs} args - Arguments to update or create a TermsAndPolicy.
   * @example
   * // Update or create a TermsAndPolicy
   * const termsAndPolicy = await prisma.termsAndPolicy.upsert({
   *   create: {
   *     // ... data to create a TermsAndPolicy
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TermsAndPolicy we want to update
   *   }
   * })
   */
  upsert<T extends TermsAndPolicyUpsertArgs>(
    args: Prisma.SelectSubset<T, TermsAndPolicyUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__TermsAndPolicyClient<
    runtime.Types.Result.GetResult<
      Prisma.$TermsAndPolicyPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of TermsAndPolicies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermsAndPolicyCountArgs} args - Arguments to filter TermsAndPolicies to count.
   * @example
   * // Count the number of TermsAndPolicies
   * const count = await prisma.termsAndPolicy.count({
   *   where: {
   *     // ... the filter for the TermsAndPolicies we want to count
   *   }
   * })
   **/
  count<T extends TermsAndPolicyCountArgs>(
    args?: Prisma.Subset<T, TermsAndPolicyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            TermsAndPolicyCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a TermsAndPolicy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermsAndPolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TermsAndPolicyAggregateArgs>(
    args: Prisma.Subset<T, TermsAndPolicyAggregateArgs>,
  ): Prisma.PrismaPromise<GetTermsAndPolicyAggregateType<T>>;

  /**
   * Group by TermsAndPolicy.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TermsAndPolicyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TermsAndPolicyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TermsAndPolicyGroupByArgs['orderBy'] }
      : { orderBy?: TermsAndPolicyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, TermsAndPolicyGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetTermsAndPolicyGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the TermsAndPolicy model
   */
  readonly fields: TermsAndPolicyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TermsAndPolicy.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TermsAndPolicyClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  createdByUser<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  updatedByUser<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TermsAndPolicy model
 */
export interface TermsAndPolicyFieldRefs {
  readonly id: Prisma.FieldRef<'TermsAndPolicy', 'String'>;
  readonly type: Prisma.FieldRef<'TermsAndPolicy', 'TermsAndPolicyType'>;
  readonly content: Prisma.FieldRef<'TermsAndPolicy', 'String'>;
  readonly createdBy: Prisma.FieldRef<'TermsAndPolicy', 'String'>;
  readonly updatedBy: Prisma.FieldRef<'TermsAndPolicy', 'String'>;
  readonly createdAt: Prisma.FieldRef<'TermsAndPolicy', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'TermsAndPolicy', 'DateTime'>;
}

// Custom InputTypes
/**
 * TermsAndPolicy findUnique
 */
export type TermsAndPolicyFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which TermsAndPolicy to fetch.
   */
  where: Prisma.TermsAndPolicyWhereUniqueInput;
};

/**
 * TermsAndPolicy findUniqueOrThrow
 */
export type TermsAndPolicyFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which TermsAndPolicy to fetch.
   */
  where: Prisma.TermsAndPolicyWhereUniqueInput;
};

/**
 * TermsAndPolicy findFirst
 */
export type TermsAndPolicyFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which TermsAndPolicy to fetch.
   */
  where?: Prisma.TermsAndPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TermsAndPolicies to fetch.
   */
  orderBy?:
    | Prisma.TermsAndPolicyOrderByWithRelationInput
    | Prisma.TermsAndPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TermsAndPolicies.
   */
  cursor?: Prisma.TermsAndPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TermsAndPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TermsAndPolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TermsAndPolicies.
   */
  distinct?:
    | Prisma.TermsAndPolicyScalarFieldEnum
    | Prisma.TermsAndPolicyScalarFieldEnum[];
};

/**
 * TermsAndPolicy findFirstOrThrow
 */
export type TermsAndPolicyFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which TermsAndPolicy to fetch.
   */
  where?: Prisma.TermsAndPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TermsAndPolicies to fetch.
   */
  orderBy?:
    | Prisma.TermsAndPolicyOrderByWithRelationInput
    | Prisma.TermsAndPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TermsAndPolicies.
   */
  cursor?: Prisma.TermsAndPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TermsAndPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TermsAndPolicies.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TermsAndPolicies.
   */
  distinct?:
    | Prisma.TermsAndPolicyScalarFieldEnum
    | Prisma.TermsAndPolicyScalarFieldEnum[];
};

/**
 * TermsAndPolicy findMany
 */
export type TermsAndPolicyFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
  /**
   * Filter, which TermsAndPolicies to fetch.
   */
  where?: Prisma.TermsAndPolicyWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TermsAndPolicies to fetch.
   */
  orderBy?:
    | Prisma.TermsAndPolicyOrderByWithRelationInput
    | Prisma.TermsAndPolicyOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TermsAndPolicies.
   */
  cursor?: Prisma.TermsAndPolicyWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TermsAndPolicies from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TermsAndPolicies.
   */
  skip?: number;
  distinct?:
    | Prisma.TermsAndPolicyScalarFieldEnum
    | Prisma.TermsAndPolicyScalarFieldEnum[];
};

/**
 * TermsAndPolicy create
 */
export type TermsAndPolicyCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
  /**
   * The data needed to create a TermsAndPolicy.
   */
  data: Prisma.XOR<
    Prisma.TermsAndPolicyCreateInput,
    Prisma.TermsAndPolicyUncheckedCreateInput
  >;
};

/**
 * TermsAndPolicy createMany
 */
export type TermsAndPolicyCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many TermsAndPolicies.
   */
  data:
    | Prisma.TermsAndPolicyCreateManyInput
    | Prisma.TermsAndPolicyCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TermsAndPolicy createManyAndReturn
 */
export type TermsAndPolicyCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * The data used to create many TermsAndPolicies.
   */
  data:
    | Prisma.TermsAndPolicyCreateManyInput
    | Prisma.TermsAndPolicyCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * TermsAndPolicy update
 */
export type TermsAndPolicyUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
  /**
   * The data needed to update a TermsAndPolicy.
   */
  data: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateInput,
    Prisma.TermsAndPolicyUncheckedUpdateInput
  >;
  /**
   * Choose, which TermsAndPolicy to update.
   */
  where: Prisma.TermsAndPolicyWhereUniqueInput;
};

/**
 * TermsAndPolicy updateMany
 */
export type TermsAndPolicyUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update TermsAndPolicies.
   */
  data: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateManyMutationInput,
    Prisma.TermsAndPolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which TermsAndPolicies to update
   */
  where?: Prisma.TermsAndPolicyWhereInput;
  /**
   * Limit how many TermsAndPolicies to update.
   */
  limit?: number;
};

/**
 * TermsAndPolicy updateManyAndReturn
 */
export type TermsAndPolicyUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * The data used to update TermsAndPolicies.
   */
  data: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateManyMutationInput,
    Prisma.TermsAndPolicyUncheckedUpdateManyInput
  >;
  /**
   * Filter which TermsAndPolicies to update
   */
  where?: Prisma.TermsAndPolicyWhereInput;
  /**
   * Limit how many TermsAndPolicies to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * TermsAndPolicy upsert
 */
export type TermsAndPolicyUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
  /**
   * The filter to search for the TermsAndPolicy to update in case it exists.
   */
  where: Prisma.TermsAndPolicyWhereUniqueInput;
  /**
   * In case the TermsAndPolicy found by the `where` argument doesn't exist, create a new TermsAndPolicy with this data.
   */
  create: Prisma.XOR<
    Prisma.TermsAndPolicyCreateInput,
    Prisma.TermsAndPolicyUncheckedCreateInput
  >;
  /**
   * In case the TermsAndPolicy was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.TermsAndPolicyUpdateInput,
    Prisma.TermsAndPolicyUncheckedUpdateInput
  >;
};

/**
 * TermsAndPolicy delete
 */
export type TermsAndPolicyDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
  /**
   * Filter which TermsAndPolicy to delete.
   */
  where: Prisma.TermsAndPolicyWhereUniqueInput;
};

/**
 * TermsAndPolicy deleteMany
 */
export type TermsAndPolicyDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TermsAndPolicies to delete
   */
  where?: Prisma.TermsAndPolicyWhereInput;
  /**
   * Limit how many TermsAndPolicies to delete.
   */
  limit?: number;
};

/**
 * TermsAndPolicy without action
 */
export type TermsAndPolicyDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TermsAndPolicy
   */
  select?: Prisma.TermsAndPolicySelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TermsAndPolicy
   */
  omit?: Prisma.TermsAndPolicyOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TermsAndPolicyInclude<ExtArgs> | null;
};
