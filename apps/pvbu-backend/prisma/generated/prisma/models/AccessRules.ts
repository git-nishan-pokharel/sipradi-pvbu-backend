/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `AccessRules` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model AccessRules
 *
 */
export type AccessRulesModel =
  runtime.Types.Result.DefaultSelection<Prisma.$AccessRulesPayload>;

export type AggregateAccessRules = {
  _count: AccessRulesCountAggregateOutputType | null;
  _avg: AccessRulesAvgAggregateOutputType | null;
  _sum: AccessRulesSumAggregateOutputType | null;
  _min: AccessRulesMinAggregateOutputType | null;
  _max: AccessRulesMaxAggregateOutputType | null;
};

export type AccessRulesAvgAggregateOutputType = {
  id: number | null;
  resourceActionId: number | null;
  policyId: number | null;
  actionConditionId: number | null;
};

export type AccessRulesSumAggregateOutputType = {
  id: number | null;
  resourceActionId: number | null;
  policyId: number | null;
  actionConditionId: number | null;
};

export type AccessRulesMinAggregateOutputType = {
  id: number | null;
  resource: string | null;
  effect: $Enums.AccessRuleEffect | null;
  resourceActionId: number | null;
  policyId: number | null;
  actionConditionId: number | null;
  ruleIdentifier: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AccessRulesMaxAggregateOutputType = {
  id: number | null;
  resource: string | null;
  effect: $Enums.AccessRuleEffect | null;
  resourceActionId: number | null;
  policyId: number | null;
  actionConditionId: number | null;
  ruleIdentifier: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type AccessRulesCountAggregateOutputType = {
  id: number;
  resource: number;
  effect: number;
  resourceActionId: number;
  policyId: number;
  actionConditionId: number;
  ruleIdentifier: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type AccessRulesAvgAggregateInputType = {
  id?: true;
  resourceActionId?: true;
  policyId?: true;
  actionConditionId?: true;
};

export type AccessRulesSumAggregateInputType = {
  id?: true;
  resourceActionId?: true;
  policyId?: true;
  actionConditionId?: true;
};

export type AccessRulesMinAggregateInputType = {
  id?: true;
  resource?: true;
  effect?: true;
  resourceActionId?: true;
  policyId?: true;
  actionConditionId?: true;
  ruleIdentifier?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AccessRulesMaxAggregateInputType = {
  id?: true;
  resource?: true;
  effect?: true;
  resourceActionId?: true;
  policyId?: true;
  actionConditionId?: true;
  ruleIdentifier?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type AccessRulesCountAggregateInputType = {
  id?: true;
  resource?: true;
  effect?: true;
  resourceActionId?: true;
  policyId?: true;
  actionConditionId?: true;
  ruleIdentifier?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type AccessRulesAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AccessRules to aggregate.
   */
  where?: Prisma.AccessRulesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessRules to fetch.
   */
  orderBy?:
    | Prisma.AccessRulesOrderByWithRelationInput
    | Prisma.AccessRulesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.AccessRulesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessRules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned AccessRules
   **/
  _count?: true | AccessRulesCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: AccessRulesAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: AccessRulesSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: AccessRulesMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: AccessRulesMaxAggregateInputType;
};

export type GetAccessRulesAggregateType<T extends AccessRulesAggregateArgs> = {
  [P in keyof T & keyof AggregateAccessRules]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccessRules[P]>
    : Prisma.GetScalarType<T[P], AggregateAccessRules[P]>;
};

export type AccessRulesGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.AccessRulesWhereInput;
  orderBy?:
    | Prisma.AccessRulesOrderByWithAggregationInput
    | Prisma.AccessRulesOrderByWithAggregationInput[];
  by: Prisma.AccessRulesScalarFieldEnum[] | Prisma.AccessRulesScalarFieldEnum;
  having?: Prisma.AccessRulesScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: AccessRulesCountAggregateInputType | true;
  _avg?: AccessRulesAvgAggregateInputType;
  _sum?: AccessRulesSumAggregateInputType;
  _min?: AccessRulesMinAggregateInputType;
  _max?: AccessRulesMaxAggregateInputType;
};

export type AccessRulesGroupByOutputType = {
  id: number;
  resource: string;
  effect: $Enums.AccessRuleEffect;
  resourceActionId: number;
  policyId: number;
  actionConditionId: number | null;
  ruleIdentifier: string;
  createdAt: Date;
  updatedAt: Date;
  _count: AccessRulesCountAggregateOutputType | null;
  _avg: AccessRulesAvgAggregateOutputType | null;
  _sum: AccessRulesSumAggregateOutputType | null;
  _min: AccessRulesMinAggregateOutputType | null;
  _max: AccessRulesMaxAggregateOutputType | null;
};

type GetAccessRulesGroupByPayload<T extends AccessRulesGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<AccessRulesGroupByOutputType, T['by']> & {
        [P in keyof T & keyof AccessRulesGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccessRulesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccessRulesGroupByOutputType[P]>;
      }
    >
  >;

export type AccessRulesWhereInput = {
  AND?: Prisma.AccessRulesWhereInput | Prisma.AccessRulesWhereInput[];
  OR?: Prisma.AccessRulesWhereInput[];
  NOT?: Prisma.AccessRulesWhereInput | Prisma.AccessRulesWhereInput[];
  id?: Prisma.IntFilter<'AccessRules'> | number;
  resource?: Prisma.StringFilter<'AccessRules'> | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFilter<'AccessRules'>
    | $Enums.AccessRuleEffect;
  resourceActionId?: Prisma.IntFilter<'AccessRules'> | number;
  policyId?: Prisma.IntFilter<'AccessRules'> | number;
  actionConditionId?: Prisma.IntNullableFilter<'AccessRules'> | number | null;
  ruleIdentifier?: Prisma.StringFilter<'AccessRules'> | string;
  createdAt?: Prisma.DateTimeFilter<'AccessRules'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'AccessRules'> | Date | string;
  resourceAction?: Prisma.XOR<
    Prisma.ResourceActionScalarRelationFilter,
    Prisma.ResourceActionWhereInput
  >;
  policy?: Prisma.XOR<
    Prisma.AccessPolicyScalarRelationFilter,
    Prisma.AccessPolicyWhereInput
  >;
  actionCondition?: Prisma.XOR<
    Prisma.ActionConditionNullableScalarRelationFilter,
    Prisma.ActionConditionWhereInput
  > | null;
};

export type AccessRulesOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  resource?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  actionConditionId?: Prisma.SortOrderInput | Prisma.SortOrder;
  ruleIdentifier?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  resourceAction?: Prisma.ResourceActionOrderByWithRelationInput;
  policy?: Prisma.AccessPolicyOrderByWithRelationInput;
  actionCondition?: Prisma.ActionConditionOrderByWithRelationInput;
};

export type AccessRulesWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    ruleIdentifier?: string;
    AND?: Prisma.AccessRulesWhereInput | Prisma.AccessRulesWhereInput[];
    OR?: Prisma.AccessRulesWhereInput[];
    NOT?: Prisma.AccessRulesWhereInput | Prisma.AccessRulesWhereInput[];
    resource?: Prisma.StringFilter<'AccessRules'> | string;
    effect?:
      | Prisma.EnumAccessRuleEffectFilter<'AccessRules'>
      | $Enums.AccessRuleEffect;
    resourceActionId?: Prisma.IntFilter<'AccessRules'> | number;
    policyId?: Prisma.IntFilter<'AccessRules'> | number;
    actionConditionId?: Prisma.IntNullableFilter<'AccessRules'> | number | null;
    createdAt?: Prisma.DateTimeFilter<'AccessRules'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'AccessRules'> | Date | string;
    resourceAction?: Prisma.XOR<
      Prisma.ResourceActionScalarRelationFilter,
      Prisma.ResourceActionWhereInput
    >;
    policy?: Prisma.XOR<
      Prisma.AccessPolicyScalarRelationFilter,
      Prisma.AccessPolicyWhereInput
    >;
    actionCondition?: Prisma.XOR<
      Prisma.ActionConditionNullableScalarRelationFilter,
      Prisma.ActionConditionWhereInput
    > | null;
  },
  'id' | 'ruleIdentifier'
>;

export type AccessRulesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  resource?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  actionConditionId?: Prisma.SortOrderInput | Prisma.SortOrder;
  ruleIdentifier?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.AccessRulesCountOrderByAggregateInput;
  _avg?: Prisma.AccessRulesAvgOrderByAggregateInput;
  _max?: Prisma.AccessRulesMaxOrderByAggregateInput;
  _min?: Prisma.AccessRulesMinOrderByAggregateInput;
  _sum?: Prisma.AccessRulesSumOrderByAggregateInput;
};

export type AccessRulesScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.AccessRulesScalarWhereWithAggregatesInput
    | Prisma.AccessRulesScalarWhereWithAggregatesInput[];
  OR?: Prisma.AccessRulesScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.AccessRulesScalarWhereWithAggregatesInput
    | Prisma.AccessRulesScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'AccessRules'> | number;
  resource?: Prisma.StringWithAggregatesFilter<'AccessRules'> | string;
  effect?:
    | Prisma.EnumAccessRuleEffectWithAggregatesFilter<'AccessRules'>
    | $Enums.AccessRuleEffect;
  resourceActionId?: Prisma.IntWithAggregatesFilter<'AccessRules'> | number;
  policyId?: Prisma.IntWithAggregatesFilter<'AccessRules'> | number;
  actionConditionId?:
    | Prisma.IntNullableWithAggregatesFilter<'AccessRules'>
    | number
    | null;
  ruleIdentifier?: Prisma.StringWithAggregatesFilter<'AccessRules'> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'AccessRules'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'AccessRules'>
    | Date
    | string;
};

export type AccessRulesCreateInput = {
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  resourceAction: Prisma.ResourceActionCreateNestedOneWithoutAccessRulesInput;
  policy: Prisma.AccessPolicyCreateNestedOneWithoutRulesInput;
  actionCondition?: Prisma.ActionConditionCreateNestedOneWithoutAccessRulesInput;
};

export type AccessRulesUncheckedCreateInput = {
  id?: number;
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  resourceActionId: number;
  policyId: number;
  actionConditionId?: number | null;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccessRulesUpdateInput = {
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  resourceAction?: Prisma.ResourceActionUpdateOneRequiredWithoutAccessRulesNestedInput;
  policy?: Prisma.AccessPolicyUpdateOneRequiredWithoutRulesNestedInput;
  actionCondition?: Prisma.ActionConditionUpdateOneWithoutAccessRulesNestedInput;
};

export type AccessRulesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  resourceActionId?: Prisma.IntFieldUpdateOperationsInput | number;
  policyId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionConditionId?:
    | Prisma.NullableIntFieldUpdateOperationsInput
    | number
    | null;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessRulesCreateManyInput = {
  id?: number;
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  resourceActionId: number;
  policyId: number;
  actionConditionId?: number | null;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccessRulesUpdateManyMutationInput = {
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessRulesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  resourceActionId?: Prisma.IntFieldUpdateOperationsInput | number;
  policyId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionConditionId?:
    | Prisma.NullableIntFieldUpdateOperationsInput
    | number
    | null;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessRulesListRelationFilter = {
  every?: Prisma.AccessRulesWhereInput;
  some?: Prisma.AccessRulesWhereInput;
  none?: Prisma.AccessRulesWhereInput;
};

export type AccessRulesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type AccessRulesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  resource?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  actionConditionId?: Prisma.SortOrder;
  ruleIdentifier?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccessRulesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  actionConditionId?: Prisma.SortOrder;
};

export type AccessRulesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  resource?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  actionConditionId?: Prisma.SortOrder;
  ruleIdentifier?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccessRulesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  resource?: Prisma.SortOrder;
  effect?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  actionConditionId?: Prisma.SortOrder;
  ruleIdentifier?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type AccessRulesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  resourceActionId?: Prisma.SortOrder;
  policyId?: Prisma.SortOrder;
  actionConditionId?: Prisma.SortOrder;
};

export type AccessRulesCreateNestedManyWithoutPolicyInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutPolicyInput,
        Prisma.AccessRulesUncheckedCreateWithoutPolicyInput
      >
    | Prisma.AccessRulesCreateWithoutPolicyInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutPolicyInput
    | Prisma.AccessRulesCreateOrConnectWithoutPolicyInput[];
  createMany?: Prisma.AccessRulesCreateManyPolicyInputEnvelope;
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
};

export type AccessRulesUncheckedCreateNestedManyWithoutPolicyInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutPolicyInput,
        Prisma.AccessRulesUncheckedCreateWithoutPolicyInput
      >
    | Prisma.AccessRulesCreateWithoutPolicyInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutPolicyInput
    | Prisma.AccessRulesCreateOrConnectWithoutPolicyInput[];
  createMany?: Prisma.AccessRulesCreateManyPolicyInputEnvelope;
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
};

export type AccessRulesUpdateManyWithoutPolicyNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutPolicyInput,
        Prisma.AccessRulesUncheckedCreateWithoutPolicyInput
      >
    | Prisma.AccessRulesCreateWithoutPolicyInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutPolicyInput
    | Prisma.AccessRulesCreateOrConnectWithoutPolicyInput[];
  upsert?:
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutPolicyInput
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutPolicyInput[];
  createMany?: Prisma.AccessRulesCreateManyPolicyInputEnvelope;
  set?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  disconnect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  delete?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  update?:
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutPolicyInput
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutPolicyInput[];
  updateMany?:
    | Prisma.AccessRulesUpdateManyWithWhereWithoutPolicyInput
    | Prisma.AccessRulesUpdateManyWithWhereWithoutPolicyInput[];
  deleteMany?:
    | Prisma.AccessRulesScalarWhereInput
    | Prisma.AccessRulesScalarWhereInput[];
};

export type AccessRulesUncheckedUpdateManyWithoutPolicyNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutPolicyInput,
        Prisma.AccessRulesUncheckedCreateWithoutPolicyInput
      >
    | Prisma.AccessRulesCreateWithoutPolicyInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutPolicyInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutPolicyInput
    | Prisma.AccessRulesCreateOrConnectWithoutPolicyInput[];
  upsert?:
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutPolicyInput
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutPolicyInput[];
  createMany?: Prisma.AccessRulesCreateManyPolicyInputEnvelope;
  set?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  disconnect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  delete?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  update?:
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutPolicyInput
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutPolicyInput[];
  updateMany?:
    | Prisma.AccessRulesUpdateManyWithWhereWithoutPolicyInput
    | Prisma.AccessRulesUpdateManyWithWhereWithoutPolicyInput[];
  deleteMany?:
    | Prisma.AccessRulesScalarWhereInput
    | Prisma.AccessRulesScalarWhereInput[];
};

export type EnumAccessRuleEffectFieldUpdateOperationsInput = {
  set?: $Enums.AccessRuleEffect;
};

export type AccessRulesCreateNestedManyWithoutResourceActionInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutResourceActionInput,
        Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput
      >
    | Prisma.AccessRulesCreateWithoutResourceActionInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutResourceActionInput
    | Prisma.AccessRulesCreateOrConnectWithoutResourceActionInput[];
  createMany?: Prisma.AccessRulesCreateManyResourceActionInputEnvelope;
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
};

export type AccessRulesUncheckedCreateNestedManyWithoutResourceActionInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutResourceActionInput,
        Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput
      >
    | Prisma.AccessRulesCreateWithoutResourceActionInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutResourceActionInput
    | Prisma.AccessRulesCreateOrConnectWithoutResourceActionInput[];
  createMany?: Prisma.AccessRulesCreateManyResourceActionInputEnvelope;
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
};

export type AccessRulesUpdateManyWithoutResourceActionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutResourceActionInput,
        Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput
      >
    | Prisma.AccessRulesCreateWithoutResourceActionInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutResourceActionInput
    | Prisma.AccessRulesCreateOrConnectWithoutResourceActionInput[];
  upsert?:
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutResourceActionInput
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutResourceActionInput[];
  createMany?: Prisma.AccessRulesCreateManyResourceActionInputEnvelope;
  set?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  disconnect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  delete?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  update?:
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutResourceActionInput
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutResourceActionInput[];
  updateMany?:
    | Prisma.AccessRulesUpdateManyWithWhereWithoutResourceActionInput
    | Prisma.AccessRulesUpdateManyWithWhereWithoutResourceActionInput[];
  deleteMany?:
    | Prisma.AccessRulesScalarWhereInput
    | Prisma.AccessRulesScalarWhereInput[];
};

export type AccessRulesUncheckedUpdateManyWithoutResourceActionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutResourceActionInput,
        Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput
      >
    | Prisma.AccessRulesCreateWithoutResourceActionInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutResourceActionInput
    | Prisma.AccessRulesCreateOrConnectWithoutResourceActionInput[];
  upsert?:
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutResourceActionInput
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutResourceActionInput[];
  createMany?: Prisma.AccessRulesCreateManyResourceActionInputEnvelope;
  set?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  disconnect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  delete?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  update?:
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutResourceActionInput
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutResourceActionInput[];
  updateMany?:
    | Prisma.AccessRulesUpdateManyWithWhereWithoutResourceActionInput
    | Prisma.AccessRulesUpdateManyWithWhereWithoutResourceActionInput[];
  deleteMany?:
    | Prisma.AccessRulesScalarWhereInput
    | Prisma.AccessRulesScalarWhereInput[];
};

export type AccessRulesCreateNestedManyWithoutActionConditionInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutActionConditionInput,
        Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput
      >
    | Prisma.AccessRulesCreateWithoutActionConditionInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutActionConditionInput
    | Prisma.AccessRulesCreateOrConnectWithoutActionConditionInput[];
  createMany?: Prisma.AccessRulesCreateManyActionConditionInputEnvelope;
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
};

export type AccessRulesUncheckedCreateNestedManyWithoutActionConditionInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutActionConditionInput,
        Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput
      >
    | Prisma.AccessRulesCreateWithoutActionConditionInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutActionConditionInput
    | Prisma.AccessRulesCreateOrConnectWithoutActionConditionInput[];
  createMany?: Prisma.AccessRulesCreateManyActionConditionInputEnvelope;
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
};

export type AccessRulesUpdateManyWithoutActionConditionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutActionConditionInput,
        Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput
      >
    | Prisma.AccessRulesCreateWithoutActionConditionInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutActionConditionInput
    | Prisma.AccessRulesCreateOrConnectWithoutActionConditionInput[];
  upsert?:
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutActionConditionInput
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutActionConditionInput[];
  createMany?: Prisma.AccessRulesCreateManyActionConditionInputEnvelope;
  set?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  disconnect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  delete?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  update?:
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutActionConditionInput
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutActionConditionInput[];
  updateMany?:
    | Prisma.AccessRulesUpdateManyWithWhereWithoutActionConditionInput
    | Prisma.AccessRulesUpdateManyWithWhereWithoutActionConditionInput[];
  deleteMany?:
    | Prisma.AccessRulesScalarWhereInput
    | Prisma.AccessRulesScalarWhereInput[];
};

export type AccessRulesUncheckedUpdateManyWithoutActionConditionNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.AccessRulesCreateWithoutActionConditionInput,
        Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput
      >
    | Prisma.AccessRulesCreateWithoutActionConditionInput[]
    | Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput[];
  connectOrCreate?:
    | Prisma.AccessRulesCreateOrConnectWithoutActionConditionInput
    | Prisma.AccessRulesCreateOrConnectWithoutActionConditionInput[];
  upsert?:
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutActionConditionInput
    | Prisma.AccessRulesUpsertWithWhereUniqueWithoutActionConditionInput[];
  createMany?: Prisma.AccessRulesCreateManyActionConditionInputEnvelope;
  set?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  disconnect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  delete?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  connect?:
    | Prisma.AccessRulesWhereUniqueInput
    | Prisma.AccessRulesWhereUniqueInput[];
  update?:
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutActionConditionInput
    | Prisma.AccessRulesUpdateWithWhereUniqueWithoutActionConditionInput[];
  updateMany?:
    | Prisma.AccessRulesUpdateManyWithWhereWithoutActionConditionInput
    | Prisma.AccessRulesUpdateManyWithWhereWithoutActionConditionInput[];
  deleteMany?:
    | Prisma.AccessRulesScalarWhereInput
    | Prisma.AccessRulesScalarWhereInput[];
};

export type AccessRulesCreateWithoutPolicyInput = {
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  resourceAction: Prisma.ResourceActionCreateNestedOneWithoutAccessRulesInput;
  actionCondition?: Prisma.ActionConditionCreateNestedOneWithoutAccessRulesInput;
};

export type AccessRulesUncheckedCreateWithoutPolicyInput = {
  id?: number;
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  resourceActionId: number;
  actionConditionId?: number | null;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccessRulesCreateOrConnectWithoutPolicyInput = {
  where: Prisma.AccessRulesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccessRulesCreateWithoutPolicyInput,
    Prisma.AccessRulesUncheckedCreateWithoutPolicyInput
  >;
};

export type AccessRulesCreateManyPolicyInputEnvelope = {
  data:
    | Prisma.AccessRulesCreateManyPolicyInput
    | Prisma.AccessRulesCreateManyPolicyInput[];
  skipDuplicates?: boolean;
};

export type AccessRulesUpsertWithWhereUniqueWithoutPolicyInput = {
  where: Prisma.AccessRulesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccessRulesUpdateWithoutPolicyInput,
    Prisma.AccessRulesUncheckedUpdateWithoutPolicyInput
  >;
  create: Prisma.XOR<
    Prisma.AccessRulesCreateWithoutPolicyInput,
    Prisma.AccessRulesUncheckedCreateWithoutPolicyInput
  >;
};

export type AccessRulesUpdateWithWhereUniqueWithoutPolicyInput = {
  where: Prisma.AccessRulesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AccessRulesUpdateWithoutPolicyInput,
    Prisma.AccessRulesUncheckedUpdateWithoutPolicyInput
  >;
};

export type AccessRulesUpdateManyWithWhereWithoutPolicyInput = {
  where: Prisma.AccessRulesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccessRulesUpdateManyMutationInput,
    Prisma.AccessRulesUncheckedUpdateManyWithoutPolicyInput
  >;
};

export type AccessRulesScalarWhereInput = {
  AND?:
    | Prisma.AccessRulesScalarWhereInput
    | Prisma.AccessRulesScalarWhereInput[];
  OR?: Prisma.AccessRulesScalarWhereInput[];
  NOT?:
    | Prisma.AccessRulesScalarWhereInput
    | Prisma.AccessRulesScalarWhereInput[];
  id?: Prisma.IntFilter<'AccessRules'> | number;
  resource?: Prisma.StringFilter<'AccessRules'> | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFilter<'AccessRules'>
    | $Enums.AccessRuleEffect;
  resourceActionId?: Prisma.IntFilter<'AccessRules'> | number;
  policyId?: Prisma.IntFilter<'AccessRules'> | number;
  actionConditionId?: Prisma.IntNullableFilter<'AccessRules'> | number | null;
  ruleIdentifier?: Prisma.StringFilter<'AccessRules'> | string;
  createdAt?: Prisma.DateTimeFilter<'AccessRules'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'AccessRules'> | Date | string;
};

export type AccessRulesCreateWithoutResourceActionInput = {
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  policy: Prisma.AccessPolicyCreateNestedOneWithoutRulesInput;
  actionCondition?: Prisma.ActionConditionCreateNestedOneWithoutAccessRulesInput;
};

export type AccessRulesUncheckedCreateWithoutResourceActionInput = {
  id?: number;
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  policyId: number;
  actionConditionId?: number | null;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccessRulesCreateOrConnectWithoutResourceActionInput = {
  where: Prisma.AccessRulesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccessRulesCreateWithoutResourceActionInput,
    Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput
  >;
};

export type AccessRulesCreateManyResourceActionInputEnvelope = {
  data:
    | Prisma.AccessRulesCreateManyResourceActionInput
    | Prisma.AccessRulesCreateManyResourceActionInput[];
  skipDuplicates?: boolean;
};

export type AccessRulesUpsertWithWhereUniqueWithoutResourceActionInput = {
  where: Prisma.AccessRulesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccessRulesUpdateWithoutResourceActionInput,
    Prisma.AccessRulesUncheckedUpdateWithoutResourceActionInput
  >;
  create: Prisma.XOR<
    Prisma.AccessRulesCreateWithoutResourceActionInput,
    Prisma.AccessRulesUncheckedCreateWithoutResourceActionInput
  >;
};

export type AccessRulesUpdateWithWhereUniqueWithoutResourceActionInput = {
  where: Prisma.AccessRulesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AccessRulesUpdateWithoutResourceActionInput,
    Prisma.AccessRulesUncheckedUpdateWithoutResourceActionInput
  >;
};

export type AccessRulesUpdateManyWithWhereWithoutResourceActionInput = {
  where: Prisma.AccessRulesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccessRulesUpdateManyMutationInput,
    Prisma.AccessRulesUncheckedUpdateManyWithoutResourceActionInput
  >;
};

export type AccessRulesCreateWithoutActionConditionInput = {
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  resourceAction: Prisma.ResourceActionCreateNestedOneWithoutAccessRulesInput;
  policy: Prisma.AccessPolicyCreateNestedOneWithoutRulesInput;
};

export type AccessRulesUncheckedCreateWithoutActionConditionInput = {
  id?: number;
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  resourceActionId: number;
  policyId: number;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccessRulesCreateOrConnectWithoutActionConditionInput = {
  where: Prisma.AccessRulesWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.AccessRulesCreateWithoutActionConditionInput,
    Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput
  >;
};

export type AccessRulesCreateManyActionConditionInputEnvelope = {
  data:
    | Prisma.AccessRulesCreateManyActionConditionInput
    | Prisma.AccessRulesCreateManyActionConditionInput[];
  skipDuplicates?: boolean;
};

export type AccessRulesUpsertWithWhereUniqueWithoutActionConditionInput = {
  where: Prisma.AccessRulesWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.AccessRulesUpdateWithoutActionConditionInput,
    Prisma.AccessRulesUncheckedUpdateWithoutActionConditionInput
  >;
  create: Prisma.XOR<
    Prisma.AccessRulesCreateWithoutActionConditionInput,
    Prisma.AccessRulesUncheckedCreateWithoutActionConditionInput
  >;
};

export type AccessRulesUpdateWithWhereUniqueWithoutActionConditionInput = {
  where: Prisma.AccessRulesWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.AccessRulesUpdateWithoutActionConditionInput,
    Prisma.AccessRulesUncheckedUpdateWithoutActionConditionInput
  >;
};

export type AccessRulesUpdateManyWithWhereWithoutActionConditionInput = {
  where: Prisma.AccessRulesScalarWhereInput;
  data: Prisma.XOR<
    Prisma.AccessRulesUpdateManyMutationInput,
    Prisma.AccessRulesUncheckedUpdateManyWithoutActionConditionInput
  >;
};

export type AccessRulesCreateManyPolicyInput = {
  id?: number;
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  resourceActionId: number;
  actionConditionId?: number | null;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccessRulesUpdateWithoutPolicyInput = {
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  resourceAction?: Prisma.ResourceActionUpdateOneRequiredWithoutAccessRulesNestedInput;
  actionCondition?: Prisma.ActionConditionUpdateOneWithoutAccessRulesNestedInput;
};

export type AccessRulesUncheckedUpdateWithoutPolicyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  resourceActionId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionConditionId?:
    | Prisma.NullableIntFieldUpdateOperationsInput
    | number
    | null;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessRulesUncheckedUpdateManyWithoutPolicyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  resourceActionId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionConditionId?:
    | Prisma.NullableIntFieldUpdateOperationsInput
    | number
    | null;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessRulesCreateManyResourceActionInput = {
  id?: number;
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  policyId: number;
  actionConditionId?: number | null;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccessRulesUpdateWithoutResourceActionInput = {
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  policy?: Prisma.AccessPolicyUpdateOneRequiredWithoutRulesNestedInput;
  actionCondition?: Prisma.ActionConditionUpdateOneWithoutAccessRulesNestedInput;
};

export type AccessRulesUncheckedUpdateWithoutResourceActionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  policyId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionConditionId?:
    | Prisma.NullableIntFieldUpdateOperationsInput
    | number
    | null;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessRulesUncheckedUpdateManyWithoutResourceActionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  policyId?: Prisma.IntFieldUpdateOperationsInput | number;
  actionConditionId?:
    | Prisma.NullableIntFieldUpdateOperationsInput
    | number
    | null;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessRulesCreateManyActionConditionInput = {
  id?: number;
  resource: string;
  effect?: $Enums.AccessRuleEffect;
  resourceActionId: number;
  policyId: number;
  ruleIdentifier: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type AccessRulesUpdateWithoutActionConditionInput = {
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  resourceAction?: Prisma.ResourceActionUpdateOneRequiredWithoutAccessRulesNestedInput;
  policy?: Prisma.AccessPolicyUpdateOneRequiredWithoutRulesNestedInput;
};

export type AccessRulesUncheckedUpdateWithoutActionConditionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  resourceActionId?: Prisma.IntFieldUpdateOperationsInput | number;
  policyId?: Prisma.IntFieldUpdateOperationsInput | number;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessRulesUncheckedUpdateManyWithoutActionConditionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  resource?: Prisma.StringFieldUpdateOperationsInput | string;
  effect?:
    | Prisma.EnumAccessRuleEffectFieldUpdateOperationsInput
    | $Enums.AccessRuleEffect;
  resourceActionId?: Prisma.IntFieldUpdateOperationsInput | number;
  policyId?: Prisma.IntFieldUpdateOperationsInput | number;
  ruleIdentifier?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type AccessRulesSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    resource?: boolean;
    effect?: boolean;
    resourceActionId?: boolean;
    policyId?: boolean;
    actionConditionId?: boolean;
    ruleIdentifier?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
    policy?: boolean | Prisma.AccessPolicyDefaultArgs<ExtArgs>;
    actionCondition?: boolean | Prisma.AccessRules$actionConditionArgs<ExtArgs>;
  },
  ExtArgs['result']['accessRules']
>;

export type AccessRulesSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    resource?: boolean;
    effect?: boolean;
    resourceActionId?: boolean;
    policyId?: boolean;
    actionConditionId?: boolean;
    ruleIdentifier?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
    policy?: boolean | Prisma.AccessPolicyDefaultArgs<ExtArgs>;
    actionCondition?: boolean | Prisma.AccessRules$actionConditionArgs<ExtArgs>;
  },
  ExtArgs['result']['accessRules']
>;

export type AccessRulesSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    resource?: boolean;
    effect?: boolean;
    resourceActionId?: boolean;
    policyId?: boolean;
    actionConditionId?: boolean;
    ruleIdentifier?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
    policy?: boolean | Prisma.AccessPolicyDefaultArgs<ExtArgs>;
    actionCondition?: boolean | Prisma.AccessRules$actionConditionArgs<ExtArgs>;
  },
  ExtArgs['result']['accessRules']
>;

export type AccessRulesSelectScalar = {
  id?: boolean;
  resource?: boolean;
  effect?: boolean;
  resourceActionId?: boolean;
  policyId?: boolean;
  actionConditionId?: boolean;
  ruleIdentifier?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type AccessRulesOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'resource'
  | 'effect'
  | 'resourceActionId'
  | 'policyId'
  | 'actionConditionId'
  | 'ruleIdentifier'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['accessRules']
>;
export type AccessRulesInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
  policy?: boolean | Prisma.AccessPolicyDefaultArgs<ExtArgs>;
  actionCondition?: boolean | Prisma.AccessRules$actionConditionArgs<ExtArgs>;
};
export type AccessRulesIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
  policy?: boolean | Prisma.AccessPolicyDefaultArgs<ExtArgs>;
  actionCondition?: boolean | Prisma.AccessRules$actionConditionArgs<ExtArgs>;
};
export type AccessRulesIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  resourceAction?: boolean | Prisma.ResourceActionDefaultArgs<ExtArgs>;
  policy?: boolean | Prisma.AccessPolicyDefaultArgs<ExtArgs>;
  actionCondition?: boolean | Prisma.AccessRules$actionConditionArgs<ExtArgs>;
};

export type $AccessRulesPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'AccessRules';
  objects: {
    resourceAction: Prisma.$ResourceActionPayload<ExtArgs>;
    policy: Prisma.$AccessPolicyPayload<ExtArgs>;
    actionCondition: Prisma.$ActionConditionPayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      resource: string;
      effect: $Enums.AccessRuleEffect;
      resourceActionId: number;
      policyId: number;
      actionConditionId: number | null;
      ruleIdentifier: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['accessRules']
  >;
  composites: {};
};

export type AccessRulesGetPayload<
  S extends boolean | null | undefined | AccessRulesDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$AccessRulesPayload, S>;

export type AccessRulesCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  AccessRulesFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: AccessRulesCountAggregateInputType | true;
};

export interface AccessRulesDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['AccessRules'];
    meta: { name: 'AccessRules' };
  };
  /**
   * Find zero or one AccessRules that matches the filter.
   * @param {AccessRulesFindUniqueArgs} args - Arguments to find a AccessRules
   * @example
   * // Get one AccessRules
   * const accessRules = await prisma.accessRules.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccessRulesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, AccessRulesFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessRulesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one AccessRules that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccessRulesFindUniqueOrThrowArgs} args - Arguments to find a AccessRules
   * @example
   * // Get one AccessRules
   * const accessRules = await prisma.accessRules.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccessRulesFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, AccessRulesFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessRulesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccessRules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRulesFindFirstArgs} args - Arguments to find a AccessRules
   * @example
   * // Get one AccessRules
   * const accessRules = await prisma.accessRules.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccessRulesFindFirstArgs>(
    args?: Prisma.SelectSubset<T, AccessRulesFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessRulesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first AccessRules that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRulesFindFirstOrThrowArgs} args - Arguments to find a AccessRules
   * @example
   * // Get one AccessRules
   * const accessRules = await prisma.accessRules.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccessRulesFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, AccessRulesFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessRulesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more AccessRules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRulesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccessRules
   * const accessRules = await prisma.accessRules.findMany()
   *
   * // Get first 10 AccessRules
   * const accessRules = await prisma.accessRules.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const accessRulesWithIdOnly = await prisma.accessRules.findMany({ select: { id: true } })
   *
   */
  findMany<T extends AccessRulesFindManyArgs>(
    args?: Prisma.SelectSubset<T, AccessRulesFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a AccessRules.
   * @param {AccessRulesCreateArgs} args - Arguments to create a AccessRules.
   * @example
   * // Create one AccessRules
   * const AccessRules = await prisma.accessRules.create({
   *   data: {
   *     // ... data to create a AccessRules
   *   }
   * })
   *
   */
  create<T extends AccessRulesCreateArgs>(
    args: Prisma.SelectSubset<T, AccessRulesCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessRulesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many AccessRules.
   * @param {AccessRulesCreateManyArgs} args - Arguments to create many AccessRules.
   * @example
   * // Create many AccessRules
   * const accessRules = await prisma.accessRules.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends AccessRulesCreateManyArgs>(
    args?: Prisma.SelectSubset<T, AccessRulesCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many AccessRules and returns the data saved in the database.
   * @param {AccessRulesCreateManyAndReturnArgs} args - Arguments to create many AccessRules.
   * @example
   * // Create many AccessRules
   * const accessRules = await prisma.accessRules.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many AccessRules and only return the `id`
   * const accessRulesWithIdOnly = await prisma.accessRules.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends AccessRulesCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, AccessRulesCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a AccessRules.
   * @param {AccessRulesDeleteArgs} args - Arguments to delete one AccessRules.
   * @example
   * // Delete one AccessRules
   * const AccessRules = await prisma.accessRules.delete({
   *   where: {
   *     // ... filter to delete one AccessRules
   *   }
   * })
   *
   */
  delete<T extends AccessRulesDeleteArgs>(
    args: Prisma.SelectSubset<T, AccessRulesDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessRulesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one AccessRules.
   * @param {AccessRulesUpdateArgs} args - Arguments to update one AccessRules.
   * @example
   * // Update one AccessRules
   * const accessRules = await prisma.accessRules.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends AccessRulesUpdateArgs>(
    args: Prisma.SelectSubset<T, AccessRulesUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessRulesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more AccessRules.
   * @param {AccessRulesDeleteManyArgs} args - Arguments to filter AccessRules to delete.
   * @example
   * // Delete a few AccessRules
   * const { count } = await prisma.accessRules.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends AccessRulesDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, AccessRulesDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccessRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRulesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccessRules
   * const accessRules = await prisma.accessRules.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends AccessRulesUpdateManyArgs>(
    args: Prisma.SelectSubset<T, AccessRulesUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more AccessRules and returns the data updated in the database.
   * @param {AccessRulesUpdateManyAndReturnArgs} args - Arguments to update many AccessRules.
   * @example
   * // Update many AccessRules
   * const accessRules = await prisma.accessRules.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more AccessRules and only return the `id`
   * const accessRulesWithIdOnly = await prisma.accessRules.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends AccessRulesUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, AccessRulesUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one AccessRules.
   * @param {AccessRulesUpsertArgs} args - Arguments to update or create a AccessRules.
   * @example
   * // Update or create a AccessRules
   * const accessRules = await prisma.accessRules.upsert({
   *   create: {
   *     // ... data to create a AccessRules
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccessRules we want to update
   *   }
   * })
   */
  upsert<T extends AccessRulesUpsertArgs>(
    args: Prisma.SelectSubset<T, AccessRulesUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessRulesClient<
    runtime.Types.Result.GetResult<
      Prisma.$AccessRulesPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of AccessRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRulesCountArgs} args - Arguments to filter AccessRules to count.
   * @example
   * // Count the number of AccessRules
   * const count = await prisma.accessRules.count({
   *   where: {
   *     // ... the filter for the AccessRules we want to count
   *   }
   * })
   **/
  count<T extends AccessRulesCountArgs>(
    args?: Prisma.Subset<T, AccessRulesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccessRulesCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a AccessRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends AccessRulesAggregateArgs>(
    args: Prisma.Subset<T, AccessRulesAggregateArgs>,
  ): Prisma.PrismaPromise<GetAccessRulesAggregateType<T>>;

  /**
   * Group by AccessRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccessRulesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends AccessRulesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccessRulesGroupByArgs['orderBy'] }
      : { orderBy?: AccessRulesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, AccessRulesGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetAccessRulesGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the AccessRules model
   */
  readonly fields: AccessRulesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccessRules.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccessRulesClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  resourceAction<T extends Prisma.ResourceActionDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ResourceActionDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ResourceActionClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ResourceActionPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  policy<T extends Prisma.AccessPolicyDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.AccessPolicyDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__AccessPolicyClient<
    | runtime.Types.Result.GetResult<
        Prisma.$AccessPolicyPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  actionCondition<
    T extends Prisma.AccessRules$actionConditionArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.AccessRules$actionConditionArgs<ExtArgs>>,
  ): Prisma.Prisma__ActionConditionClient<
    runtime.Types.Result.GetResult<
      Prisma.$ActionConditionPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the AccessRules model
 */
export interface AccessRulesFieldRefs {
  readonly id: Prisma.FieldRef<'AccessRules', 'Int'>;
  readonly resource: Prisma.FieldRef<'AccessRules', 'String'>;
  readonly effect: Prisma.FieldRef<'AccessRules', 'AccessRuleEffect'>;
  readonly resourceActionId: Prisma.FieldRef<'AccessRules', 'Int'>;
  readonly policyId: Prisma.FieldRef<'AccessRules', 'Int'>;
  readonly actionConditionId: Prisma.FieldRef<'AccessRules', 'Int'>;
  readonly ruleIdentifier: Prisma.FieldRef<'AccessRules', 'String'>;
  readonly createdAt: Prisma.FieldRef<'AccessRules', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'AccessRules', 'DateTime'>;
}

// Custom InputTypes
/**
 * AccessRules findUnique
 */
export type AccessRulesFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  /**
   * Filter, which AccessRules to fetch.
   */
  where: Prisma.AccessRulesWhereUniqueInput;
};

/**
 * AccessRules findUniqueOrThrow
 */
export type AccessRulesFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  /**
   * Filter, which AccessRules to fetch.
   */
  where: Prisma.AccessRulesWhereUniqueInput;
};

/**
 * AccessRules findFirst
 */
export type AccessRulesFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  /**
   * Filter, which AccessRules to fetch.
   */
  where?: Prisma.AccessRulesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessRules to fetch.
   */
  orderBy?:
    | Prisma.AccessRulesOrderByWithRelationInput
    | Prisma.AccessRulesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccessRules.
   */
  cursor?: Prisma.AccessRulesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessRules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccessRules.
   */
  distinct?:
    | Prisma.AccessRulesScalarFieldEnum
    | Prisma.AccessRulesScalarFieldEnum[];
};

/**
 * AccessRules findFirstOrThrow
 */
export type AccessRulesFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  /**
   * Filter, which AccessRules to fetch.
   */
  where?: Prisma.AccessRulesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessRules to fetch.
   */
  orderBy?:
    | Prisma.AccessRulesOrderByWithRelationInput
    | Prisma.AccessRulesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for AccessRules.
   */
  cursor?: Prisma.AccessRulesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessRules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of AccessRules.
   */
  distinct?:
    | Prisma.AccessRulesScalarFieldEnum
    | Prisma.AccessRulesScalarFieldEnum[];
};

/**
 * AccessRules findMany
 */
export type AccessRulesFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  /**
   * Filter, which AccessRules to fetch.
   */
  where?: Prisma.AccessRulesWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of AccessRules to fetch.
   */
  orderBy?:
    | Prisma.AccessRulesOrderByWithRelationInput
    | Prisma.AccessRulesOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing AccessRules.
   */
  cursor?: Prisma.AccessRulesWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` AccessRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` AccessRules.
   */
  skip?: number;
  distinct?:
    | Prisma.AccessRulesScalarFieldEnum
    | Prisma.AccessRulesScalarFieldEnum[];
};

/**
 * AccessRules create
 */
export type AccessRulesCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  /**
   * The data needed to create a AccessRules.
   */
  data: Prisma.XOR<
    Prisma.AccessRulesCreateInput,
    Prisma.AccessRulesUncheckedCreateInput
  >;
};

/**
 * AccessRules createMany
 */
export type AccessRulesCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many AccessRules.
   */
  data: Prisma.AccessRulesCreateManyInput | Prisma.AccessRulesCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * AccessRules createManyAndReturn
 */
export type AccessRulesCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * The data used to create many AccessRules.
   */
  data: Prisma.AccessRulesCreateManyInput | Prisma.AccessRulesCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * AccessRules update
 */
export type AccessRulesUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  /**
   * The data needed to update a AccessRules.
   */
  data: Prisma.XOR<
    Prisma.AccessRulesUpdateInput,
    Prisma.AccessRulesUncheckedUpdateInput
  >;
  /**
   * Choose, which AccessRules to update.
   */
  where: Prisma.AccessRulesWhereUniqueInput;
};

/**
 * AccessRules updateMany
 */
export type AccessRulesUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update AccessRules.
   */
  data: Prisma.XOR<
    Prisma.AccessRulesUpdateManyMutationInput,
    Prisma.AccessRulesUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccessRules to update
   */
  where?: Prisma.AccessRulesWhereInput;
  /**
   * Limit how many AccessRules to update.
   */
  limit?: number;
};

/**
 * AccessRules updateManyAndReturn
 */
export type AccessRulesUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * The data used to update AccessRules.
   */
  data: Prisma.XOR<
    Prisma.AccessRulesUpdateManyMutationInput,
    Prisma.AccessRulesUncheckedUpdateManyInput
  >;
  /**
   * Filter which AccessRules to update
   */
  where?: Prisma.AccessRulesWhereInput;
  /**
   * Limit how many AccessRules to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * AccessRules upsert
 */
export type AccessRulesUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  /**
   * The filter to search for the AccessRules to update in case it exists.
   */
  where: Prisma.AccessRulesWhereUniqueInput;
  /**
   * In case the AccessRules found by the `where` argument doesn't exist, create a new AccessRules with this data.
   */
  create: Prisma.XOR<
    Prisma.AccessRulesCreateInput,
    Prisma.AccessRulesUncheckedCreateInput
  >;
  /**
   * In case the AccessRules was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.AccessRulesUpdateInput,
    Prisma.AccessRulesUncheckedUpdateInput
  >;
};

/**
 * AccessRules delete
 */
export type AccessRulesDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
  /**
   * Filter which AccessRules to delete.
   */
  where: Prisma.AccessRulesWhereUniqueInput;
};

/**
 * AccessRules deleteMany
 */
export type AccessRulesDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which AccessRules to delete
   */
  where?: Prisma.AccessRulesWhereInput;
  /**
   * Limit how many AccessRules to delete.
   */
  limit?: number;
};

/**
 * AccessRules.actionCondition
 */
export type AccessRules$actionConditionArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ActionCondition
   */
  select?: Prisma.ActionConditionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the ActionCondition
   */
  omit?: Prisma.ActionConditionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ActionConditionInclude<ExtArgs> | null;
  where?: Prisma.ActionConditionWhereInput;
};

/**
 * AccessRules without action
 */
export type AccessRulesDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the AccessRules
   */
  select?: Prisma.AccessRulesSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the AccessRules
   */
  omit?: Prisma.AccessRulesOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccessRulesInclude<ExtArgs> | null;
};
